// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Algorithm.proto

#include "Protocol/Algorithm/Algorithm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Algorithm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlgorithmRequest_Algorithm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Algorithm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlgorithmResponse_Algorithm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Algorithm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Configure_Algorithm_2eproto;
namespace msg {
class ConfigureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Configure> _instance;
} _Configure_default_instance_;
class AlgorithmRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlgorithmRequest> _instance;
} _AlgorithmRequest_default_instance_;
class AlgorithmResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlgorithmResponse> _instance;
} _AlgorithmResponse_default_instance_;
class AlgorithmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Algorithm> _instance;
} _Algorithm_default_instance_;
}  // namespace msg
static void InitDefaultsscc_info_Algorithm_Algorithm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_Algorithm_default_instance_;
    new (ptr) ::msg::Algorithm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::Algorithm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Algorithm_Algorithm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Algorithm_Algorithm_2eproto}, {
      &scc_info_AlgorithmRequest_Algorithm_2eproto.base,
      &scc_info_AlgorithmResponse_Algorithm_2eproto.base,}};

static void InitDefaultsscc_info_AlgorithmRequest_Algorithm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_AlgorithmRequest_default_instance_;
    new (ptr) ::msg::AlgorithmRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::AlgorithmRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlgorithmRequest_Algorithm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AlgorithmRequest_Algorithm_2eproto}, {
      &scc_info_Configure_Algorithm_2eproto.base,}};

static void InitDefaultsscc_info_AlgorithmResponse_Algorithm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_AlgorithmResponse_default_instance_;
    new (ptr) ::msg::AlgorithmResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::AlgorithmResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlgorithmResponse_Algorithm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AlgorithmResponse_Algorithm_2eproto}, {
      &scc_info_Configure_Algorithm_2eproto.base,}};

static void InitDefaultsscc_info_Configure_Algorithm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_Configure_default_instance_;
    new (ptr) ::msg::Configure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::Configure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Configure_Algorithm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Configure_Algorithm_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Algorithm_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Algorithm_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Algorithm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Algorithm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::msg::Configure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::Configure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::Configure, cid_),
  PROTOBUF_FIELD_OFFSET(::msg::Configure, gpu_),
  PROTOBUF_FIELD_OFFSET(::msg::Configure, enablesleep_),
  PROTOBUF_FIELD_OFFSET(::msg::Configure, enablefight_),
  PROTOBUF_FIELD_OFFSET(::msg::Configure, enablehelmet_),
  PROTOBUF_FIELD_OFFSET(::msg::Configure, enablephone_),
  PROTOBUF_FIELD_OFFSET(::msg::Configure, enableattendancein_),
  PROTOBUF_FIELD_OFFSET(::msg::Configure, enableattendanceout_),
  PROTOBUF_FIELD_OFFSET(::msg::Configure, similar_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmRequest, configures_),
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmResponse, result_),
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmResponse, configures_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, command_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, algorithmrequest_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, algorithmresponse_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::msg::Configure)},
  { 23, -1, sizeof(::msg::AlgorithmRequest)},
  { 29, 36, sizeof(::msg::AlgorithmResponse)},
  { 38, 46, sizeof(::msg::Algorithm)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_Configure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_AlgorithmRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_AlgorithmResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_Algorithm_default_instance_),
};

const char descriptor_table_protodef_Algorithm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Algorithm.proto\022\003msg\"\304\001\n\tConfigure\022\013\n\003"
  "cid\030\001 \002(\t\022\013\n\003gpu\030\002 \001(\005\022\023\n\013enablesleep\030\003 "
  "\001(\010\022\023\n\013enablefight\030\004 \001(\010\022\024\n\014enablehelmet"
  "\030\005 \001(\010\022\023\n\013enablephone\030\006 \001(\010\022\032\n\022enableatt"
  "endancein\030\007 \001(\010\022\033\n\023enableattendanceout\030\010"
  " \001(\010\022\017\n\007similar\030\t \001(\002\"6\n\020AlgorithmReques"
  "t\022\"\n\nconfigures\030\001 \003(\0132\016.msg.Configure\"G\n"
  "\021AlgorithmResponse\022\016\n\006result\030\001 \002(\005\022\"\n\nco"
  "nfigures\030\002 \003(\0132\016.msg.Configure\"\347\001\n\tAlgor"
  "ithm\022\'\n\007command\030\001 \002(\0162\026.msg.Algorithm.Co"
  "mmand\022/\n\020algorithmrequest\030\002 \001(\0132\025.msg.Al"
  "gorithmRequest\0221\n\021algorithmresponse\030\003 \001("
  "\0132\026.msg.AlgorithmResponse\"M\n\007Command\022\021\n\r"
  "CONFIGURE_REQ\020\001\022\021\n\rCONFIGURE_REP\020\002\022\r\n\tQU"
  "ERY_REQ\020\003\022\r\n\tQUERY_REP\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Algorithm_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Algorithm_2eproto_sccs[4] = {
  &scc_info_Algorithm_Algorithm_2eproto.base,
  &scc_info_AlgorithmRequest_Algorithm_2eproto.base,
  &scc_info_AlgorithmResponse_Algorithm_2eproto.base,
  &scc_info_Configure_Algorithm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Algorithm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Algorithm_2eproto = {
  false, false, descriptor_table_protodef_Algorithm_2eproto, "Algorithm.proto", 584,
  &descriptor_table_Algorithm_2eproto_once, descriptor_table_Algorithm_2eproto_sccs, descriptor_table_Algorithm_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_Algorithm_2eproto::offsets,
  file_level_metadata_Algorithm_2eproto, 4, file_level_enum_descriptors_Algorithm_2eproto, file_level_service_descriptors_Algorithm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Algorithm_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Algorithm_2eproto)), true);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Algorithm_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Algorithm_2eproto);
  return file_level_enum_descriptors_Algorithm_2eproto[0];
}
bool Algorithm_Command_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Algorithm_Command Algorithm::CONFIGURE_REQ;
constexpr Algorithm_Command Algorithm::CONFIGURE_REP;
constexpr Algorithm_Command Algorithm::QUERY_REQ;
constexpr Algorithm_Command Algorithm::QUERY_REP;
constexpr Algorithm_Command Algorithm::Command_MIN;
constexpr Algorithm_Command Algorithm::Command_MAX;
constexpr int Algorithm::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Configure::InitAsDefaultInstance() {
}
class Configure::_Internal {
 public:
  using HasBits = decltype(std::declval<Configure>()._has_bits_);
  static void set_has_cid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enablesleep(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enablefight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enablehelmet(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enablephone(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enableattendancein(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enableattendanceout(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_similar(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Configure::Configure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.Configure)
}
Configure::Configure(const Configure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cid()) {
    cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cid(),
      GetArena());
  }
  ::memcpy(&gpu_, &from.gpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&similar_) -
    reinterpret_cast<char*>(&gpu_)) + sizeof(similar_));
  // @@protoc_insertion_point(copy_constructor:msg.Configure)
}

void Configure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Configure_Algorithm_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&similar_) -
      reinterpret_cast<char*>(&gpu_)) + sizeof(similar_));
}

Configure::~Configure() {
  // @@protoc_insertion_point(destructor:msg.Configure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Configure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Configure::ArenaDtor(void* object) {
  Configure* _this = reinterpret_cast< Configure* >(object);
  (void)_this;
}
void Configure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Configure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Configure& Configure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Configure_Algorithm_2eproto.base);
  return *internal_default_instance();
}


void Configure::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Configure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&gpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enableattendanceout_) -
        reinterpret_cast<char*>(&gpu_)) + sizeof(enableattendanceout_));
  }
  similar_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.Configure.cid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gpu(&has_bits);
          gpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enablesleep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enablesleep(&has_bits);
          enablesleep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enablefight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enablefight(&has_bits);
          enablefight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enablehelmet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enablehelmet(&has_bits);
          enablehelmet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enablephone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enablephone(&has_bits);
          enablephone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableattendancein = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enableattendancein(&has_bits);
          enableattendancein_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableattendanceout = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_enableattendanceout(&has_bits);
          enableattendanceout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float similar = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_similar(&has_bits);
          similar_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Configure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Configure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string cid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.Configure.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // optional int32 gpu = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gpu(), target);
  }

  // optional bool enablesleep = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enablesleep(), target);
  }

  // optional bool enablefight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enablefight(), target);
  }

  // optional bool enablehelmet = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enablehelmet(), target);
  }

  // optional bool enablephone = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enablephone(), target);
  }

  // optional bool enableattendancein = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enableattendancein(), target);
  }

  // optional bool enableattendanceout = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enableattendanceout(), target);
  }

  // optional float similar = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_similar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Configure)
  return target;
}

size_t Configure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Configure)
  size_t total_size = 0;

  // required string cid = 1;
  if (_internal_has_cid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional int32 gpu = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gpu());
    }

    // optional bool enablesleep = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enablefight = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enablehelmet = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enablephone = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enableattendancein = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enableattendanceout = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional float similar = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Configure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.Configure)
  GOOGLE_DCHECK_NE(&from, this);
  const Configure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Configure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.Configure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.Configure)
    MergeFrom(*source);
  }
}

void Configure::MergeFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.Configure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cid(from._internal_cid());
    }
    if (cached_has_bits & 0x00000002u) {
      gpu_ = from.gpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      enablesleep_ = from.enablesleep_;
    }
    if (cached_has_bits & 0x00000008u) {
      enablefight_ = from.enablefight_;
    }
    if (cached_has_bits & 0x00000010u) {
      enablehelmet_ = from.enablehelmet_;
    }
    if (cached_has_bits & 0x00000020u) {
      enablephone_ = from.enablephone_;
    }
    if (cached_has_bits & 0x00000040u) {
      enableattendancein_ = from.enableattendancein_;
    }
    if (cached_has_bits & 0x00000080u) {
      enableattendanceout_ = from.enableattendanceout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_similar(from._internal_similar());
  }
}

void Configure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.Configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configure::CopyFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configure::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Configure::InternalSwap(Configure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configure, similar_)
      + sizeof(Configure::similar_)
      - PROTOBUF_FIELD_OFFSET(Configure, gpu_)>(
          reinterpret_cast<char*>(&gpu_),
          reinterpret_cast<char*>(&other->gpu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Configure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlgorithmRequest::InitAsDefaultInstance() {
}
class AlgorithmRequest::_Internal {
 public:
};

AlgorithmRequest::AlgorithmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  configures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.AlgorithmRequest)
}
AlgorithmRequest::AlgorithmRequest(const AlgorithmRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      configures_(from.configures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.AlgorithmRequest)
}

void AlgorithmRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlgorithmRequest_Algorithm_2eproto.base);
}

AlgorithmRequest::~AlgorithmRequest() {
  // @@protoc_insertion_point(destructor:msg.AlgorithmRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlgorithmRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AlgorithmRequest::ArenaDtor(void* object) {
  AlgorithmRequest* _this = reinterpret_cast< AlgorithmRequest* >(object);
  (void)_this;
}
void AlgorithmRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlgorithmRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgorithmRequest& AlgorithmRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlgorithmRequest_Algorithm_2eproto.base);
  return *internal_default_instance();
}


void AlgorithmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AlgorithmRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configures_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.Configure configures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlgorithmRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AlgorithmRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.Configure configures = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_configures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AlgorithmRequest)
  return target;
}

size_t AlgorithmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AlgorithmRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Configure configures = 1;
  total_size += 1UL * this->_internal_configures_size();
  for (const auto& msg : this->configures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.AlgorithmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlgorithmRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.AlgorithmRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.AlgorithmRequest)
    MergeFrom(*source);
  }
}

void AlgorithmRequest::MergeFrom(const AlgorithmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.AlgorithmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configures_.MergeFrom(from.configures_);
}

void AlgorithmRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.AlgorithmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmRequest::CopyFrom(const AlgorithmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AlgorithmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(configures_)) return false;
  return true;
}

void AlgorithmRequest::InternalSwap(AlgorithmRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  configures_.InternalSwap(&other->configures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlgorithmResponse::InitAsDefaultInstance() {
}
class AlgorithmResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AlgorithmResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AlgorithmResponse::AlgorithmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  configures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.AlgorithmResponse)
}
AlgorithmResponse::AlgorithmResponse(const AlgorithmResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      configures_(from.configures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:msg.AlgorithmResponse)
}

void AlgorithmResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlgorithmResponse_Algorithm_2eproto.base);
  result_ = 0;
}

AlgorithmResponse::~AlgorithmResponse() {
  // @@protoc_insertion_point(destructor:msg.AlgorithmResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlgorithmResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AlgorithmResponse::ArenaDtor(void* object) {
  AlgorithmResponse* _this = reinterpret_cast< AlgorithmResponse* >(object);
  (void)_this;
}
void AlgorithmResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlgorithmResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgorithmResponse& AlgorithmResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlgorithmResponse_Algorithm_2eproto.base);
  return *internal_default_instance();
}


void AlgorithmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AlgorithmResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configures_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.Configure configures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlgorithmResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AlgorithmResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated .msg.Configure configures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_configures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AlgorithmResponse)
  return target;
}

size_t AlgorithmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AlgorithmResponse)
  size_t total_size = 0;

  // required int32 result = 1;
  if (_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Configure configures = 2;
  total_size += 1UL * this->_internal_configures_size();
  for (const auto& msg : this->configures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.AlgorithmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlgorithmResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.AlgorithmResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.AlgorithmResponse)
    MergeFrom(*source);
  }
}

void AlgorithmResponse::MergeFrom(const AlgorithmResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.AlgorithmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configures_.MergeFrom(from.configures_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void AlgorithmResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.AlgorithmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmResponse::CopyFrom(const AlgorithmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AlgorithmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(configures_)) return false;
  return true;
}

void AlgorithmResponse::InternalSwap(AlgorithmResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  configures_.InternalSwap(&other->configures_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Algorithm::InitAsDefaultInstance() {
  ::msg::_Algorithm_default_instance_._instance.get_mutable()->algorithmrequest_ = const_cast< ::msg::AlgorithmRequest*>(
      ::msg::AlgorithmRequest::internal_default_instance());
  ::msg::_Algorithm_default_instance_._instance.get_mutable()->algorithmresponse_ = const_cast< ::msg::AlgorithmResponse*>(
      ::msg::AlgorithmResponse::internal_default_instance());
}
class Algorithm::_Internal {
 public:
  using HasBits = decltype(std::declval<Algorithm>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::msg::AlgorithmRequest& algorithmrequest(const Algorithm* msg);
  static void set_has_algorithmrequest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msg::AlgorithmResponse& algorithmresponse(const Algorithm* msg);
  static void set_has_algorithmresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::msg::AlgorithmRequest&
Algorithm::_Internal::algorithmrequest(const Algorithm* msg) {
  return *msg->algorithmrequest_;
}
const ::msg::AlgorithmResponse&
Algorithm::_Internal::algorithmresponse(const Algorithm* msg) {
  return *msg->algorithmresponse_;
}
Algorithm::Algorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.Algorithm)
}
Algorithm::Algorithm(const Algorithm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_algorithmrequest()) {
    algorithmrequest_ = new ::msg::AlgorithmRequest(*from.algorithmrequest_);
  } else {
    algorithmrequest_ = nullptr;
  }
  if (from._internal_has_algorithmresponse()) {
    algorithmresponse_ = new ::msg::AlgorithmResponse(*from.algorithmresponse_);
  } else {
    algorithmresponse_ = nullptr;
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:msg.Algorithm)
}

void Algorithm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Algorithm_Algorithm_2eproto.base);
  ::memset(&algorithmrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithmresponse_) -
      reinterpret_cast<char*>(&algorithmrequest_)) + sizeof(algorithmresponse_));
  command_ = 1;
}

Algorithm::~Algorithm() {
  // @@protoc_insertion_point(destructor:msg.Algorithm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Algorithm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete algorithmrequest_;
  if (this != internal_default_instance()) delete algorithmresponse_;
}

void Algorithm::ArenaDtor(void* object) {
  Algorithm* _this = reinterpret_cast< Algorithm* >(object);
  (void)_this;
}
void Algorithm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Algorithm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Algorithm& Algorithm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Algorithm_Algorithm_2eproto.base);
  return *internal_default_instance();
}


void Algorithm::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Algorithm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(algorithmrequest_ != nullptr);
      algorithmrequest_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(algorithmresponse_ != nullptr);
      algorithmresponse_->Clear();
    }
    command_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Algorithm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.Algorithm.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::Algorithm_Command_IsValid(val))) {
            _internal_set_command(static_cast<::msg::Algorithm_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .msg.AlgorithmRequest algorithmrequest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithmrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.AlgorithmResponse algorithmresponse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithmresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Algorithm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Algorithm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.Algorithm.Command command = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // optional .msg.AlgorithmRequest algorithmrequest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::algorithmrequest(this), target, stream);
  }

  // optional .msg.AlgorithmResponse algorithmresponse = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::algorithmresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Algorithm)
  return target;
}

size_t Algorithm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Algorithm)
  size_t total_size = 0;

  // required .msg.Algorithm.Command command = 1;
  if (_internal_has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .msg.AlgorithmRequest algorithmrequest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *algorithmrequest_);
    }

    // optional .msg.AlgorithmResponse algorithmresponse = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *algorithmresponse_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Algorithm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.Algorithm)
  GOOGLE_DCHECK_NE(&from, this);
  const Algorithm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Algorithm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.Algorithm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.Algorithm)
    MergeFrom(*source);
  }
}

void Algorithm::MergeFrom(const Algorithm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.Algorithm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_algorithmrequest()->::msg::AlgorithmRequest::MergeFrom(from._internal_algorithmrequest());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_algorithmresponse()->::msg::AlgorithmResponse::MergeFrom(from._internal_algorithmresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      command_ = from.command_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Algorithm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.Algorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Algorithm::CopyFrom(const Algorithm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Algorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Algorithm::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_algorithmrequest()) {
    if (!algorithmrequest_->IsInitialized()) return false;
  }
  if (_internal_has_algorithmresponse()) {
    if (!algorithmresponse_->IsInitialized()) return false;
  }
  return true;
}

void Algorithm::InternalSwap(Algorithm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Algorithm, algorithmresponse_)
      + sizeof(Algorithm::algorithmresponse_)
      - PROTOBUF_FIELD_OFFSET(Algorithm, algorithmrequest_)>(
          reinterpret_cast<char*>(&algorithmrequest_),
          reinterpret_cast<char*>(&other->algorithmrequest_));
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Algorithm::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::Configure* Arena::CreateMaybeMessage< ::msg::Configure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Configure >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::AlgorithmRequest* Arena::CreateMaybeMessage< ::msg::AlgorithmRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::AlgorithmRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::AlgorithmResponse* Arena::CreateMaybeMessage< ::msg::AlgorithmResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::AlgorithmResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Algorithm* Arena::CreateMaybeMessage< ::msg::Algorithm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Algorithm >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
