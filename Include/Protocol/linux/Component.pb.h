// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Component.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Component_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Component_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Component_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Component_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Component_2eproto;
namespace msg {
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class ComponentInfo;
class ComponentInfoDefaultTypeInternal;
extern ComponentInfoDefaultTypeInternal _ComponentInfo_default_instance_;
class ComponentRequest;
class ComponentRequestDefaultTypeInternal;
extern ComponentRequestDefaultTypeInternal _ComponentRequest_default_instance_;
class ComponentResponse;
class ComponentResponseDefaultTypeInternal;
extern ComponentResponseDefaultTypeInternal _ComponentResponse_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Component* Arena::CreateMaybeMessage<::msg::Component>(Arena*);
template<> ::msg::ComponentInfo* Arena::CreateMaybeMessage<::msg::ComponentInfo>(Arena*);
template<> ::msg::ComponentRequest* Arena::CreateMaybeMessage<::msg::ComponentRequest>(Arena*);
template<> ::msg::ComponentResponse* Arena::CreateMaybeMessage<::msg::ComponentResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum ComponentInfo_Type : int {
  ComponentInfo_Type_XMQ = 1,
  ComponentInfo_Type_WEB = 2,
  ComponentInfo_Type_HKD = 3,
  ComponentInfo_Type_DHD = 4,
  ComponentInfo_Type_ALM = 5,
  ComponentInfo_Type_AI = 6
};
bool ComponentInfo_Type_IsValid(int value);
constexpr ComponentInfo_Type ComponentInfo_Type_Type_MIN = ComponentInfo_Type_XMQ;
constexpr ComponentInfo_Type ComponentInfo_Type_Type_MAX = ComponentInfo_Type_AI;
constexpr int ComponentInfo_Type_Type_ARRAYSIZE = ComponentInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentInfo_Type_descriptor();
template<typename T>
inline const std::string& ComponentInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentInfo_Type_descriptor(), enum_t_value);
}
inline bool ComponentInfo_Type_Parse(
    const std::string& name, ComponentInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentInfo_Type>(
    ComponentInfo_Type_descriptor(), name, value);
}
enum Component_Command : int {
  Component_Command_SIGNIN_REQ = 1,
  Component_Command_SIGNIN_REP = 2,
  Component_Command_SIGNOUT_REQ = 3,
  Component_Command_SIGNOUT_REP = 4,
  Component_Command_QUERY_REQ = 5,
  Component_Command_QUERY_REP = 6
};
bool Component_Command_IsValid(int value);
constexpr Component_Command Component_Command_Command_MIN = Component_Command_SIGNIN_REQ;
constexpr Component_Command Component_Command_Command_MAX = Component_Command_QUERY_REP;
constexpr int Component_Command_Command_ARRAYSIZE = Component_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_Command_descriptor();
template<typename T>
inline const std::string& Component_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Component_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Component_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Component_Command_descriptor(), enum_t_value);
}
inline bool Component_Command_Parse(
    const std::string& name, Component_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Component_Command>(
    Component_Command_descriptor(), name, value);
}
// ===================================================================

class ComponentInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ComponentInfo) */ {
 public:
  inline ComponentInfo() : ComponentInfo(nullptr) {};
  virtual ~ComponentInfo();

  ComponentInfo(const ComponentInfo& from);
  ComponentInfo(ComponentInfo&& from) noexcept
    : ComponentInfo() {
    *this = ::std::move(from);
  }

  inline ComponentInfo& operator=(const ComponentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentInfo& operator=(ComponentInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentInfo* internal_default_instance() {
    return reinterpret_cast<const ComponentInfo*>(
               &_ComponentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComponentInfo& a, ComponentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentInfo* New() const final {
    return CreateMaybeMessage<ComponentInfo>(nullptr);
  }

  ComponentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentInfo& from);
  void MergeFrom(const ComponentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ComponentInfo";
  }
  protected:
  explicit ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Component_2eproto);
    return ::descriptor_table_Component_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ComponentInfo_Type Type;
  static constexpr Type XMQ =
    ComponentInfo_Type_XMQ;
  static constexpr Type WEB =
    ComponentInfo_Type_WEB;
  static constexpr Type HKD =
    ComponentInfo_Type_HKD;
  static constexpr Type DHD =
    ComponentInfo_Type_DHD;
  static constexpr Type ALM =
    ComponentInfo_Type_ALM;
  static constexpr Type AI =
    ComponentInfo_Type_AI;
  static inline bool Type_IsValid(int value) {
    return ComponentInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ComponentInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ComponentInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ComponentInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ComponentInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ComponentInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return ComponentInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 2,
    kCnameFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional string cid = 2;
  bool has_cid() const;
  private:
  bool _internal_has_cid() const;
  public:
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // optional string cname = 3;
  bool has_cname() const;
  private:
  bool _internal_has_cname() const;
  public:
  void clear_cname();
  const std::string& cname() const;
  void set_cname(const std::string& value);
  void set_cname(std::string&& value);
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  std::string* mutable_cname();
  std::string* release_cname();
  void set_allocated_cname(std::string* cname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cname(
      std::string* cname);
  private:
  const std::string& _internal_cname() const;
  void _internal_set_cname(const std::string& value);
  std::string* _internal_mutable_cname();
  public:

  // required .msg.ComponentInfo.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::ComponentInfo_Type type() const;
  void set_type(::msg::ComponentInfo_Type value);
  private:
  ::msg::ComponentInfo_Type _internal_type() const;
  void _internal_set_type(::msg::ComponentInfo_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ComponentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
  int type_;
  friend struct ::TableStruct_Component_2eproto;
};
// -------------------------------------------------------------------

class ComponentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ComponentRequest) */ {
 public:
  inline ComponentRequest() : ComponentRequest(nullptr) {};
  virtual ~ComponentRequest();

  ComponentRequest(const ComponentRequest& from);
  ComponentRequest(ComponentRequest&& from) noexcept
    : ComponentRequest() {
    *this = ::std::move(from);
  }

  inline ComponentRequest& operator=(const ComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentRequest& operator=(ComponentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentRequest* internal_default_instance() {
    return reinterpret_cast<const ComponentRequest*>(
               &_ComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComponentRequest& a, ComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentRequest* New() const final {
    return CreateMaybeMessage<ComponentRequest>(nullptr);
  }

  ComponentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentRequest& from);
  void MergeFrom(const ComponentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ComponentRequest";
  }
  protected:
  explicit ComponentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Component_2eproto);
    return ::descriptor_table_Component_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentinfoFieldNumber = 1,
  };
  // required .msg.ComponentInfo componentinfo = 1;
  bool has_componentinfo() const;
  private:
  bool _internal_has_componentinfo() const;
  public:
  void clear_componentinfo();
  const ::msg::ComponentInfo& componentinfo() const;
  ::msg::ComponentInfo* release_componentinfo();
  ::msg::ComponentInfo* mutable_componentinfo();
  void set_allocated_componentinfo(::msg::ComponentInfo* componentinfo);
  private:
  const ::msg::ComponentInfo& _internal_componentinfo() const;
  ::msg::ComponentInfo* _internal_mutable_componentinfo();
  public:
  void unsafe_arena_set_allocated_componentinfo(
      ::msg::ComponentInfo* componentinfo);
  ::msg::ComponentInfo* unsafe_arena_release_componentinfo();

  // @@protoc_insertion_point(class_scope:msg.ComponentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::ComponentInfo* componentinfo_;
  friend struct ::TableStruct_Component_2eproto;
};
// -------------------------------------------------------------------

class ComponentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ComponentResponse) */ {
 public:
  inline ComponentResponse() : ComponentResponse(nullptr) {};
  virtual ~ComponentResponse();

  ComponentResponse(const ComponentResponse& from);
  ComponentResponse(ComponentResponse&& from) noexcept
    : ComponentResponse() {
    *this = ::std::move(from);
  }

  inline ComponentResponse& operator=(const ComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentResponse& operator=(ComponentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentResponse* internal_default_instance() {
    return reinterpret_cast<const ComponentResponse*>(
               &_ComponentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ComponentResponse& a, ComponentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentResponse* New() const final {
    return CreateMaybeMessage<ComponentResponse>(nullptr);
  }

  ComponentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentResponse& from);
  void MergeFrom(const ComponentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ComponentResponse";
  }
  protected:
  explicit ComponentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Component_2eproto);
    return ::descriptor_table_Component_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentinfosFieldNumber = 3,
    kCidFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .msg.ComponentInfo componentinfos = 3;
  int componentinfos_size() const;
  private:
  int _internal_componentinfos_size() const;
  public:
  void clear_componentinfos();
  ::msg::ComponentInfo* mutable_componentinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ComponentInfo >*
      mutable_componentinfos();
  private:
  const ::msg::ComponentInfo& _internal_componentinfos(int index) const;
  ::msg::ComponentInfo* _internal_add_componentinfos();
  public:
  const ::msg::ComponentInfo& componentinfos(int index) const;
  ::msg::ComponentInfo* add_componentinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ComponentInfo >&
      componentinfos() const;

  // optional string cid = 2;
  bool has_cid() const;
  private:
  bool _internal_has_cid() const;
  public:
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // required int32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ComponentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ComponentInfo > componentinfos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_Component_2eproto;
};
// -------------------------------------------------------------------

class Component PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Component) */ {
 public:
  inline Component() : Component(nullptr) {};
  virtual ~Component();

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component* New() const final {
    return CreateMaybeMessage<Component>(nullptr);
  }

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Component";
  }
  protected:
  explicit Component(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Component_2eproto);
    return ::descriptor_table_Component_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Component_Command Command;
  static constexpr Command SIGNIN_REQ =
    Component_Command_SIGNIN_REQ;
  static constexpr Command SIGNIN_REP =
    Component_Command_SIGNIN_REP;
  static constexpr Command SIGNOUT_REQ =
    Component_Command_SIGNOUT_REQ;
  static constexpr Command SIGNOUT_REP =
    Component_Command_SIGNOUT_REP;
  static constexpr Command QUERY_REQ =
    Component_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    Component_Command_QUERY_REP;
  static inline bool Command_IsValid(int value) {
    return Component_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Component_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Component_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Component_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Component_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Component_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(const std::string& name,
      Command* value) {
    return Component_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComponentrequestFieldNumber = 2,
    kComponentresponseFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // optional .msg.ComponentRequest componentrequest = 2;
  bool has_componentrequest() const;
  private:
  bool _internal_has_componentrequest() const;
  public:
  void clear_componentrequest();
  const ::msg::ComponentRequest& componentrequest() const;
  ::msg::ComponentRequest* release_componentrequest();
  ::msg::ComponentRequest* mutable_componentrequest();
  void set_allocated_componentrequest(::msg::ComponentRequest* componentrequest);
  private:
  const ::msg::ComponentRequest& _internal_componentrequest() const;
  ::msg::ComponentRequest* _internal_mutable_componentrequest();
  public:
  void unsafe_arena_set_allocated_componentrequest(
      ::msg::ComponentRequest* componentrequest);
  ::msg::ComponentRequest* unsafe_arena_release_componentrequest();

  // optional .msg.ComponentResponse componentresponse = 3;
  bool has_componentresponse() const;
  private:
  bool _internal_has_componentresponse() const;
  public:
  void clear_componentresponse();
  const ::msg::ComponentResponse& componentresponse() const;
  ::msg::ComponentResponse* release_componentresponse();
  ::msg::ComponentResponse* mutable_componentresponse();
  void set_allocated_componentresponse(::msg::ComponentResponse* componentresponse);
  private:
  const ::msg::ComponentResponse& _internal_componentresponse() const;
  ::msg::ComponentResponse* _internal_mutable_componentresponse();
  public:
  void unsafe_arena_set_allocated_componentresponse(
      ::msg::ComponentResponse* componentresponse);
  ::msg::ComponentResponse* unsafe_arena_release_componentresponse();

  // required .msg.Component.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::Component_Command command() const;
  void set_command(::msg::Component_Command value);
  private:
  ::msg::Component_Command _internal_command() const;
  void _internal_set_command(::msg::Component_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Component)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::ComponentRequest* componentrequest_;
  ::msg::ComponentResponse* componentresponse_;
  int command_;
  friend struct ::TableStruct_Component_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComponentInfo

// required .msg.ComponentInfo.Type type = 1;
inline bool ComponentInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentInfo::has_type() const {
  return _internal_has_type();
}
inline void ComponentInfo::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::ComponentInfo_Type ComponentInfo::_internal_type() const {
  return static_cast< ::msg::ComponentInfo_Type >(type_);
}
inline ::msg::ComponentInfo_Type ComponentInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.ComponentInfo.type)
  return _internal_type();
}
inline void ComponentInfo::_internal_set_type(::msg::ComponentInfo_Type value) {
  assert(::msg::ComponentInfo_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ComponentInfo::set_type(::msg::ComponentInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.ComponentInfo.type)
}

// optional string cid = 2;
inline bool ComponentInfo::_internal_has_cid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentInfo::has_cid() const {
  return _internal_has_cid();
}
inline void ComponentInfo::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentInfo::cid() const {
  // @@protoc_insertion_point(field_get:msg.ComponentInfo.cid)
  return _internal_cid();
}
inline void ComponentInfo::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:msg.ComponentInfo.cid)
}
inline std::string* ComponentInfo::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:msg.ComponentInfo.cid)
  return _internal_mutable_cid();
}
inline const std::string& ComponentInfo::_internal_cid() const {
  return cid_.Get();
}
inline void ComponentInfo::_internal_set_cid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ComponentInfo::set_cid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ComponentInfo.cid)
}
inline void ComponentInfo::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ComponentInfo.cid)
}
inline void ComponentInfo::set_cid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ComponentInfo.cid)
}
inline std::string* ComponentInfo::_internal_mutable_cid() {
  _has_bits_[0] |= 0x00000001u;
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ComponentInfo::release_cid() {
  // @@protoc_insertion_point(field_release:msg.ComponentInfo.cid)
  if (!_internal_has_cid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComponentInfo::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ComponentInfo.cid)
}
inline std::string* ComponentInfo::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ComponentInfo.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ComponentInfo::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ComponentInfo.cid)
}

// optional string cname = 3;
inline bool ComponentInfo::_internal_has_cname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentInfo::has_cname() const {
  return _internal_has_cname();
}
inline void ComponentInfo::clear_cname() {
  cname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComponentInfo::cname() const {
  // @@protoc_insertion_point(field_get:msg.ComponentInfo.cname)
  return _internal_cname();
}
inline void ComponentInfo::set_cname(const std::string& value) {
  _internal_set_cname(value);
  // @@protoc_insertion_point(field_set:msg.ComponentInfo.cname)
}
inline std::string* ComponentInfo::mutable_cname() {
  // @@protoc_insertion_point(field_mutable:msg.ComponentInfo.cname)
  return _internal_mutable_cname();
}
inline const std::string& ComponentInfo::_internal_cname() const {
  return cname_.Get();
}
inline void ComponentInfo::_internal_set_cname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ComponentInfo::set_cname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ComponentInfo.cname)
}
inline void ComponentInfo::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ComponentInfo.cname)
}
inline void ComponentInfo::set_cname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ComponentInfo.cname)
}
inline std::string* ComponentInfo::_internal_mutable_cname() {
  _has_bits_[0] |= 0x00000002u;
  return cname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ComponentInfo::release_cname() {
  // @@protoc_insertion_point(field_release:msg.ComponentInfo.cname)
  if (!_internal_has_cname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComponentInfo::set_allocated_cname(std::string* cname) {
  if (cname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ComponentInfo.cname)
}
inline std::string* ComponentInfo::unsafe_arena_release_cname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ComponentInfo.cname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return cname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ComponentInfo::unsafe_arena_set_allocated_cname(
    std::string* cname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ComponentInfo.cname)
}

// -------------------------------------------------------------------

// ComponentRequest

// required .msg.ComponentInfo componentinfo = 1;
inline bool ComponentRequest::_internal_has_componentinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || componentinfo_ != nullptr);
  return value;
}
inline bool ComponentRequest::has_componentinfo() const {
  return _internal_has_componentinfo();
}
inline void ComponentRequest::clear_componentinfo() {
  if (componentinfo_ != nullptr) componentinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::ComponentInfo& ComponentRequest::_internal_componentinfo() const {
  const ::msg::ComponentInfo* p = componentinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::ComponentInfo*>(
      &::msg::_ComponentInfo_default_instance_);
}
inline const ::msg::ComponentInfo& ComponentRequest::componentinfo() const {
  // @@protoc_insertion_point(field_get:msg.ComponentRequest.componentinfo)
  return _internal_componentinfo();
}
inline void ComponentRequest::unsafe_arena_set_allocated_componentinfo(
    ::msg::ComponentInfo* componentinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(componentinfo_);
  }
  componentinfo_ = componentinfo;
  if (componentinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ComponentRequest.componentinfo)
}
inline ::msg::ComponentInfo* ComponentRequest::release_componentinfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::ComponentInfo* temp = componentinfo_;
  componentinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ComponentInfo* ComponentRequest::unsafe_arena_release_componentinfo() {
  // @@protoc_insertion_point(field_release:msg.ComponentRequest.componentinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::ComponentInfo* temp = componentinfo_;
  componentinfo_ = nullptr;
  return temp;
}
inline ::msg::ComponentInfo* ComponentRequest::_internal_mutable_componentinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (componentinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ComponentInfo>(GetArena());
    componentinfo_ = p;
  }
  return componentinfo_;
}
inline ::msg::ComponentInfo* ComponentRequest::mutable_componentinfo() {
  // @@protoc_insertion_point(field_mutable:msg.ComponentRequest.componentinfo)
  return _internal_mutable_componentinfo();
}
inline void ComponentRequest::set_allocated_componentinfo(::msg::ComponentInfo* componentinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete componentinfo_;
  }
  if (componentinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(componentinfo);
    if (message_arena != submessage_arena) {
      componentinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, componentinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  componentinfo_ = componentinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.ComponentRequest.componentinfo)
}

// -------------------------------------------------------------------

// ComponentResponse

// required int32 result = 1;
inline bool ComponentResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentResponse::has_result() const {
  return _internal_has_result();
}
inline void ComponentResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComponentResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComponentResponse::result() const {
  // @@protoc_insertion_point(field_get:msg.ComponentResponse.result)
  return _internal_result();
}
inline void ComponentResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void ComponentResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:msg.ComponentResponse.result)
}

// optional string cid = 2;
inline bool ComponentResponse::_internal_has_cid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentResponse::has_cid() const {
  return _internal_has_cid();
}
inline void ComponentResponse::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentResponse::cid() const {
  // @@protoc_insertion_point(field_get:msg.ComponentResponse.cid)
  return _internal_cid();
}
inline void ComponentResponse::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:msg.ComponentResponse.cid)
}
inline std::string* ComponentResponse::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:msg.ComponentResponse.cid)
  return _internal_mutable_cid();
}
inline const std::string& ComponentResponse::_internal_cid() const {
  return cid_.Get();
}
inline void ComponentResponse::_internal_set_cid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ComponentResponse::set_cid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ComponentResponse.cid)
}
inline void ComponentResponse::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ComponentResponse.cid)
}
inline void ComponentResponse::set_cid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ComponentResponse.cid)
}
inline std::string* ComponentResponse::_internal_mutable_cid() {
  _has_bits_[0] |= 0x00000001u;
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ComponentResponse::release_cid() {
  // @@protoc_insertion_point(field_release:msg.ComponentResponse.cid)
  if (!_internal_has_cid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComponentResponse::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ComponentResponse.cid)
}
inline std::string* ComponentResponse::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ComponentResponse.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ComponentResponse::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ComponentResponse.cid)
}

// repeated .msg.ComponentInfo componentinfos = 3;
inline int ComponentResponse::_internal_componentinfos_size() const {
  return componentinfos_.size();
}
inline int ComponentResponse::componentinfos_size() const {
  return _internal_componentinfos_size();
}
inline void ComponentResponse::clear_componentinfos() {
  componentinfos_.Clear();
}
inline ::msg::ComponentInfo* ComponentResponse::mutable_componentinfos(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ComponentResponse.componentinfos)
  return componentinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ComponentInfo >*
ComponentResponse::mutable_componentinfos() {
  // @@protoc_insertion_point(field_mutable_list:msg.ComponentResponse.componentinfos)
  return &componentinfos_;
}
inline const ::msg::ComponentInfo& ComponentResponse::_internal_componentinfos(int index) const {
  return componentinfos_.Get(index);
}
inline const ::msg::ComponentInfo& ComponentResponse::componentinfos(int index) const {
  // @@protoc_insertion_point(field_get:msg.ComponentResponse.componentinfos)
  return _internal_componentinfos(index);
}
inline ::msg::ComponentInfo* ComponentResponse::_internal_add_componentinfos() {
  return componentinfos_.Add();
}
inline ::msg::ComponentInfo* ComponentResponse::add_componentinfos() {
  // @@protoc_insertion_point(field_add:msg.ComponentResponse.componentinfos)
  return _internal_add_componentinfos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ComponentInfo >&
ComponentResponse::componentinfos() const {
  // @@protoc_insertion_point(field_list:msg.ComponentResponse.componentinfos)
  return componentinfos_;
}

// -------------------------------------------------------------------

// Component

// required .msg.Component.Command command = 1;
inline bool Component::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Component::has_command() const {
  return _internal_has_command();
}
inline void Component::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::Component_Command Component::_internal_command() const {
  return static_cast< ::msg::Component_Command >(command_);
}
inline ::msg::Component_Command Component::command() const {
  // @@protoc_insertion_point(field_get:msg.Component.command)
  return _internal_command();
}
inline void Component::_internal_set_command(::msg::Component_Command value) {
  assert(::msg::Component_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void Component::set_command(::msg::Component_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.Component.command)
}

// optional .msg.ComponentRequest componentrequest = 2;
inline bool Component::_internal_has_componentrequest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || componentrequest_ != nullptr);
  return value;
}
inline bool Component::has_componentrequest() const {
  return _internal_has_componentrequest();
}
inline void Component::clear_componentrequest() {
  if (componentrequest_ != nullptr) componentrequest_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::ComponentRequest& Component::_internal_componentrequest() const {
  const ::msg::ComponentRequest* p = componentrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::ComponentRequest*>(
      &::msg::_ComponentRequest_default_instance_);
}
inline const ::msg::ComponentRequest& Component::componentrequest() const {
  // @@protoc_insertion_point(field_get:msg.Component.componentrequest)
  return _internal_componentrequest();
}
inline void Component::unsafe_arena_set_allocated_componentrequest(
    ::msg::ComponentRequest* componentrequest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(componentrequest_);
  }
  componentrequest_ = componentrequest;
  if (componentrequest) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Component.componentrequest)
}
inline ::msg::ComponentRequest* Component::release_componentrequest() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::ComponentRequest* temp = componentrequest_;
  componentrequest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ComponentRequest* Component::unsafe_arena_release_componentrequest() {
  // @@protoc_insertion_point(field_release:msg.Component.componentrequest)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::ComponentRequest* temp = componentrequest_;
  componentrequest_ = nullptr;
  return temp;
}
inline ::msg::ComponentRequest* Component::_internal_mutable_componentrequest() {
  _has_bits_[0] |= 0x00000001u;
  if (componentrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ComponentRequest>(GetArena());
    componentrequest_ = p;
  }
  return componentrequest_;
}
inline ::msg::ComponentRequest* Component::mutable_componentrequest() {
  // @@protoc_insertion_point(field_mutable:msg.Component.componentrequest)
  return _internal_mutable_componentrequest();
}
inline void Component::set_allocated_componentrequest(::msg::ComponentRequest* componentrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete componentrequest_;
  }
  if (componentrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(componentrequest);
    if (message_arena != submessage_arena) {
      componentrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, componentrequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  componentrequest_ = componentrequest;
  // @@protoc_insertion_point(field_set_allocated:msg.Component.componentrequest)
}

// optional .msg.ComponentResponse componentresponse = 3;
inline bool Component::_internal_has_componentresponse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || componentresponse_ != nullptr);
  return value;
}
inline bool Component::has_componentresponse() const {
  return _internal_has_componentresponse();
}
inline void Component::clear_componentresponse() {
  if (componentresponse_ != nullptr) componentresponse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::ComponentResponse& Component::_internal_componentresponse() const {
  const ::msg::ComponentResponse* p = componentresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::ComponentResponse*>(
      &::msg::_ComponentResponse_default_instance_);
}
inline const ::msg::ComponentResponse& Component::componentresponse() const {
  // @@protoc_insertion_point(field_get:msg.Component.componentresponse)
  return _internal_componentresponse();
}
inline void Component::unsafe_arena_set_allocated_componentresponse(
    ::msg::ComponentResponse* componentresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(componentresponse_);
  }
  componentresponse_ = componentresponse;
  if (componentresponse) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Component.componentresponse)
}
inline ::msg::ComponentResponse* Component::release_componentresponse() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::ComponentResponse* temp = componentresponse_;
  componentresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ComponentResponse* Component::unsafe_arena_release_componentresponse() {
  // @@protoc_insertion_point(field_release:msg.Component.componentresponse)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::ComponentResponse* temp = componentresponse_;
  componentresponse_ = nullptr;
  return temp;
}
inline ::msg::ComponentResponse* Component::_internal_mutable_componentresponse() {
  _has_bits_[0] |= 0x00000002u;
  if (componentresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ComponentResponse>(GetArena());
    componentresponse_ = p;
  }
  return componentresponse_;
}
inline ::msg::ComponentResponse* Component::mutable_componentresponse() {
  // @@protoc_insertion_point(field_mutable:msg.Component.componentresponse)
  return _internal_mutable_componentresponse();
}
inline void Component::set_allocated_componentresponse(::msg::ComponentResponse* componentresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete componentresponse_;
  }
  if (componentresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(componentresponse);
    if (message_arena != submessage_arena) {
      componentresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, componentresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  componentresponse_ = componentresponse;
  // @@protoc_insertion_point(field_set_allocated:msg.Component.componentresponse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::ComponentInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ComponentInfo_Type>() {
  return ::msg::ComponentInfo_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::Component_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Component_Command>() {
  return ::msg::Component_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Component_2eproto
