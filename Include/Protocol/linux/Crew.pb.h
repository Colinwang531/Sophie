// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Crew.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Crew_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Crew_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Crew_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Crew_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Crew_2eproto;
namespace msg {
class Crew;
class CrewDefaultTypeInternal;
extern CrewDefaultTypeInternal _Crew_default_instance_;
class CrewInfo;
class CrewInfoDefaultTypeInternal;
extern CrewInfoDefaultTypeInternal _CrewInfo_default_instance_;
class CrewRequest;
class CrewRequestDefaultTypeInternal;
extern CrewRequestDefaultTypeInternal _CrewRequest_default_instance_;
class CrewResponse;
class CrewResponseDefaultTypeInternal;
extern CrewResponseDefaultTypeInternal _CrewResponse_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Crew* Arena::CreateMaybeMessage<::msg::Crew>(Arena*);
template<> ::msg::CrewInfo* Arena::CreateMaybeMessage<::msg::CrewInfo>(Arena*);
template<> ::msg::CrewRequest* Arena::CreateMaybeMessage<::msg::CrewRequest>(Arena*);
template<> ::msg::CrewResponse* Arena::CreateMaybeMessage<::msg::CrewResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum Crew_Command : int {
  Crew_Command_NEW_REQ = 1,
  Crew_Command_NEW_REP = 2,
  Crew_Command_DELETE_REQ = 3,
  Crew_Command_DELETE_REP = 4,
  Crew_Command_MODIFY_REQ = 5,
  Crew_Command_MODIFY_REP = 6,
  Crew_Command_QUERY_REQ = 7,
  Crew_Command_QUERY_REP = 8
};
bool Crew_Command_IsValid(int value);
constexpr Crew_Command Crew_Command_Command_MIN = Crew_Command_NEW_REQ;
constexpr Crew_Command Crew_Command_Command_MAX = Crew_Command_QUERY_REP;
constexpr int Crew_Command_Command_ARRAYSIZE = Crew_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Crew_Command_descriptor();
template<typename T>
inline const std::string& Crew_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Crew_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Crew_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Crew_Command_descriptor(), enum_t_value);
}
inline bool Crew_Command_Parse(
    const std::string& name, Crew_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Crew_Command>(
    Crew_Command_descriptor(), name, value);
}
// ===================================================================

class CrewInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CrewInfo) */ {
 public:
  inline CrewInfo() : CrewInfo(nullptr) {};
  virtual ~CrewInfo();

  CrewInfo(const CrewInfo& from);
  CrewInfo(CrewInfo&& from) noexcept
    : CrewInfo() {
    *this = ::std::move(from);
  }

  inline CrewInfo& operator=(const CrewInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewInfo& operator=(CrewInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrewInfo* internal_default_instance() {
    return reinterpret_cast<const CrewInfo*>(
               &_CrewInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CrewInfo& a, CrewInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewInfo* New() const final {
    return CreateMaybeMessage<CrewInfo>(nullptr);
  }

  CrewInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewInfo& from);
  void MergeFrom(const CrewInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CrewInfo";
  }
  protected:
  explicit CrewInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Crew_2eproto);
    return ::descriptor_table_Crew_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicturesFieldNumber = 4,
    kUidFieldNumber = 1,
    kNameFieldNumber = 2,
    kJobFieldNumber = 3,
  };
  // repeated string pictures = 4;
  int pictures_size() const;
  private:
  int _internal_pictures_size() const;
  public:
  void clear_pictures();
  const std::string& pictures(int index) const;
  std::string* mutable_pictures(int index);
  void set_pictures(int index, const std::string& value);
  void set_pictures(int index, std::string&& value);
  void set_pictures(int index, const char* value);
  void set_pictures(int index, const char* value, size_t size);
  std::string* add_pictures();
  void add_pictures(const std::string& value);
  void add_pictures(std::string&& value);
  void add_pictures(const char* value);
  void add_pictures(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pictures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pictures();
  private:
  const std::string& _internal_pictures(int index) const;
  std::string* _internal_add_pictures();
  public:

  // required string uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string job = 3;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const std::string& job() const;
  void set_job(const std::string& value);
  void set_job(std::string&& value);
  void set_job(const char* value);
  void set_job(const char* value, size_t size);
  std::string* mutable_job();
  std::string* release_job();
  void set_allocated_job(std::string* job);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_job();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_job(
      std::string* job);
  private:
  const std::string& _internal_job() const;
  void _internal_set_job(const std::string& value);
  std::string* _internal_mutable_job();
  public:

  // @@protoc_insertion_point(class_scope:msg.CrewInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pictures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_;
  friend struct ::TableStruct_Crew_2eproto;
};
// -------------------------------------------------------------------

class CrewRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CrewRequest) */ {
 public:
  inline CrewRequest() : CrewRequest(nullptr) {};
  virtual ~CrewRequest();

  CrewRequest(const CrewRequest& from);
  CrewRequest(CrewRequest&& from) noexcept
    : CrewRequest() {
    *this = ::std::move(from);
  }

  inline CrewRequest& operator=(const CrewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewRequest& operator=(CrewRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrewRequest* internal_default_instance() {
    return reinterpret_cast<const CrewRequest*>(
               &_CrewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CrewRequest& a, CrewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewRequest* New() const final {
    return CreateMaybeMessage<CrewRequest>(nullptr);
  }

  CrewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewRequest& from);
  void MergeFrom(const CrewRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CrewRequest";
  }
  protected:
  explicit CrewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Crew_2eproto);
    return ::descriptor_table_Crew_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrewinfoFieldNumber = 1,
  };
  // required .msg.CrewInfo crewinfo = 1;
  bool has_crewinfo() const;
  private:
  bool _internal_has_crewinfo() const;
  public:
  void clear_crewinfo();
  const ::msg::CrewInfo& crewinfo() const;
  ::msg::CrewInfo* release_crewinfo();
  ::msg::CrewInfo* mutable_crewinfo();
  void set_allocated_crewinfo(::msg::CrewInfo* crewinfo);
  private:
  const ::msg::CrewInfo& _internal_crewinfo() const;
  ::msg::CrewInfo* _internal_mutable_crewinfo();
  public:
  void unsafe_arena_set_allocated_crewinfo(
      ::msg::CrewInfo* crewinfo);
  ::msg::CrewInfo* unsafe_arena_release_crewinfo();

  // @@protoc_insertion_point(class_scope:msg.CrewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::CrewInfo* crewinfo_;
  friend struct ::TableStruct_Crew_2eproto;
};
// -------------------------------------------------------------------

class CrewResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CrewResponse) */ {
 public:
  inline CrewResponse() : CrewResponse(nullptr) {};
  virtual ~CrewResponse();

  CrewResponse(const CrewResponse& from);
  CrewResponse(CrewResponse&& from) noexcept
    : CrewResponse() {
    *this = ::std::move(from);
  }

  inline CrewResponse& operator=(const CrewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewResponse& operator=(CrewResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrewResponse* internal_default_instance() {
    return reinterpret_cast<const CrewResponse*>(
               &_CrewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CrewResponse& a, CrewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewResponse* New() const final {
    return CreateMaybeMessage<CrewResponse>(nullptr);
  }

  CrewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewResponse& from);
  void MergeFrom(const CrewResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CrewResponse";
  }
  protected:
  explicit CrewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Crew_2eproto);
    return ::descriptor_table_Crew_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrewinfosFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .msg.CrewInfo crewinfos = 2;
  int crewinfos_size() const;
  private:
  int _internal_crewinfos_size() const;
  public:
  void clear_crewinfos();
  ::msg::CrewInfo* mutable_crewinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CrewInfo >*
      mutable_crewinfos();
  private:
  const ::msg::CrewInfo& _internal_crewinfos(int index) const;
  ::msg::CrewInfo* _internal_add_crewinfos();
  public:
  const ::msg::CrewInfo& crewinfos(int index) const;
  ::msg::CrewInfo* add_crewinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CrewInfo >&
      crewinfos() const;

  // required int32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CrewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CrewInfo > crewinfos_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_Crew_2eproto;
};
// -------------------------------------------------------------------

class Crew PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Crew) */ {
 public:
  inline Crew() : Crew(nullptr) {};
  virtual ~Crew();

  Crew(const Crew& from);
  Crew(Crew&& from) noexcept
    : Crew() {
    *this = ::std::move(from);
  }

  inline Crew& operator=(const Crew& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crew& operator=(Crew&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Crew& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Crew* internal_default_instance() {
    return reinterpret_cast<const Crew*>(
               &_Crew_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Crew& a, Crew& b) {
    a.Swap(&b);
  }
  inline void Swap(Crew* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crew* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Crew* New() const final {
    return CreateMaybeMessage<Crew>(nullptr);
  }

  Crew* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Crew>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Crew& from);
  void MergeFrom(const Crew& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crew* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Crew";
  }
  protected:
  explicit Crew(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Crew_2eproto);
    return ::descriptor_table_Crew_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Crew_Command Command;
  static constexpr Command NEW_REQ =
    Crew_Command_NEW_REQ;
  static constexpr Command NEW_REP =
    Crew_Command_NEW_REP;
  static constexpr Command DELETE_REQ =
    Crew_Command_DELETE_REQ;
  static constexpr Command DELETE_REP =
    Crew_Command_DELETE_REP;
  static constexpr Command MODIFY_REQ =
    Crew_Command_MODIFY_REQ;
  static constexpr Command MODIFY_REP =
    Crew_Command_MODIFY_REP;
  static constexpr Command QUERY_REQ =
    Crew_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    Crew_Command_QUERY_REP;
  static inline bool Command_IsValid(int value) {
    return Crew_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Crew_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Crew_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Crew_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Crew_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Crew_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(const std::string& name,
      Command* value) {
    return Crew_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCrewrequestFieldNumber = 2,
    kCrewresponseFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // optional .msg.CrewRequest crewrequest = 2;
  bool has_crewrequest() const;
  private:
  bool _internal_has_crewrequest() const;
  public:
  void clear_crewrequest();
  const ::msg::CrewRequest& crewrequest() const;
  ::msg::CrewRequest* release_crewrequest();
  ::msg::CrewRequest* mutable_crewrequest();
  void set_allocated_crewrequest(::msg::CrewRequest* crewrequest);
  private:
  const ::msg::CrewRequest& _internal_crewrequest() const;
  ::msg::CrewRequest* _internal_mutable_crewrequest();
  public:
  void unsafe_arena_set_allocated_crewrequest(
      ::msg::CrewRequest* crewrequest);
  ::msg::CrewRequest* unsafe_arena_release_crewrequest();

  // optional .msg.CrewResponse crewresponse = 3;
  bool has_crewresponse() const;
  private:
  bool _internal_has_crewresponse() const;
  public:
  void clear_crewresponse();
  const ::msg::CrewResponse& crewresponse() const;
  ::msg::CrewResponse* release_crewresponse();
  ::msg::CrewResponse* mutable_crewresponse();
  void set_allocated_crewresponse(::msg::CrewResponse* crewresponse);
  private:
  const ::msg::CrewResponse& _internal_crewresponse() const;
  ::msg::CrewResponse* _internal_mutable_crewresponse();
  public:
  void unsafe_arena_set_allocated_crewresponse(
      ::msg::CrewResponse* crewresponse);
  ::msg::CrewResponse* unsafe_arena_release_crewresponse();

  // required .msg.Crew.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::Crew_Command command() const;
  void set_command(::msg::Crew_Command value);
  private:
  ::msg::Crew_Command _internal_command() const;
  void _internal_set_command(::msg::Crew_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Crew)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::CrewRequest* crewrequest_;
  ::msg::CrewResponse* crewresponse_;
  int command_;
  friend struct ::TableStruct_Crew_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CrewInfo

// required string uid = 1;
inline bool CrewInfo::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CrewInfo::has_uid() const {
  return _internal_has_uid();
}
inline void CrewInfo::clear_uid() {
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CrewInfo::uid() const {
  // @@protoc_insertion_point(field_get:msg.CrewInfo.uid)
  return _internal_uid();
}
inline void CrewInfo::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:msg.CrewInfo.uid)
}
inline std::string* CrewInfo::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:msg.CrewInfo.uid)
  return _internal_mutable_uid();
}
inline const std::string& CrewInfo::_internal_uid() const {
  return uid_.Get();
}
inline void CrewInfo::_internal_set_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrewInfo::set_uid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CrewInfo.uid)
}
inline void CrewInfo::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CrewInfo.uid)
}
inline void CrewInfo::set_uid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CrewInfo.uid)
}
inline std::string* CrewInfo::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000001u;
  return uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrewInfo::release_uid() {
  // @@protoc_insertion_point(field_release:msg.CrewInfo.uid)
  if (!_internal_has_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewInfo::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CrewInfo.uid)
}
inline std::string* CrewInfo::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.CrewInfo.uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CrewInfo::unsafe_arena_set_allocated_uid(
    std::string* uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CrewInfo.uid)
}

// optional string name = 2;
inline bool CrewInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CrewInfo::has_name() const {
  return _internal_has_name();
}
inline void CrewInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CrewInfo::name() const {
  // @@protoc_insertion_point(field_get:msg.CrewInfo.name)
  return _internal_name();
}
inline void CrewInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.CrewInfo.name)
}
inline std::string* CrewInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.CrewInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CrewInfo::_internal_name() const {
  return name_.Get();
}
inline void CrewInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrewInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CrewInfo.name)
}
inline void CrewInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CrewInfo.name)
}
inline void CrewInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CrewInfo.name)
}
inline std::string* CrewInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrewInfo::release_name() {
  // @@protoc_insertion_point(field_release:msg.CrewInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CrewInfo.name)
}
inline std::string* CrewInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.CrewInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CrewInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CrewInfo.name)
}

// optional string job = 3;
inline bool CrewInfo::_internal_has_job() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CrewInfo::has_job() const {
  return _internal_has_job();
}
inline void CrewInfo::clear_job() {
  job_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CrewInfo::job() const {
  // @@protoc_insertion_point(field_get:msg.CrewInfo.job)
  return _internal_job();
}
inline void CrewInfo::set_job(const std::string& value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:msg.CrewInfo.job)
}
inline std::string* CrewInfo::mutable_job() {
  // @@protoc_insertion_point(field_mutable:msg.CrewInfo.job)
  return _internal_mutable_job();
}
inline const std::string& CrewInfo::_internal_job() const {
  return job_.Get();
}
inline void CrewInfo::_internal_set_job(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  job_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrewInfo::set_job(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  job_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CrewInfo.job)
}
inline void CrewInfo::set_job(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  job_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CrewInfo.job)
}
inline void CrewInfo::set_job(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  job_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CrewInfo.job)
}
inline std::string* CrewInfo::_internal_mutable_job() {
  _has_bits_[0] |= 0x00000004u;
  return job_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrewInfo::release_job() {
  // @@protoc_insertion_point(field_release:msg.CrewInfo.job)
  if (!_internal_has_job()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return job_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewInfo::set_allocated_job(std::string* job) {
  if (job != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  job_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CrewInfo.job)
}
inline std::string* CrewInfo::unsafe_arena_release_job() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.CrewInfo.job)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return job_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CrewInfo::unsafe_arena_set_allocated_job(
    std::string* job) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (job != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  job_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      job, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CrewInfo.job)
}

// repeated string pictures = 4;
inline int CrewInfo::_internal_pictures_size() const {
  return pictures_.size();
}
inline int CrewInfo::pictures_size() const {
  return _internal_pictures_size();
}
inline void CrewInfo::clear_pictures() {
  pictures_.Clear();
}
inline std::string* CrewInfo::add_pictures() {
  // @@protoc_insertion_point(field_add_mutable:msg.CrewInfo.pictures)
  return _internal_add_pictures();
}
inline const std::string& CrewInfo::_internal_pictures(int index) const {
  return pictures_.Get(index);
}
inline const std::string& CrewInfo::pictures(int index) const {
  // @@protoc_insertion_point(field_get:msg.CrewInfo.pictures)
  return _internal_pictures(index);
}
inline std::string* CrewInfo::mutable_pictures(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CrewInfo.pictures)
  return pictures_.Mutable(index);
}
inline void CrewInfo::set_pictures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:msg.CrewInfo.pictures)
  pictures_.Mutable(index)->assign(value);
}
inline void CrewInfo::set_pictures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:msg.CrewInfo.pictures)
  pictures_.Mutable(index)->assign(std::move(value));
}
inline void CrewInfo::set_pictures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pictures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CrewInfo.pictures)
}
inline void CrewInfo::set_pictures(int index, const char* value, size_t size) {
  pictures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CrewInfo.pictures)
}
inline std::string* CrewInfo::_internal_add_pictures() {
  return pictures_.Add();
}
inline void CrewInfo::add_pictures(const std::string& value) {
  pictures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CrewInfo.pictures)
}
inline void CrewInfo::add_pictures(std::string&& value) {
  pictures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CrewInfo.pictures)
}
inline void CrewInfo::add_pictures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pictures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CrewInfo.pictures)
}
inline void CrewInfo::add_pictures(const char* value, size_t size) {
  pictures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CrewInfo.pictures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CrewInfo::pictures() const {
  // @@protoc_insertion_point(field_list:msg.CrewInfo.pictures)
  return pictures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CrewInfo::mutable_pictures() {
  // @@protoc_insertion_point(field_mutable_list:msg.CrewInfo.pictures)
  return &pictures_;
}

// -------------------------------------------------------------------

// CrewRequest

// required .msg.CrewInfo crewinfo = 1;
inline bool CrewRequest::_internal_has_crewinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || crewinfo_ != nullptr);
  return value;
}
inline bool CrewRequest::has_crewinfo() const {
  return _internal_has_crewinfo();
}
inline void CrewRequest::clear_crewinfo() {
  if (crewinfo_ != nullptr) crewinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::CrewInfo& CrewRequest::_internal_crewinfo() const {
  const ::msg::CrewInfo* p = crewinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::CrewInfo*>(
      &::msg::_CrewInfo_default_instance_);
}
inline const ::msg::CrewInfo& CrewRequest::crewinfo() const {
  // @@protoc_insertion_point(field_get:msg.CrewRequest.crewinfo)
  return _internal_crewinfo();
}
inline void CrewRequest::unsafe_arena_set_allocated_crewinfo(
    ::msg::CrewInfo* crewinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crewinfo_);
  }
  crewinfo_ = crewinfo;
  if (crewinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CrewRequest.crewinfo)
}
inline ::msg::CrewInfo* CrewRequest::release_crewinfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::CrewInfo* temp = crewinfo_;
  crewinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::CrewInfo* CrewRequest::unsafe_arena_release_crewinfo() {
  // @@protoc_insertion_point(field_release:msg.CrewRequest.crewinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::CrewInfo* temp = crewinfo_;
  crewinfo_ = nullptr;
  return temp;
}
inline ::msg::CrewInfo* CrewRequest::_internal_mutable_crewinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (crewinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CrewInfo>(GetArena());
    crewinfo_ = p;
  }
  return crewinfo_;
}
inline ::msg::CrewInfo* CrewRequest::mutable_crewinfo() {
  // @@protoc_insertion_point(field_mutable:msg.CrewRequest.crewinfo)
  return _internal_mutable_crewinfo();
}
inline void CrewRequest::set_allocated_crewinfo(::msg::CrewInfo* crewinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crewinfo_;
  }
  if (crewinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crewinfo);
    if (message_arena != submessage_arena) {
      crewinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crewinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  crewinfo_ = crewinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CrewRequest.crewinfo)
}

// -------------------------------------------------------------------

// CrewResponse

// required int32 result = 1;
inline bool CrewResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CrewResponse::has_result() const {
  return _internal_has_result();
}
inline void CrewResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrewResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrewResponse::result() const {
  // @@protoc_insertion_point(field_get:msg.CrewResponse.result)
  return _internal_result();
}
inline void CrewResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CrewResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:msg.CrewResponse.result)
}

// repeated .msg.CrewInfo crewinfos = 2;
inline int CrewResponse::_internal_crewinfos_size() const {
  return crewinfos_.size();
}
inline int CrewResponse::crewinfos_size() const {
  return _internal_crewinfos_size();
}
inline void CrewResponse::clear_crewinfos() {
  crewinfos_.Clear();
}
inline ::msg::CrewInfo* CrewResponse::mutable_crewinfos(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CrewResponse.crewinfos)
  return crewinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CrewInfo >*
CrewResponse::mutable_crewinfos() {
  // @@protoc_insertion_point(field_mutable_list:msg.CrewResponse.crewinfos)
  return &crewinfos_;
}
inline const ::msg::CrewInfo& CrewResponse::_internal_crewinfos(int index) const {
  return crewinfos_.Get(index);
}
inline const ::msg::CrewInfo& CrewResponse::crewinfos(int index) const {
  // @@protoc_insertion_point(field_get:msg.CrewResponse.crewinfos)
  return _internal_crewinfos(index);
}
inline ::msg::CrewInfo* CrewResponse::_internal_add_crewinfos() {
  return crewinfos_.Add();
}
inline ::msg::CrewInfo* CrewResponse::add_crewinfos() {
  // @@protoc_insertion_point(field_add:msg.CrewResponse.crewinfos)
  return _internal_add_crewinfos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CrewInfo >&
CrewResponse::crewinfos() const {
  // @@protoc_insertion_point(field_list:msg.CrewResponse.crewinfos)
  return crewinfos_;
}

// -------------------------------------------------------------------

// Crew

// required .msg.Crew.Command command = 1;
inline bool Crew::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Crew::has_command() const {
  return _internal_has_command();
}
inline void Crew::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::Crew_Command Crew::_internal_command() const {
  return static_cast< ::msg::Crew_Command >(command_);
}
inline ::msg::Crew_Command Crew::command() const {
  // @@protoc_insertion_point(field_get:msg.Crew.command)
  return _internal_command();
}
inline void Crew::_internal_set_command(::msg::Crew_Command value) {
  assert(::msg::Crew_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void Crew::set_command(::msg::Crew_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.Crew.command)
}

// optional .msg.CrewRequest crewrequest = 2;
inline bool Crew::_internal_has_crewrequest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || crewrequest_ != nullptr);
  return value;
}
inline bool Crew::has_crewrequest() const {
  return _internal_has_crewrequest();
}
inline void Crew::clear_crewrequest() {
  if (crewrequest_ != nullptr) crewrequest_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::CrewRequest& Crew::_internal_crewrequest() const {
  const ::msg::CrewRequest* p = crewrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::CrewRequest*>(
      &::msg::_CrewRequest_default_instance_);
}
inline const ::msg::CrewRequest& Crew::crewrequest() const {
  // @@protoc_insertion_point(field_get:msg.Crew.crewrequest)
  return _internal_crewrequest();
}
inline void Crew::unsafe_arena_set_allocated_crewrequest(
    ::msg::CrewRequest* crewrequest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crewrequest_);
  }
  crewrequest_ = crewrequest;
  if (crewrequest) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Crew.crewrequest)
}
inline ::msg::CrewRequest* Crew::release_crewrequest() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::CrewRequest* temp = crewrequest_;
  crewrequest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::CrewRequest* Crew::unsafe_arena_release_crewrequest() {
  // @@protoc_insertion_point(field_release:msg.Crew.crewrequest)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::CrewRequest* temp = crewrequest_;
  crewrequest_ = nullptr;
  return temp;
}
inline ::msg::CrewRequest* Crew::_internal_mutable_crewrequest() {
  _has_bits_[0] |= 0x00000001u;
  if (crewrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CrewRequest>(GetArena());
    crewrequest_ = p;
  }
  return crewrequest_;
}
inline ::msg::CrewRequest* Crew::mutable_crewrequest() {
  // @@protoc_insertion_point(field_mutable:msg.Crew.crewrequest)
  return _internal_mutable_crewrequest();
}
inline void Crew::set_allocated_crewrequest(::msg::CrewRequest* crewrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crewrequest_;
  }
  if (crewrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crewrequest);
    if (message_arena != submessage_arena) {
      crewrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crewrequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  crewrequest_ = crewrequest;
  // @@protoc_insertion_point(field_set_allocated:msg.Crew.crewrequest)
}

// optional .msg.CrewResponse crewresponse = 3;
inline bool Crew::_internal_has_crewresponse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || crewresponse_ != nullptr);
  return value;
}
inline bool Crew::has_crewresponse() const {
  return _internal_has_crewresponse();
}
inline void Crew::clear_crewresponse() {
  if (crewresponse_ != nullptr) crewresponse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::CrewResponse& Crew::_internal_crewresponse() const {
  const ::msg::CrewResponse* p = crewresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::CrewResponse*>(
      &::msg::_CrewResponse_default_instance_);
}
inline const ::msg::CrewResponse& Crew::crewresponse() const {
  // @@protoc_insertion_point(field_get:msg.Crew.crewresponse)
  return _internal_crewresponse();
}
inline void Crew::unsafe_arena_set_allocated_crewresponse(
    ::msg::CrewResponse* crewresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crewresponse_);
  }
  crewresponse_ = crewresponse;
  if (crewresponse) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Crew.crewresponse)
}
inline ::msg::CrewResponse* Crew::release_crewresponse() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::CrewResponse* temp = crewresponse_;
  crewresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::CrewResponse* Crew::unsafe_arena_release_crewresponse() {
  // @@protoc_insertion_point(field_release:msg.Crew.crewresponse)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::CrewResponse* temp = crewresponse_;
  crewresponse_ = nullptr;
  return temp;
}
inline ::msg::CrewResponse* Crew::_internal_mutable_crewresponse() {
  _has_bits_[0] |= 0x00000002u;
  if (crewresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CrewResponse>(GetArena());
    crewresponse_ = p;
  }
  return crewresponse_;
}
inline ::msg::CrewResponse* Crew::mutable_crewresponse() {
  // @@protoc_insertion_point(field_mutable:msg.Crew.crewresponse)
  return _internal_mutable_crewresponse();
}
inline void Crew::set_allocated_crewresponse(::msg::CrewResponse* crewresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crewresponse_;
  }
  if (crewresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crewresponse);
    if (message_arena != submessage_arena) {
      crewresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crewresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  crewresponse_ = crewresponse;
  // @@protoc_insertion_point(field_set_allocated:msg.Crew.crewresponse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::Crew_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Crew_Command>() {
  return ::msg::Crew_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Crew_2eproto
