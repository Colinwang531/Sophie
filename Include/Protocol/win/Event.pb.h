// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Event_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Event_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Event_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Event_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Event_2eproto;
namespace msg {
class CaptureInfo;
class CaptureInfoDefaultTypeInternal;
extern CaptureInfoDefaultTypeInternal _CaptureInfo_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::CaptureInfo* Arena::CreateMaybeMessage<::msg::CaptureInfo>(Arena*);
template<> ::msg::Event* Arena::CreateMaybeMessage<::msg::Event>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum Event_Command : int {
  Event_Command_CAPTURE_JPEG_REQ = 1,
  Event_Command_CAPTURE_JPEG_REP = 2
};
bool Event_Command_IsValid(int value);
constexpr Event_Command Event_Command_Command_MIN = Event_Command_CAPTURE_JPEG_REQ;
constexpr Event_Command Event_Command_Command_MAX = Event_Command_CAPTURE_JPEG_REP;
constexpr int Event_Command_Command_ARRAYSIZE = Event_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_Command_descriptor();
template<typename T>
inline const std::string& Event_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Event_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Event_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Event_Command_descriptor(), enum_t_value);
}
inline bool Event_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Event_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Event_Command>(
    Event_Command_descriptor(), name, value);
}
// ===================================================================

class CaptureInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CaptureInfo) */ {
 public:
  inline CaptureInfo() : CaptureInfo(nullptr) {}
  virtual ~CaptureInfo();

  CaptureInfo(const CaptureInfo& from);
  CaptureInfo(CaptureInfo&& from) noexcept
    : CaptureInfo() {
    *this = ::std::move(from);
  }

  inline CaptureInfo& operator=(const CaptureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureInfo& operator=(CaptureInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaptureInfo& default_instance();

  static inline const CaptureInfo* internal_default_instance() {
    return reinterpret_cast<const CaptureInfo*>(
               &_CaptureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CaptureInfo& a, CaptureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptureInfo* New() const final {
    return CreateMaybeMessage<CaptureInfo>(nullptr);
  }

  CaptureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptureInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaptureInfo& from);
  void MergeFrom(const CaptureInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CaptureInfo";
  }
  protected:
  explicit CaptureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Event_2eproto);
    return ::descriptor_table_Event_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDidFieldNumber = 1,
    kCidFieldNumber = 2,
    kPictureFieldNumber = 4,
    kIdxFieldNumber = 3,
  };
  // required string did = 1;
  bool has_did() const;
  private:
  bool _internal_has_did() const;
  public:
  void clear_did();
  const std::string& did() const;
  void set_did(const std::string& value);
  void set_did(std::string&& value);
  void set_did(const char* value);
  void set_did(const char* value, size_t size);
  std::string* mutable_did();
  std::string* release_did();
  void set_allocated_did(std::string* did);
  private:
  const std::string& _internal_did() const;
  void _internal_set_did(const std::string& value);
  std::string* _internal_mutable_did();
  public:

  // required string cid = 2;
  bool has_cid() const;
  private:
  bool _internal_has_cid() const;
  public:
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // optional string picture = 4;
  bool has_picture() const;
  private:
  bool _internal_has_picture() const;
  public:
  void clear_picture();
  const std::string& picture() const;
  void set_picture(const std::string& value);
  void set_picture(std::string&& value);
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  std::string* mutable_picture();
  std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  private:
  const std::string& _internal_picture() const;
  void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // required int32 idx = 3;
  bool has_idx() const;
  private:
  bool _internal_has_idx() const;
  public:
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CaptureInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr did_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  friend struct ::TableStruct_Event_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Event_2eproto);
    return ::descriptor_table_Event_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Event_Command Command;
  static constexpr Command CAPTURE_JPEG_REQ =
    Event_Command_CAPTURE_JPEG_REQ;
  static constexpr Command CAPTURE_JPEG_REP =
    Event_Command_CAPTURE_JPEG_REP;
  static inline bool Command_IsValid(int value) {
    return Event_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Event_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Event_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Event_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Event_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Event_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return Event_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureinfoFieldNumber = 2,
    kCommandFieldNumber = 1,
  };
  // optional .msg.CaptureInfo captureinfo = 2;
  bool has_captureinfo() const;
  private:
  bool _internal_has_captureinfo() const;
  public:
  void clear_captureinfo();
  const ::msg::CaptureInfo& captureinfo() const;
  ::msg::CaptureInfo* release_captureinfo();
  ::msg::CaptureInfo* mutable_captureinfo();
  void set_allocated_captureinfo(::msg::CaptureInfo* captureinfo);
  private:
  const ::msg::CaptureInfo& _internal_captureinfo() const;
  ::msg::CaptureInfo* _internal_mutable_captureinfo();
  public:
  void unsafe_arena_set_allocated_captureinfo(
      ::msg::CaptureInfo* captureinfo);
  ::msg::CaptureInfo* unsafe_arena_release_captureinfo();

  // required .msg.Event.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::Event_Command command() const;
  void set_command(::msg::Event_Command value);
  private:
  ::msg::Event_Command _internal_command() const;
  void _internal_set_command(::msg::Event_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::CaptureInfo* captureinfo_;
  int command_;
  friend struct ::TableStruct_Event_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CaptureInfo

// required string did = 1;
inline bool CaptureInfo::_internal_has_did() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CaptureInfo::has_did() const {
  return _internal_has_did();
}
inline void CaptureInfo::clear_did() {
  did_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CaptureInfo::did() const {
  // @@protoc_insertion_point(field_get:msg.CaptureInfo.did)
  return _internal_did();
}
inline void CaptureInfo::set_did(const std::string& value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:msg.CaptureInfo.did)
}
inline std::string* CaptureInfo::mutable_did() {
  // @@protoc_insertion_point(field_mutable:msg.CaptureInfo.did)
  return _internal_mutable_did();
}
inline const std::string& CaptureInfo::_internal_did() const {
  return did_.Get();
}
inline void CaptureInfo::_internal_set_did(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptureInfo::set_did(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CaptureInfo.did)
}
inline void CaptureInfo::set_did(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CaptureInfo.did)
}
inline void CaptureInfo::set_did(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CaptureInfo.did)
}
inline std::string* CaptureInfo::_internal_mutable_did() {
  _has_bits_[0] |= 0x00000001u;
  return did_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptureInfo::release_did() {
  // @@protoc_insertion_point(field_release:msg.CaptureInfo.did)
  if (!_internal_has_did()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return did_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptureInfo::set_allocated_did(std::string* did) {
  if (did != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  did_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), did,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CaptureInfo.did)
}

// required string cid = 2;
inline bool CaptureInfo::_internal_has_cid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CaptureInfo::has_cid() const {
  return _internal_has_cid();
}
inline void CaptureInfo::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CaptureInfo::cid() const {
  // @@protoc_insertion_point(field_get:msg.CaptureInfo.cid)
  return _internal_cid();
}
inline void CaptureInfo::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:msg.CaptureInfo.cid)
}
inline std::string* CaptureInfo::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:msg.CaptureInfo.cid)
  return _internal_mutable_cid();
}
inline const std::string& CaptureInfo::_internal_cid() const {
  return cid_.Get();
}
inline void CaptureInfo::_internal_set_cid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptureInfo::set_cid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CaptureInfo.cid)
}
inline void CaptureInfo::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CaptureInfo.cid)
}
inline void CaptureInfo::set_cid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CaptureInfo.cid)
}
inline std::string* CaptureInfo::_internal_mutable_cid() {
  _has_bits_[0] |= 0x00000002u;
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptureInfo::release_cid() {
  // @@protoc_insertion_point(field_release:msg.CaptureInfo.cid)
  if (!_internal_has_cid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptureInfo::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CaptureInfo.cid)
}

// required int32 idx = 3;
inline bool CaptureInfo::_internal_has_idx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CaptureInfo::has_idx() const {
  return _internal_has_idx();
}
inline void CaptureInfo::clear_idx() {
  idx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CaptureInfo::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CaptureInfo::idx() const {
  // @@protoc_insertion_point(field_get:msg.CaptureInfo.idx)
  return _internal_idx();
}
inline void CaptureInfo::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  idx_ = value;
}
inline void CaptureInfo::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:msg.CaptureInfo.idx)
}

// optional string picture = 4;
inline bool CaptureInfo::_internal_has_picture() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CaptureInfo::has_picture() const {
  return _internal_has_picture();
}
inline void CaptureInfo::clear_picture() {
  picture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CaptureInfo::picture() const {
  // @@protoc_insertion_point(field_get:msg.CaptureInfo.picture)
  return _internal_picture();
}
inline void CaptureInfo::set_picture(const std::string& value) {
  _internal_set_picture(value);
  // @@protoc_insertion_point(field_set:msg.CaptureInfo.picture)
}
inline std::string* CaptureInfo::mutable_picture() {
  // @@protoc_insertion_point(field_mutable:msg.CaptureInfo.picture)
  return _internal_mutable_picture();
}
inline const std::string& CaptureInfo::_internal_picture() const {
  return picture_.Get();
}
inline void CaptureInfo::_internal_set_picture(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptureInfo::set_picture(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CaptureInfo.picture)
}
inline void CaptureInfo::set_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CaptureInfo.picture)
}
inline void CaptureInfo::set_picture(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CaptureInfo.picture)
}
inline std::string* CaptureInfo::_internal_mutable_picture() {
  _has_bits_[0] |= 0x00000004u;
  return picture_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptureInfo::release_picture() {
  // @@protoc_insertion_point(field_release:msg.CaptureInfo.picture)
  if (!_internal_has_picture()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return picture_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptureInfo::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CaptureInfo.picture)
}

// -------------------------------------------------------------------

// Event

// required .msg.Event.Command command = 1;
inline bool Event::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Event::has_command() const {
  return _internal_has_command();
}
inline void Event::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::msg::Event_Command Event::_internal_command() const {
  return static_cast< ::msg::Event_Command >(command_);
}
inline ::msg::Event_Command Event::command() const {
  // @@protoc_insertion_point(field_get:msg.Event.command)
  return _internal_command();
}
inline void Event::_internal_set_command(::msg::Event_Command value) {
  assert(::msg::Event_Command_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  command_ = value;
}
inline void Event::set_command(::msg::Event_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.Event.command)
}

// optional .msg.CaptureInfo captureinfo = 2;
inline bool Event::_internal_has_captureinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || captureinfo_ != nullptr);
  return value;
}
inline bool Event::has_captureinfo() const {
  return _internal_has_captureinfo();
}
inline void Event::clear_captureinfo() {
  if (captureinfo_ != nullptr) captureinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::CaptureInfo& Event::_internal_captureinfo() const {
  const ::msg::CaptureInfo* p = captureinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CaptureInfo&>(
      ::msg::_CaptureInfo_default_instance_);
}
inline const ::msg::CaptureInfo& Event::captureinfo() const {
  // @@protoc_insertion_point(field_get:msg.Event.captureinfo)
  return _internal_captureinfo();
}
inline void Event::unsafe_arena_set_allocated_captureinfo(
    ::msg::CaptureInfo* captureinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(captureinfo_);
  }
  captureinfo_ = captureinfo;
  if (captureinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Event.captureinfo)
}
inline ::msg::CaptureInfo* Event::release_captureinfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::CaptureInfo* temp = captureinfo_;
  captureinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::CaptureInfo* Event::unsafe_arena_release_captureinfo() {
  // @@protoc_insertion_point(field_release:msg.Event.captureinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::CaptureInfo* temp = captureinfo_;
  captureinfo_ = nullptr;
  return temp;
}
inline ::msg::CaptureInfo* Event::_internal_mutable_captureinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (captureinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CaptureInfo>(GetArena());
    captureinfo_ = p;
  }
  return captureinfo_;
}
inline ::msg::CaptureInfo* Event::mutable_captureinfo() {
  // @@protoc_insertion_point(field_mutable:msg.Event.captureinfo)
  return _internal_mutable_captureinfo();
}
inline void Event::set_allocated_captureinfo(::msg::CaptureInfo* captureinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete captureinfo_;
  }
  if (captureinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(captureinfo);
    if (message_arena != submessage_arena) {
      captureinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captureinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  captureinfo_ = captureinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.Event.captureinfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::Event_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Event_Command>() {
  return ::msg::Event_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Event_2eproto
