// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_User_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_User_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_User_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_User_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_User_2eproto;
namespace msg {
class Author;
class AuthorDefaultTypeInternal;
extern AuthorDefaultTypeInternal _Author_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserRequest;
class UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class UserResponse;
class UserResponseDefaultTypeInternal;
extern UserResponseDefaultTypeInternal _UserResponse_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Author* Arena::CreateMaybeMessage<::msg::Author>(Arena*);
template<> ::msg::Person* Arena::CreateMaybeMessage<::msg::Person>(Arena*);
template<> ::msg::User* Arena::CreateMaybeMessage<::msg::User>(Arena*);
template<> ::msg::UserRequest* Arena::CreateMaybeMessage<::msg::UserRequest>(Arena*);
template<> ::msg::UserResponse* Arena::CreateMaybeMessage<::msg::UserResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum User_Command : int {
  User_Command_NEW_REQ = 1,
  User_Command_NEW_REP = 2,
  User_Command_DELETE_REQ = 3,
  User_Command_DELETE_REP = 4,
  User_Command_MODIFY_REQ = 5,
  User_Command_MODIFY_REP = 6,
  User_Command_QUERY_REQ = 7,
  User_Command_QUERY_REP = 8,
  User_Command_LOGIN_REQ = 9,
  User_Command_LOGIN_REP = 10
};
bool User_Command_IsValid(int value);
constexpr User_Command User_Command_Command_MIN = User_Command_NEW_REQ;
constexpr User_Command User_Command_Command_MAX = User_Command_LOGIN_REP;
constexpr int User_Command_Command_ARRAYSIZE = User_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* User_Command_descriptor();
template<typename T>
inline const std::string& User_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, User_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function User_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    User_Command_descriptor(), enum_t_value);
}
inline bool User_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, User_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<User_Command>(
    User_Command_descriptor(), name, value);
}
// ===================================================================

class Author PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Author) */ {
 public:
  inline Author() : Author(nullptr) {}
  virtual ~Author();

  Author(const Author& from);
  Author(Author&& from) noexcept
    : Author() {
    *this = ::std::move(from);
  }

  inline Author& operator=(const Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline Author& operator=(Author&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Author& default_instance();

  static inline const Author* internal_default_instance() {
    return reinterpret_cast<const Author*>(
               &_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Author& a, Author& b) {
    a.Swap(&b);
  }
  inline void Swap(Author* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Author* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Author* New() const final {
    return CreateMaybeMessage<Author>(nullptr);
  }

  Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Author>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Author& from);
  void MergeFrom(const Author& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Author* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Author";
  }
  protected:
  explicit Author(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableconfigureFieldNumber = 1,
    kEnablequeryFieldNumber = 2,
  };
  // required bool enableconfigure = 1;
  bool has_enableconfigure() const;
  private:
  bool _internal_has_enableconfigure() const;
  public:
  void clear_enableconfigure();
  bool enableconfigure() const;
  void set_enableconfigure(bool value);
  private:
  bool _internal_enableconfigure() const;
  void _internal_set_enableconfigure(bool value);
  public:

  // required bool enablequery = 2;
  bool has_enablequery() const;
  private:
  bool _internal_has_enablequery() const;
  public:
  void clear_enablequery();
  bool enablequery() const;
  void set_enablequery(bool value);
  private:
  bool _internal_enablequery() const;
  void _internal_set_enablequery(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Author)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enableconfigure_;
  bool enablequery_;
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class Person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance();

  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kAuthorFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required .msg.Author author = 3;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::msg::Author& author() const;
  ::msg::Author* release_author();
  ::msg::Author* mutable_author();
  void set_allocated_author(::msg::Author* author);
  private:
  const ::msg::Author& _internal_author() const;
  ::msg::Author* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::msg::Author* author);
  ::msg::Author* unsafe_arena_release_author();

  // @@protoc_insertion_point(class_scope:msg.Person)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::msg::Author* author_;
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class UserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRequest& default_instance();

  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRequest* New() const final {
    return CreateMaybeMessage<UserRequest>(nullptr);
  }

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 2,
    kPersonFieldNumber = 1,
  };
  // optional string uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // optional .msg.Person person = 1;
  bool has_person() const;
  private:
  bool _internal_has_person() const;
  public:
  void clear_person();
  const ::msg::Person& person() const;
  ::msg::Person* release_person();
  ::msg::Person* mutable_person();
  void set_allocated_person(::msg::Person* person);
  private:
  const ::msg::Person& _internal_person() const;
  ::msg::Person* _internal_mutable_person();
  public:
  void unsafe_arena_set_allocated_person(
      ::msg::Person* person);
  ::msg::Person* unsafe_arena_release_person();

  // @@protoc_insertion_point(class_scope:msg.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::msg::Person* person_;
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class UserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.UserResponse) */ {
 public:
  inline UserResponse() : UserResponse(nullptr) {}
  virtual ~UserResponse();

  UserResponse(const UserResponse& from);
  UserResponse(UserResponse&& from) noexcept
    : UserResponse() {
    *this = ::std::move(from);
  }

  inline UserResponse& operator=(const UserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserResponse& operator=(UserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserResponse& default_instance();

  static inline const UserResponse* internal_default_instance() {
    return reinterpret_cast<const UserResponse*>(
               &_UserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserResponse& a, UserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserResponse* New() const final {
    return CreateMaybeMessage<UserResponse>(nullptr);
  }

  UserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserResponse& from);
  void MergeFrom(const UserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.UserResponse";
  }
  protected:
  explicit UserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 3,
    kUidFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .msg.Person persons = 3;
  int persons_size() const;
  private:
  int _internal_persons_size() const;
  public:
  void clear_persons();
  ::msg::Person* mutable_persons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Person >*
      mutable_persons();
  private:
  const ::msg::Person& _internal_persons(int index) const;
  ::msg::Person* _internal_add_persons();
  public:
  const ::msg::Person& persons(int index) const;
  ::msg::Person* add_persons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Person >&
      persons() const;

  // optional string uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // required int32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.UserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Person > persons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_User_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef User_Command Command;
  static constexpr Command NEW_REQ =
    User_Command_NEW_REQ;
  static constexpr Command NEW_REP =
    User_Command_NEW_REP;
  static constexpr Command DELETE_REQ =
    User_Command_DELETE_REQ;
  static constexpr Command DELETE_REP =
    User_Command_DELETE_REP;
  static constexpr Command MODIFY_REQ =
    User_Command_MODIFY_REQ;
  static constexpr Command MODIFY_REP =
    User_Command_MODIFY_REP;
  static constexpr Command QUERY_REQ =
    User_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    User_Command_QUERY_REP;
  static constexpr Command LOGIN_REQ =
    User_Command_LOGIN_REQ;
  static constexpr Command LOGIN_REP =
    User_Command_LOGIN_REP;
  static inline bool Command_IsValid(int value) {
    return User_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    User_Command_Command_MIN;
  static constexpr Command Command_MAX =
    User_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    User_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return User_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return User_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return User_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserrequestFieldNumber = 2,
    kUserresponseFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // optional .msg.UserRequest userrequest = 2;
  bool has_userrequest() const;
  private:
  bool _internal_has_userrequest() const;
  public:
  void clear_userrequest();
  const ::msg::UserRequest& userrequest() const;
  ::msg::UserRequest* release_userrequest();
  ::msg::UserRequest* mutable_userrequest();
  void set_allocated_userrequest(::msg::UserRequest* userrequest);
  private:
  const ::msg::UserRequest& _internal_userrequest() const;
  ::msg::UserRequest* _internal_mutable_userrequest();
  public:
  void unsafe_arena_set_allocated_userrequest(
      ::msg::UserRequest* userrequest);
  ::msg::UserRequest* unsafe_arena_release_userrequest();

  // optional .msg.UserResponse userresponse = 3;
  bool has_userresponse() const;
  private:
  bool _internal_has_userresponse() const;
  public:
  void clear_userresponse();
  const ::msg::UserResponse& userresponse() const;
  ::msg::UserResponse* release_userresponse();
  ::msg::UserResponse* mutable_userresponse();
  void set_allocated_userresponse(::msg::UserResponse* userresponse);
  private:
  const ::msg::UserResponse& _internal_userresponse() const;
  ::msg::UserResponse* _internal_mutable_userresponse();
  public:
  void unsafe_arena_set_allocated_userresponse(
      ::msg::UserResponse* userresponse);
  ::msg::UserResponse* unsafe_arena_release_userresponse();

  // required .msg.User.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::User_Command command() const;
  void set_command(::msg::User_Command value);
  private:
  ::msg::User_Command _internal_command() const;
  void _internal_set_command(::msg::User_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::UserRequest* userrequest_;
  ::msg::UserResponse* userresponse_;
  int command_;
  friend struct ::TableStruct_User_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Author

// required bool enableconfigure = 1;
inline bool Author::_internal_has_enableconfigure() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Author::has_enableconfigure() const {
  return _internal_has_enableconfigure();
}
inline void Author::clear_enableconfigure() {
  enableconfigure_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Author::_internal_enableconfigure() const {
  return enableconfigure_;
}
inline bool Author::enableconfigure() const {
  // @@protoc_insertion_point(field_get:msg.Author.enableconfigure)
  return _internal_enableconfigure();
}
inline void Author::_internal_set_enableconfigure(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enableconfigure_ = value;
}
inline void Author::set_enableconfigure(bool value) {
  _internal_set_enableconfigure(value);
  // @@protoc_insertion_point(field_set:msg.Author.enableconfigure)
}

// required bool enablequery = 2;
inline bool Author::_internal_has_enablequery() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Author::has_enablequery() const {
  return _internal_has_enablequery();
}
inline void Author::clear_enablequery() {
  enablequery_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Author::_internal_enablequery() const {
  return enablequery_;
}
inline bool Author::enablequery() const {
  // @@protoc_insertion_point(field_get:msg.Author.enablequery)
  return _internal_enablequery();
}
inline void Author::_internal_set_enablequery(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enablequery_ = value;
}
inline void Author::set_enablequery(bool value) {
  _internal_set_enablequery(value);
  // @@protoc_insertion_point(field_set:msg.Author.enablequery)
}

// -------------------------------------------------------------------

// Person

// required string name = 1;
inline bool Person::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person::has_name() const {
  return _internal_has_name();
}
inline void Person::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:msg.Person.name)
  return _internal_name();
}
inline void Person::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.Person.name)
}
inline std::string* Person::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.Person.name)
  return _internal_mutable_name();
}
inline const std::string& Person::_internal_name() const {
  return name_.Get();
}
inline void Person::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Person.name)
}
inline void Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Person.name)
}
inline void Person::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Person.name)
}
inline std::string* Person::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:msg.Person.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Person.name)
}

// required string password = 2;
inline bool Person::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person::has_password() const {
  return _internal_has_password();
}
inline void Person::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Person::password() const {
  // @@protoc_insertion_point(field_get:msg.Person.password)
  return _internal_password();
}
inline void Person::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:msg.Person.password)
}
inline std::string* Person::mutable_password() {
  // @@protoc_insertion_point(field_mutable:msg.Person.password)
  return _internal_mutable_password();
}
inline const std::string& Person::_internal_password() const {
  return password_.Get();
}
inline void Person::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Person.password)
}
inline void Person::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Person.password)
}
inline void Person::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Person.password)
}
inline std::string* Person::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person::release_password() {
  // @@protoc_insertion_point(field_release:msg.Person.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Person.password)
}

// required .msg.Author author = 3;
inline bool Person::_internal_has_author() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || author_ != nullptr);
  return value;
}
inline bool Person::has_author() const {
  return _internal_has_author();
}
inline void Person::clear_author() {
  if (author_ != nullptr) author_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::msg::Author& Person::_internal_author() const {
  const ::msg::Author* p = author_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Author&>(
      ::msg::_Author_default_instance_);
}
inline const ::msg::Author& Person::author() const {
  // @@protoc_insertion_point(field_get:msg.Person.author)
  return _internal_author();
}
inline void Person::unsafe_arena_set_allocated_author(
    ::msg::Author* author) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  author_ = author;
  if (author) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Person.author)
}
inline ::msg::Author* Person::release_author() {
  _has_bits_[0] &= ~0x00000004u;
  ::msg::Author* temp = author_;
  author_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Author* Person::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:msg.Person.author)
  _has_bits_[0] &= ~0x00000004u;
  ::msg::Author* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::msg::Author* Person::_internal_mutable_author() {
  _has_bits_[0] |= 0x00000004u;
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Author>(GetArena());
    author_ = p;
  }
  return author_;
}
inline ::msg::Author* Person::mutable_author() {
  // @@protoc_insertion_point(field_mutable:msg.Person.author)
  return _internal_mutable_author();
}
inline void Person::set_allocated_author(::msg::Author* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:msg.Person.author)
}

// -------------------------------------------------------------------

// UserRequest

// optional .msg.Person person = 1;
inline bool UserRequest::_internal_has_person() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || person_ != nullptr);
  return value;
}
inline bool UserRequest::has_person() const {
  return _internal_has_person();
}
inline void UserRequest::clear_person() {
  if (person_ != nullptr) person_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::Person& UserRequest::_internal_person() const {
  const ::msg::Person* p = person_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Person&>(
      ::msg::_Person_default_instance_);
}
inline const ::msg::Person& UserRequest::person() const {
  // @@protoc_insertion_point(field_get:msg.UserRequest.person)
  return _internal_person();
}
inline void UserRequest::unsafe_arena_set_allocated_person(
    ::msg::Person* person) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(person_);
  }
  person_ = person;
  if (person) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UserRequest.person)
}
inline ::msg::Person* UserRequest::release_person() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::Person* temp = person_;
  person_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Person* UserRequest::unsafe_arena_release_person() {
  // @@protoc_insertion_point(field_release:msg.UserRequest.person)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::Person* temp = person_;
  person_ = nullptr;
  return temp;
}
inline ::msg::Person* UserRequest::_internal_mutable_person() {
  _has_bits_[0] |= 0x00000002u;
  if (person_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Person>(GetArena());
    person_ = p;
  }
  return person_;
}
inline ::msg::Person* UserRequest::mutable_person() {
  // @@protoc_insertion_point(field_mutable:msg.UserRequest.person)
  return _internal_mutable_person();
}
inline void UserRequest::set_allocated_person(::msg::Person* person) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete person_;
  }
  if (person) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(person);
    if (message_arena != submessage_arena) {
      person = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, person, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  person_ = person;
  // @@protoc_insertion_point(field_set_allocated:msg.UserRequest.person)
}

// optional string uid = 2;
inline bool UserRequest::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserRequest::has_uid() const {
  return _internal_has_uid();
}
inline void UserRequest::clear_uid() {
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserRequest::uid() const {
  // @@protoc_insertion_point(field_get:msg.UserRequest.uid)
  return _internal_uid();
}
inline void UserRequest::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:msg.UserRequest.uid)
}
inline std::string* UserRequest::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:msg.UserRequest.uid)
  return _internal_mutable_uid();
}
inline const std::string& UserRequest::_internal_uid() const {
  return uid_.Get();
}
inline void UserRequest::_internal_set_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRequest::set_uid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.UserRequest.uid)
}
inline void UserRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.UserRequest.uid)
}
inline void UserRequest::set_uid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.UserRequest.uid)
}
inline std::string* UserRequest::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000001u;
  return uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRequest::release_uid() {
  // @@protoc_insertion_point(field_release:msg.UserRequest.uid)
  if (!_internal_has_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRequest::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.UserRequest.uid)
}

// -------------------------------------------------------------------

// UserResponse

// required int32 result = 1;
inline bool UserResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserResponse::has_result() const {
  return _internal_has_result();
}
inline void UserResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserResponse::result() const {
  // @@protoc_insertion_point(field_get:msg.UserResponse.result)
  return _internal_result();
}
inline void UserResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void UserResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:msg.UserResponse.result)
}

// optional string uid = 2;
inline bool UserResponse::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserResponse::has_uid() const {
  return _internal_has_uid();
}
inline void UserResponse::clear_uid() {
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserResponse::uid() const {
  // @@protoc_insertion_point(field_get:msg.UserResponse.uid)
  return _internal_uid();
}
inline void UserResponse::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:msg.UserResponse.uid)
}
inline std::string* UserResponse::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:msg.UserResponse.uid)
  return _internal_mutable_uid();
}
inline const std::string& UserResponse::_internal_uid() const {
  return uid_.Get();
}
inline void UserResponse::_internal_set_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserResponse::set_uid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.UserResponse.uid)
}
inline void UserResponse::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.UserResponse.uid)
}
inline void UserResponse::set_uid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.UserResponse.uid)
}
inline std::string* UserResponse::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000001u;
  return uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserResponse::release_uid() {
  // @@protoc_insertion_point(field_release:msg.UserResponse.uid)
  if (!_internal_has_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserResponse::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.UserResponse.uid)
}

// repeated .msg.Person persons = 3;
inline int UserResponse::_internal_persons_size() const {
  return persons_.size();
}
inline int UserResponse::persons_size() const {
  return _internal_persons_size();
}
inline void UserResponse::clear_persons() {
  persons_.Clear();
}
inline ::msg::Person* UserResponse::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:msg.UserResponse.persons)
  return persons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Person >*
UserResponse::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:msg.UserResponse.persons)
  return &persons_;
}
inline const ::msg::Person& UserResponse::_internal_persons(int index) const {
  return persons_.Get(index);
}
inline const ::msg::Person& UserResponse::persons(int index) const {
  // @@protoc_insertion_point(field_get:msg.UserResponse.persons)
  return _internal_persons(index);
}
inline ::msg::Person* UserResponse::_internal_add_persons() {
  return persons_.Add();
}
inline ::msg::Person* UserResponse::add_persons() {
  // @@protoc_insertion_point(field_add:msg.UserResponse.persons)
  return _internal_add_persons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Person >&
UserResponse::persons() const {
  // @@protoc_insertion_point(field_list:msg.UserResponse.persons)
  return persons_;
}

// -------------------------------------------------------------------

// User

// required .msg.User.Command command = 1;
inline bool User::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool User::has_command() const {
  return _internal_has_command();
}
inline void User::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::User_Command User::_internal_command() const {
  return static_cast< ::msg::User_Command >(command_);
}
inline ::msg::User_Command User::command() const {
  // @@protoc_insertion_point(field_get:msg.User.command)
  return _internal_command();
}
inline void User::_internal_set_command(::msg::User_Command value) {
  assert(::msg::User_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void User::set_command(::msg::User_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.User.command)
}

// optional .msg.UserRequest userrequest = 2;
inline bool User::_internal_has_userrequest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || userrequest_ != nullptr);
  return value;
}
inline bool User::has_userrequest() const {
  return _internal_has_userrequest();
}
inline void User::clear_userrequest() {
  if (userrequest_ != nullptr) userrequest_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::UserRequest& User::_internal_userrequest() const {
  const ::msg::UserRequest* p = userrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::UserRequest&>(
      ::msg::_UserRequest_default_instance_);
}
inline const ::msg::UserRequest& User::userrequest() const {
  // @@protoc_insertion_point(field_get:msg.User.userrequest)
  return _internal_userrequest();
}
inline void User::unsafe_arena_set_allocated_userrequest(
    ::msg::UserRequest* userrequest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userrequest_);
  }
  userrequest_ = userrequest;
  if (userrequest) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.User.userrequest)
}
inline ::msg::UserRequest* User::release_userrequest() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::UserRequest* temp = userrequest_;
  userrequest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::UserRequest* User::unsafe_arena_release_userrequest() {
  // @@protoc_insertion_point(field_release:msg.User.userrequest)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::UserRequest* temp = userrequest_;
  userrequest_ = nullptr;
  return temp;
}
inline ::msg::UserRequest* User::_internal_mutable_userrequest() {
  _has_bits_[0] |= 0x00000001u;
  if (userrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::UserRequest>(GetArena());
    userrequest_ = p;
  }
  return userrequest_;
}
inline ::msg::UserRequest* User::mutable_userrequest() {
  // @@protoc_insertion_point(field_mutable:msg.User.userrequest)
  return _internal_mutable_userrequest();
}
inline void User::set_allocated_userrequest(::msg::UserRequest* userrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete userrequest_;
  }
  if (userrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(userrequest);
    if (message_arena != submessage_arena) {
      userrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userrequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  userrequest_ = userrequest;
  // @@protoc_insertion_point(field_set_allocated:msg.User.userrequest)
}

// optional .msg.UserResponse userresponse = 3;
inline bool User::_internal_has_userresponse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || userresponse_ != nullptr);
  return value;
}
inline bool User::has_userresponse() const {
  return _internal_has_userresponse();
}
inline void User::clear_userresponse() {
  if (userresponse_ != nullptr) userresponse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::UserResponse& User::_internal_userresponse() const {
  const ::msg::UserResponse* p = userresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::UserResponse&>(
      ::msg::_UserResponse_default_instance_);
}
inline const ::msg::UserResponse& User::userresponse() const {
  // @@protoc_insertion_point(field_get:msg.User.userresponse)
  return _internal_userresponse();
}
inline void User::unsafe_arena_set_allocated_userresponse(
    ::msg::UserResponse* userresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userresponse_);
  }
  userresponse_ = userresponse;
  if (userresponse) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.User.userresponse)
}
inline ::msg::UserResponse* User::release_userresponse() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::UserResponse* temp = userresponse_;
  userresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::UserResponse* User::unsafe_arena_release_userresponse() {
  // @@protoc_insertion_point(field_release:msg.User.userresponse)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::UserResponse* temp = userresponse_;
  userresponse_ = nullptr;
  return temp;
}
inline ::msg::UserResponse* User::_internal_mutable_userresponse() {
  _has_bits_[0] |= 0x00000002u;
  if (userresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::UserResponse>(GetArena());
    userresponse_ = p;
  }
  return userresponse_;
}
inline ::msg::UserResponse* User::mutable_userresponse() {
  // @@protoc_insertion_point(field_mutable:msg.User.userresponse)
  return _internal_mutable_userresponse();
}
inline void User::set_allocated_userresponse(::msg::UserResponse* userresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete userresponse_;
  }
  if (userresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(userresponse);
    if (message_arena != submessage_arena) {
      userresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  userresponse_ = userresponse;
  // @@protoc_insertion_point(field_set_allocated:msg.User.userresponse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::User_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::User_Command>() {
  return ::msg::User_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_User_2eproto
