// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Algorithm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Algorithm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Algorithm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Algorithm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Algorithm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Algorithm_2eproto;
namespace msg {
class Algorithm;
class AlgorithmDefaultTypeInternal;
extern AlgorithmDefaultTypeInternal _Algorithm_default_instance_;
class AlgorithmInfo;
class AlgorithmInfoDefaultTypeInternal;
extern AlgorithmInfoDefaultTypeInternal _AlgorithmInfo_default_instance_;
class AlgorithmRequest;
class AlgorithmRequestDefaultTypeInternal;
extern AlgorithmRequestDefaultTypeInternal _AlgorithmRequest_default_instance_;
class AlgorithmResponse;
class AlgorithmResponseDefaultTypeInternal;
extern AlgorithmResponseDefaultTypeInternal _AlgorithmResponse_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Algorithm* Arena::CreateMaybeMessage<::msg::Algorithm>(Arena*);
template<> ::msg::AlgorithmInfo* Arena::CreateMaybeMessage<::msg::AlgorithmInfo>(Arena*);
template<> ::msg::AlgorithmRequest* Arena::CreateMaybeMessage<::msg::AlgorithmRequest>(Arena*);
template<> ::msg::AlgorithmResponse* Arena::CreateMaybeMessage<::msg::AlgorithmResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum AlgorithmInfo_Type : int {
  AlgorithmInfo_Type_HELMET = 1,
  AlgorithmInfo_Type_PHONE = 2,
  AlgorithmInfo_Type_SLEEP = 3,
  AlgorithmInfo_Type_FIGHT = 4,
  AlgorithmInfo_Type_ATTENDANCE_IN = 5,
  AlgorithmInfo_Type_ATTENDANCE_OUT = 6
};
bool AlgorithmInfo_Type_IsValid(int value);
constexpr AlgorithmInfo_Type AlgorithmInfo_Type_Type_MIN = AlgorithmInfo_Type_HELMET;
constexpr AlgorithmInfo_Type AlgorithmInfo_Type_Type_MAX = AlgorithmInfo_Type_ATTENDANCE_OUT;
constexpr int AlgorithmInfo_Type_Type_ARRAYSIZE = AlgorithmInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlgorithmInfo_Type_descriptor();
template<typename T>
inline const std::string& AlgorithmInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlgorithmInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlgorithmInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlgorithmInfo_Type_descriptor(), enum_t_value);
}
inline bool AlgorithmInfo_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlgorithmInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlgorithmInfo_Type>(
    AlgorithmInfo_Type_descriptor(), name, value);
}
enum Algorithm_Command : int {
  Algorithm_Command_CONFIGURE_REQ = 1,
  Algorithm_Command_CONFIGURE_REP = 2,
  Algorithm_Command_QUERY_REQ = 3,
  Algorithm_Command_QUERY_REP = 4
};
bool Algorithm_Command_IsValid(int value);
constexpr Algorithm_Command Algorithm_Command_Command_MIN = Algorithm_Command_CONFIGURE_REQ;
constexpr Algorithm_Command Algorithm_Command_Command_MAX = Algorithm_Command_QUERY_REP;
constexpr int Algorithm_Command_Command_ARRAYSIZE = Algorithm_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Algorithm_Command_descriptor();
template<typename T>
inline const std::string& Algorithm_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Algorithm_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Algorithm_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Algorithm_Command_descriptor(), enum_t_value);
}
inline bool Algorithm_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Algorithm_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Algorithm_Command>(
    Algorithm_Command_descriptor(), name, value);
}
// ===================================================================

class AlgorithmInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlgorithmInfo) */ {
 public:
  inline AlgorithmInfo() : AlgorithmInfo(nullptr) {}
  virtual ~AlgorithmInfo();

  AlgorithmInfo(const AlgorithmInfo& from);
  AlgorithmInfo(AlgorithmInfo&& from) noexcept
    : AlgorithmInfo() {
    *this = ::std::move(from);
  }

  inline AlgorithmInfo& operator=(const AlgorithmInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmInfo& operator=(AlgorithmInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgorithmInfo& default_instance();

  static inline const AlgorithmInfo* internal_default_instance() {
    return reinterpret_cast<const AlgorithmInfo*>(
               &_AlgorithmInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlgorithmInfo& a, AlgorithmInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmInfo* New() const final {
    return CreateMaybeMessage<AlgorithmInfo>(nullptr);
  }

  AlgorithmInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgorithmInfo& from);
  void MergeFrom(const AlgorithmInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlgorithmInfo";
  }
  protected:
  explicit AlgorithmInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Algorithm_2eproto);
    return ::descriptor_table_Algorithm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlgorithmInfo_Type Type;
  static constexpr Type HELMET =
    AlgorithmInfo_Type_HELMET;
  static constexpr Type PHONE =
    AlgorithmInfo_Type_PHONE;
  static constexpr Type SLEEP =
    AlgorithmInfo_Type_SLEEP;
  static constexpr Type FIGHT =
    AlgorithmInfo_Type_FIGHT;
  static constexpr Type ATTENDANCE_IN =
    AlgorithmInfo_Type_ATTENDANCE_IN;
  static constexpr Type ATTENDANCE_OUT =
    AlgorithmInfo_Type_ATTENDANCE_OUT;
  static inline bool Type_IsValid(int value) {
    return AlgorithmInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    AlgorithmInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    AlgorithmInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    AlgorithmInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return AlgorithmInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return AlgorithmInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return AlgorithmInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 3,
    kGpuFieldNumber = 2,
    kDectectfirstFieldNumber = 4,
    kTrackFieldNumber = 5,
    kDectectsecondFieldNumber = 6,
    kSimilarFieldNumber = 7,
    kTypeFieldNumber = 1,
  };
  // required string cid = 3;
  bool has_cid() const;
  private:
  bool _internal_has_cid() const;
  public:
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // required int32 gpu = 2;
  bool has_gpu() const;
  private:
  bool _internal_has_gpu() const;
  public:
  void clear_gpu();
  ::PROTOBUF_NAMESPACE_ID::int32 gpu() const;
  void set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu() const;
  void _internal_set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float dectectfirst = 4;
  bool has_dectectfirst() const;
  private:
  bool _internal_has_dectectfirst() const;
  public:
  void clear_dectectfirst();
  float dectectfirst() const;
  void set_dectectfirst(float value);
  private:
  float _internal_dectectfirst() const;
  void _internal_set_dectectfirst(float value);
  public:

  // required float track = 5;
  bool has_track() const;
  private:
  bool _internal_has_track() const;
  public:
  void clear_track();
  float track() const;
  void set_track(float value);
  private:
  float _internal_track() const;
  void _internal_set_track(float value);
  public:

  // optional float dectectsecond = 6;
  bool has_dectectsecond() const;
  private:
  bool _internal_has_dectectsecond() const;
  public:
  void clear_dectectsecond();
  float dectectsecond() const;
  void set_dectectsecond(float value);
  private:
  float _internal_dectectsecond() const;
  void _internal_set_dectectsecond(float value);
  public:

  // optional float similar = 7;
  bool has_similar() const;
  private:
  bool _internal_has_similar() const;
  public:
  void clear_similar();
  float similar() const;
  void set_similar(float value);
  private:
  float _internal_similar() const;
  void _internal_set_similar(float value);
  public:

  // required .msg.AlgorithmInfo.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::AlgorithmInfo_Type type() const;
  void set_type(::msg::AlgorithmInfo_Type value);
  private:
  ::msg::AlgorithmInfo_Type _internal_type() const;
  void _internal_set_type(::msg::AlgorithmInfo_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AlgorithmInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_;
  float dectectfirst_;
  float track_;
  float dectectsecond_;
  float similar_;
  int type_;
  friend struct ::TableStruct_Algorithm_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlgorithmRequest) */ {
 public:
  inline AlgorithmRequest() : AlgorithmRequest(nullptr) {}
  virtual ~AlgorithmRequest();

  AlgorithmRequest(const AlgorithmRequest& from);
  AlgorithmRequest(AlgorithmRequest&& from) noexcept
    : AlgorithmRequest() {
    *this = ::std::move(from);
  }

  inline AlgorithmRequest& operator=(const AlgorithmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmRequest& operator=(AlgorithmRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgorithmRequest& default_instance();

  static inline const AlgorithmRequest* internal_default_instance() {
    return reinterpret_cast<const AlgorithmRequest*>(
               &_AlgorithmRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlgorithmRequest& a, AlgorithmRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmRequest* New() const final {
    return CreateMaybeMessage<AlgorithmRequest>(nullptr);
  }

  AlgorithmRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgorithmRequest& from);
  void MergeFrom(const AlgorithmRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlgorithmRequest";
  }
  protected:
  explicit AlgorithmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Algorithm_2eproto);
    return ::descriptor_table_Algorithm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithminfoFieldNumber = 1,
  };
  // required .msg.AlgorithmInfo algorithminfo = 1;
  bool has_algorithminfo() const;
  private:
  bool _internal_has_algorithminfo() const;
  public:
  void clear_algorithminfo();
  const ::msg::AlgorithmInfo& algorithminfo() const;
  ::msg::AlgorithmInfo* release_algorithminfo();
  ::msg::AlgorithmInfo* mutable_algorithminfo();
  void set_allocated_algorithminfo(::msg::AlgorithmInfo* algorithminfo);
  private:
  const ::msg::AlgorithmInfo& _internal_algorithminfo() const;
  ::msg::AlgorithmInfo* _internal_mutable_algorithminfo();
  public:
  void unsafe_arena_set_allocated_algorithminfo(
      ::msg::AlgorithmInfo* algorithminfo);
  ::msg::AlgorithmInfo* unsafe_arena_release_algorithminfo();

  // @@protoc_insertion_point(class_scope:msg.AlgorithmRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::AlgorithmInfo* algorithminfo_;
  friend struct ::TableStruct_Algorithm_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlgorithmResponse) */ {
 public:
  inline AlgorithmResponse() : AlgorithmResponse(nullptr) {}
  virtual ~AlgorithmResponse();

  AlgorithmResponse(const AlgorithmResponse& from);
  AlgorithmResponse(AlgorithmResponse&& from) noexcept
    : AlgorithmResponse() {
    *this = ::std::move(from);
  }

  inline AlgorithmResponse& operator=(const AlgorithmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmResponse& operator=(AlgorithmResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgorithmResponse& default_instance();

  static inline const AlgorithmResponse* internal_default_instance() {
    return reinterpret_cast<const AlgorithmResponse*>(
               &_AlgorithmResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlgorithmResponse& a, AlgorithmResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmResponse* New() const final {
    return CreateMaybeMessage<AlgorithmResponse>(nullptr);
  }

  AlgorithmResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgorithmResponse& from);
  void MergeFrom(const AlgorithmResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlgorithmResponse";
  }
  protected:
  explicit AlgorithmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Algorithm_2eproto);
    return ::descriptor_table_Algorithm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithminfosFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .msg.AlgorithmInfo algorithminfos = 2;
  int algorithminfos_size() const;
  private:
  int _internal_algorithminfos_size() const;
  public:
  void clear_algorithminfos();
  ::msg::AlgorithmInfo* mutable_algorithminfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlgorithmInfo >*
      mutable_algorithminfos();
  private:
  const ::msg::AlgorithmInfo& _internal_algorithminfos(int index) const;
  ::msg::AlgorithmInfo* _internal_add_algorithminfos();
  public:
  const ::msg::AlgorithmInfo& algorithminfos(int index) const;
  ::msg::AlgorithmInfo* add_algorithminfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlgorithmInfo >&
      algorithminfos() const;

  // required int32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AlgorithmResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlgorithmInfo > algorithminfos_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_Algorithm_2eproto;
};
// -------------------------------------------------------------------

class Algorithm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Algorithm) */ {
 public:
  inline Algorithm() : Algorithm(nullptr) {}
  virtual ~Algorithm();

  Algorithm(const Algorithm& from);
  Algorithm(Algorithm&& from) noexcept
    : Algorithm() {
    *this = ::std::move(from);
  }

  inline Algorithm& operator=(const Algorithm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Algorithm& operator=(Algorithm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Algorithm& default_instance();

  static inline const Algorithm* internal_default_instance() {
    return reinterpret_cast<const Algorithm*>(
               &_Algorithm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Algorithm& a, Algorithm& b) {
    a.Swap(&b);
  }
  inline void Swap(Algorithm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Algorithm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Algorithm* New() const final {
    return CreateMaybeMessage<Algorithm>(nullptr);
  }

  Algorithm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Algorithm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Algorithm& from);
  void MergeFrom(const Algorithm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Algorithm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Algorithm";
  }
  protected:
  explicit Algorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Algorithm_2eproto);
    return ::descriptor_table_Algorithm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Algorithm_Command Command;
  static constexpr Command CONFIGURE_REQ =
    Algorithm_Command_CONFIGURE_REQ;
  static constexpr Command CONFIGURE_REP =
    Algorithm_Command_CONFIGURE_REP;
  static constexpr Command QUERY_REQ =
    Algorithm_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    Algorithm_Command_QUERY_REP;
  static inline bool Command_IsValid(int value) {
    return Algorithm_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Algorithm_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Algorithm_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Algorithm_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Algorithm_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Algorithm_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return Algorithm_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmrequestFieldNumber = 2,
    kAlgorithmresponseFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // optional .msg.AlgorithmRequest algorithmrequest = 2;
  bool has_algorithmrequest() const;
  private:
  bool _internal_has_algorithmrequest() const;
  public:
  void clear_algorithmrequest();
  const ::msg::AlgorithmRequest& algorithmrequest() const;
  ::msg::AlgorithmRequest* release_algorithmrequest();
  ::msg::AlgorithmRequest* mutable_algorithmrequest();
  void set_allocated_algorithmrequest(::msg::AlgorithmRequest* algorithmrequest);
  private:
  const ::msg::AlgorithmRequest& _internal_algorithmrequest() const;
  ::msg::AlgorithmRequest* _internal_mutable_algorithmrequest();
  public:
  void unsafe_arena_set_allocated_algorithmrequest(
      ::msg::AlgorithmRequest* algorithmrequest);
  ::msg::AlgorithmRequest* unsafe_arena_release_algorithmrequest();

  // optional .msg.AlgorithmResponse algorithmresponse = 3;
  bool has_algorithmresponse() const;
  private:
  bool _internal_has_algorithmresponse() const;
  public:
  void clear_algorithmresponse();
  const ::msg::AlgorithmResponse& algorithmresponse() const;
  ::msg::AlgorithmResponse* release_algorithmresponse();
  ::msg::AlgorithmResponse* mutable_algorithmresponse();
  void set_allocated_algorithmresponse(::msg::AlgorithmResponse* algorithmresponse);
  private:
  const ::msg::AlgorithmResponse& _internal_algorithmresponse() const;
  ::msg::AlgorithmResponse* _internal_mutable_algorithmresponse();
  public:
  void unsafe_arena_set_allocated_algorithmresponse(
      ::msg::AlgorithmResponse* algorithmresponse);
  ::msg::AlgorithmResponse* unsafe_arena_release_algorithmresponse();

  // required .msg.Algorithm.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::Algorithm_Command command() const;
  void set_command(::msg::Algorithm_Command value);
  private:
  ::msg::Algorithm_Command _internal_command() const;
  void _internal_set_command(::msg::Algorithm_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Algorithm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::AlgorithmRequest* algorithmrequest_;
  ::msg::AlgorithmResponse* algorithmresponse_;
  int command_;
  friend struct ::TableStruct_Algorithm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlgorithmInfo

// required .msg.AlgorithmInfo.Type type = 1;
inline bool AlgorithmInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_type() const {
  return _internal_has_type();
}
inline void AlgorithmInfo::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::msg::AlgorithmInfo_Type AlgorithmInfo::_internal_type() const {
  return static_cast< ::msg::AlgorithmInfo_Type >(type_);
}
inline ::msg::AlgorithmInfo_Type AlgorithmInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.type)
  return _internal_type();
}
inline void AlgorithmInfo::_internal_set_type(::msg::AlgorithmInfo_Type value) {
  assert(::msg::AlgorithmInfo_Type_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void AlgorithmInfo::set_type(::msg::AlgorithmInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.type)
}

// required int32 gpu = 2;
inline bool AlgorithmInfo::_internal_has_gpu() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_gpu() const {
  return _internal_has_gpu();
}
inline void AlgorithmInfo::clear_gpu() {
  gpu_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmInfo::_internal_gpu() const {
  return gpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmInfo::gpu() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.gpu)
  return _internal_gpu();
}
inline void AlgorithmInfo::_internal_set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  gpu_ = value;
}
inline void AlgorithmInfo::set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpu(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.gpu)
}

// required string cid = 3;
inline bool AlgorithmInfo::_internal_has_cid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_cid() const {
  return _internal_has_cid();
}
inline void AlgorithmInfo::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlgorithmInfo::cid() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.cid)
  return _internal_cid();
}
inline void AlgorithmInfo::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.cid)
}
inline std::string* AlgorithmInfo::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:msg.AlgorithmInfo.cid)
  return _internal_mutable_cid();
}
inline const std::string& AlgorithmInfo::_internal_cid() const {
  return cid_.Get();
}
inline void AlgorithmInfo::_internal_set_cid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlgorithmInfo::set_cid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlgorithmInfo.cid)
}
inline void AlgorithmInfo::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlgorithmInfo.cid)
}
inline void AlgorithmInfo::set_cid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlgorithmInfo.cid)
}
inline std::string* AlgorithmInfo::_internal_mutable_cid() {
  _has_bits_[0] |= 0x00000001u;
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlgorithmInfo::release_cid() {
  // @@protoc_insertion_point(field_release:msg.AlgorithmInfo.cid)
  if (!_internal_has_cid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlgorithmInfo::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlgorithmInfo.cid)
}

// required float dectectfirst = 4;
inline bool AlgorithmInfo::_internal_has_dectectfirst() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_dectectfirst() const {
  return _internal_has_dectectfirst();
}
inline void AlgorithmInfo::clear_dectectfirst() {
  dectectfirst_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float AlgorithmInfo::_internal_dectectfirst() const {
  return dectectfirst_;
}
inline float AlgorithmInfo::dectectfirst() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.dectectfirst)
  return _internal_dectectfirst();
}
inline void AlgorithmInfo::_internal_set_dectectfirst(float value) {
  _has_bits_[0] |= 0x00000004u;
  dectectfirst_ = value;
}
inline void AlgorithmInfo::set_dectectfirst(float value) {
  _internal_set_dectectfirst(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.dectectfirst)
}

// required float track = 5;
inline bool AlgorithmInfo::_internal_has_track() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_track() const {
  return _internal_has_track();
}
inline void AlgorithmInfo::clear_track() {
  track_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float AlgorithmInfo::_internal_track() const {
  return track_;
}
inline float AlgorithmInfo::track() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.track)
  return _internal_track();
}
inline void AlgorithmInfo::_internal_set_track(float value) {
  _has_bits_[0] |= 0x00000008u;
  track_ = value;
}
inline void AlgorithmInfo::set_track(float value) {
  _internal_set_track(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.track)
}

// optional float dectectsecond = 6;
inline bool AlgorithmInfo::_internal_has_dectectsecond() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_dectectsecond() const {
  return _internal_has_dectectsecond();
}
inline void AlgorithmInfo::clear_dectectsecond() {
  dectectsecond_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float AlgorithmInfo::_internal_dectectsecond() const {
  return dectectsecond_;
}
inline float AlgorithmInfo::dectectsecond() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.dectectsecond)
  return _internal_dectectsecond();
}
inline void AlgorithmInfo::_internal_set_dectectsecond(float value) {
  _has_bits_[0] |= 0x00000010u;
  dectectsecond_ = value;
}
inline void AlgorithmInfo::set_dectectsecond(float value) {
  _internal_set_dectectsecond(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.dectectsecond)
}

// optional float similar = 7;
inline bool AlgorithmInfo::_internal_has_similar() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_similar() const {
  return _internal_has_similar();
}
inline void AlgorithmInfo::clear_similar() {
  similar_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float AlgorithmInfo::_internal_similar() const {
  return similar_;
}
inline float AlgorithmInfo::similar() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.similar)
  return _internal_similar();
}
inline void AlgorithmInfo::_internal_set_similar(float value) {
  _has_bits_[0] |= 0x00000020u;
  similar_ = value;
}
inline void AlgorithmInfo::set_similar(float value) {
  _internal_set_similar(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.similar)
}

// -------------------------------------------------------------------

// AlgorithmRequest

// required .msg.AlgorithmInfo algorithminfo = 1;
inline bool AlgorithmRequest::_internal_has_algorithminfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || algorithminfo_ != nullptr);
  return value;
}
inline bool AlgorithmRequest::has_algorithminfo() const {
  return _internal_has_algorithminfo();
}
inline void AlgorithmRequest::clear_algorithminfo() {
  if (algorithminfo_ != nullptr) algorithminfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::AlgorithmInfo& AlgorithmRequest::_internal_algorithminfo() const {
  const ::msg::AlgorithmInfo* p = algorithminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::AlgorithmInfo&>(
      ::msg::_AlgorithmInfo_default_instance_);
}
inline const ::msg::AlgorithmInfo& AlgorithmRequest::algorithminfo() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmRequest.algorithminfo)
  return _internal_algorithminfo();
}
inline void AlgorithmRequest::unsafe_arena_set_allocated_algorithminfo(
    ::msg::AlgorithmInfo* algorithminfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algorithminfo_);
  }
  algorithminfo_ = algorithminfo;
  if (algorithminfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.AlgorithmRequest.algorithminfo)
}
inline ::msg::AlgorithmInfo* AlgorithmRequest::release_algorithminfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlgorithmInfo* temp = algorithminfo_;
  algorithminfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::AlgorithmInfo* AlgorithmRequest::unsafe_arena_release_algorithminfo() {
  // @@protoc_insertion_point(field_release:msg.AlgorithmRequest.algorithminfo)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlgorithmInfo* temp = algorithminfo_;
  algorithminfo_ = nullptr;
  return temp;
}
inline ::msg::AlgorithmInfo* AlgorithmRequest::_internal_mutable_algorithminfo() {
  _has_bits_[0] |= 0x00000001u;
  if (algorithminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::AlgorithmInfo>(GetArena());
    algorithminfo_ = p;
  }
  return algorithminfo_;
}
inline ::msg::AlgorithmInfo* AlgorithmRequest::mutable_algorithminfo() {
  // @@protoc_insertion_point(field_mutable:msg.AlgorithmRequest.algorithminfo)
  return _internal_mutable_algorithminfo();
}
inline void AlgorithmRequest::set_allocated_algorithminfo(::msg::AlgorithmInfo* algorithminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete algorithminfo_;
  }
  if (algorithminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(algorithminfo);
    if (message_arena != submessage_arena) {
      algorithminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithminfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  algorithminfo_ = algorithminfo;
  // @@protoc_insertion_point(field_set_allocated:msg.AlgorithmRequest.algorithminfo)
}

// -------------------------------------------------------------------

// AlgorithmResponse

// required int32 result = 1;
inline bool AlgorithmResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlgorithmResponse::has_result() const {
  return _internal_has_result();
}
inline void AlgorithmResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmResponse::result() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmResponse.result)
  return _internal_result();
}
inline void AlgorithmResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void AlgorithmResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmResponse.result)
}

// repeated .msg.AlgorithmInfo algorithminfos = 2;
inline int AlgorithmResponse::_internal_algorithminfos_size() const {
  return algorithminfos_.size();
}
inline int AlgorithmResponse::algorithminfos_size() const {
  return _internal_algorithminfos_size();
}
inline void AlgorithmResponse::clear_algorithminfos() {
  algorithminfos_.Clear();
}
inline ::msg::AlgorithmInfo* AlgorithmResponse::mutable_algorithminfos(int index) {
  // @@protoc_insertion_point(field_mutable:msg.AlgorithmResponse.algorithminfos)
  return algorithminfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlgorithmInfo >*
AlgorithmResponse::mutable_algorithminfos() {
  // @@protoc_insertion_point(field_mutable_list:msg.AlgorithmResponse.algorithminfos)
  return &algorithminfos_;
}
inline const ::msg::AlgorithmInfo& AlgorithmResponse::_internal_algorithminfos(int index) const {
  return algorithminfos_.Get(index);
}
inline const ::msg::AlgorithmInfo& AlgorithmResponse::algorithminfos(int index) const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmResponse.algorithminfos)
  return _internal_algorithminfos(index);
}
inline ::msg::AlgorithmInfo* AlgorithmResponse::_internal_add_algorithminfos() {
  return algorithminfos_.Add();
}
inline ::msg::AlgorithmInfo* AlgorithmResponse::add_algorithminfos() {
  // @@protoc_insertion_point(field_add:msg.AlgorithmResponse.algorithminfos)
  return _internal_add_algorithminfos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlgorithmInfo >&
AlgorithmResponse::algorithminfos() const {
  // @@protoc_insertion_point(field_list:msg.AlgorithmResponse.algorithminfos)
  return algorithminfos_;
}

// -------------------------------------------------------------------

// Algorithm

// required .msg.Algorithm.Command command = 1;
inline bool Algorithm::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Algorithm::has_command() const {
  return _internal_has_command();
}
inline void Algorithm::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::Algorithm_Command Algorithm::_internal_command() const {
  return static_cast< ::msg::Algorithm_Command >(command_);
}
inline ::msg::Algorithm_Command Algorithm::command() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.command)
  return _internal_command();
}
inline void Algorithm::_internal_set_command(::msg::Algorithm_Command value) {
  assert(::msg::Algorithm_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void Algorithm::set_command(::msg::Algorithm_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.command)
}

// optional .msg.AlgorithmRequest algorithmrequest = 2;
inline bool Algorithm::_internal_has_algorithmrequest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || algorithmrequest_ != nullptr);
  return value;
}
inline bool Algorithm::has_algorithmrequest() const {
  return _internal_has_algorithmrequest();
}
inline void Algorithm::clear_algorithmrequest() {
  if (algorithmrequest_ != nullptr) algorithmrequest_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::AlgorithmRequest& Algorithm::_internal_algorithmrequest() const {
  const ::msg::AlgorithmRequest* p = algorithmrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::AlgorithmRequest&>(
      ::msg::_AlgorithmRequest_default_instance_);
}
inline const ::msg::AlgorithmRequest& Algorithm::algorithmrequest() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.algorithmrequest)
  return _internal_algorithmrequest();
}
inline void Algorithm::unsafe_arena_set_allocated_algorithmrequest(
    ::msg::AlgorithmRequest* algorithmrequest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algorithmrequest_);
  }
  algorithmrequest_ = algorithmrequest;
  if (algorithmrequest) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Algorithm.algorithmrequest)
}
inline ::msg::AlgorithmRequest* Algorithm::release_algorithmrequest() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlgorithmRequest* temp = algorithmrequest_;
  algorithmrequest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::AlgorithmRequest* Algorithm::unsafe_arena_release_algorithmrequest() {
  // @@protoc_insertion_point(field_release:msg.Algorithm.algorithmrequest)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlgorithmRequest* temp = algorithmrequest_;
  algorithmrequest_ = nullptr;
  return temp;
}
inline ::msg::AlgorithmRequest* Algorithm::_internal_mutable_algorithmrequest() {
  _has_bits_[0] |= 0x00000001u;
  if (algorithmrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::AlgorithmRequest>(GetArena());
    algorithmrequest_ = p;
  }
  return algorithmrequest_;
}
inline ::msg::AlgorithmRequest* Algorithm::mutable_algorithmrequest() {
  // @@protoc_insertion_point(field_mutable:msg.Algorithm.algorithmrequest)
  return _internal_mutable_algorithmrequest();
}
inline void Algorithm::set_allocated_algorithmrequest(::msg::AlgorithmRequest* algorithmrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete algorithmrequest_;
  }
  if (algorithmrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(algorithmrequest);
    if (message_arena != submessage_arena) {
      algorithmrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithmrequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  algorithmrequest_ = algorithmrequest;
  // @@protoc_insertion_point(field_set_allocated:msg.Algorithm.algorithmrequest)
}

// optional .msg.AlgorithmResponse algorithmresponse = 3;
inline bool Algorithm::_internal_has_algorithmresponse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || algorithmresponse_ != nullptr);
  return value;
}
inline bool Algorithm::has_algorithmresponse() const {
  return _internal_has_algorithmresponse();
}
inline void Algorithm::clear_algorithmresponse() {
  if (algorithmresponse_ != nullptr) algorithmresponse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::AlgorithmResponse& Algorithm::_internal_algorithmresponse() const {
  const ::msg::AlgorithmResponse* p = algorithmresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::AlgorithmResponse&>(
      ::msg::_AlgorithmResponse_default_instance_);
}
inline const ::msg::AlgorithmResponse& Algorithm::algorithmresponse() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.algorithmresponse)
  return _internal_algorithmresponse();
}
inline void Algorithm::unsafe_arena_set_allocated_algorithmresponse(
    ::msg::AlgorithmResponse* algorithmresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algorithmresponse_);
  }
  algorithmresponse_ = algorithmresponse;
  if (algorithmresponse) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Algorithm.algorithmresponse)
}
inline ::msg::AlgorithmResponse* Algorithm::release_algorithmresponse() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::AlgorithmResponse* temp = algorithmresponse_;
  algorithmresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::AlgorithmResponse* Algorithm::unsafe_arena_release_algorithmresponse() {
  // @@protoc_insertion_point(field_release:msg.Algorithm.algorithmresponse)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::AlgorithmResponse* temp = algorithmresponse_;
  algorithmresponse_ = nullptr;
  return temp;
}
inline ::msg::AlgorithmResponse* Algorithm::_internal_mutable_algorithmresponse() {
  _has_bits_[0] |= 0x00000002u;
  if (algorithmresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::AlgorithmResponse>(GetArena());
    algorithmresponse_ = p;
  }
  return algorithmresponse_;
}
inline ::msg::AlgorithmResponse* Algorithm::mutable_algorithmresponse() {
  // @@protoc_insertion_point(field_mutable:msg.Algorithm.algorithmresponse)
  return _internal_mutable_algorithmresponse();
}
inline void Algorithm::set_allocated_algorithmresponse(::msg::AlgorithmResponse* algorithmresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete algorithmresponse_;
  }
  if (algorithmresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(algorithmresponse);
    if (message_arena != submessage_arena) {
      algorithmresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithmresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  algorithmresponse_ = algorithmresponse;
  // @@protoc_insertion_point(field_set_allocated:msg.Algorithm.algorithmresponse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::AlgorithmInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::AlgorithmInfo_Type>() {
  return ::msg::AlgorithmInfo_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::Algorithm_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Algorithm_Command>() {
  return ::msg::Algorithm_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Algorithm_2eproto
