// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Status_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Status_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Status_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Status_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Status_2eproto;
namespace msg {
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StatusResponse;
class StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Status* Arena::CreateMaybeMessage<::msg::Status>(Arena*);
template<> ::msg::StatusRequest* Arena::CreateMaybeMessage<::msg::StatusRequest>(Arena*);
template<> ::msg::StatusResponse* Arena::CreateMaybeMessage<::msg::StatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum StatusRequest_Type : int {
  StatusRequest_Type_SAIL = 1,
  StatusRequest_Type_AIS = 2,
  StatusRequest_Type_CLOCK = 3,
  StatusRequest_Type_NAME = 4
};
bool StatusRequest_Type_IsValid(int value);
constexpr StatusRequest_Type StatusRequest_Type_Type_MIN = StatusRequest_Type_SAIL;
constexpr StatusRequest_Type StatusRequest_Type_Type_MAX = StatusRequest_Type_NAME;
constexpr int StatusRequest_Type_Type_ARRAYSIZE = StatusRequest_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusRequest_Type_descriptor();
template<typename T>
inline const std::string& StatusRequest_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusRequest_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusRequest_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusRequest_Type_descriptor(), enum_t_value);
}
inline bool StatusRequest_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusRequest_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusRequest_Type>(
    StatusRequest_Type_descriptor(), name, value);
}
enum Status_Command : int {
  Status_Command_SET_REQ = 1,
  Status_Command_SET_REP = 2,
  Status_Command_QUERY_REQ = 3,
  Status_Command_QUERY_REP = 4
};
bool Status_Command_IsValid(int value);
constexpr Status_Command Status_Command_Command_MIN = Status_Command_SET_REQ;
constexpr Status_Command Status_Command_Command_MAX = Status_Command_QUERY_REP;
constexpr int Status_Command_Command_ARRAYSIZE = Status_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_Command_descriptor();
template<typename T>
inline const std::string& Status_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_Command_descriptor(), enum_t_value);
}
inline bool Status_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_Command>(
    Status_Command_descriptor(), name, value);
}
// ===================================================================

class StatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {}
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusRequest& default_instance();

  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(nullptr);
  }

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Status_2eproto);
    return ::descriptor_table_Status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StatusRequest_Type Type;
  static constexpr Type SAIL =
    StatusRequest_Type_SAIL;
  static constexpr Type AIS =
    StatusRequest_Type_AIS;
  static constexpr Type CLOCK =
    StatusRequest_Type_CLOCK;
  static constexpr Type NAME =
    StatusRequest_Type_NAME;
  static inline bool Type_IsValid(int value) {
    return StatusRequest_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    StatusRequest_Type_Type_MIN;
  static constexpr Type Type_MAX =
    StatusRequest_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    StatusRequest_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return StatusRequest_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return StatusRequest_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return StatusRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 3,
    kFlagFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional int32 flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.StatusRequest.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::StatusRequest_Type type() const;
  void set_type(::msg::StatusRequest_Type value);
  private:
  ::msg::StatusRequest_Type _internal_type() const;
  void _internal_set_type(::msg::StatusRequest_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  int type_;
  friend struct ::TableStruct_Status_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusResponse& default_instance();

  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return CreateMaybeMessage<StatusResponse>(nullptr);
  }

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Status_2eproto);
    return ::descriptor_table_Status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 3,
    kResultFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // optional string text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // required int32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  bool flag_;
  friend struct ::TableStruct_Status_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Status_2eproto);
    return ::descriptor_table_Status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Status_Command Command;
  static constexpr Command SET_REQ =
    Status_Command_SET_REQ;
  static constexpr Command SET_REP =
    Status_Command_SET_REP;
  static constexpr Command QUERY_REQ =
    Status_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    Status_Command_QUERY_REP;
  static inline bool Command_IsValid(int value) {
    return Status_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Status_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Status_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Status_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Status_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Status_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return Status_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusrequestFieldNumber = 2,
    kStatusresponseFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // optional .msg.StatusRequest statusrequest = 2;
  bool has_statusrequest() const;
  private:
  bool _internal_has_statusrequest() const;
  public:
  void clear_statusrequest();
  const ::msg::StatusRequest& statusrequest() const;
  ::msg::StatusRequest* release_statusrequest();
  ::msg::StatusRequest* mutable_statusrequest();
  void set_allocated_statusrequest(::msg::StatusRequest* statusrequest);
  private:
  const ::msg::StatusRequest& _internal_statusrequest() const;
  ::msg::StatusRequest* _internal_mutable_statusrequest();
  public:
  void unsafe_arena_set_allocated_statusrequest(
      ::msg::StatusRequest* statusrequest);
  ::msg::StatusRequest* unsafe_arena_release_statusrequest();

  // optional .msg.StatusResponse statusresponse = 3;
  bool has_statusresponse() const;
  private:
  bool _internal_has_statusresponse() const;
  public:
  void clear_statusresponse();
  const ::msg::StatusResponse& statusresponse() const;
  ::msg::StatusResponse* release_statusresponse();
  ::msg::StatusResponse* mutable_statusresponse();
  void set_allocated_statusresponse(::msg::StatusResponse* statusresponse);
  private:
  const ::msg::StatusResponse& _internal_statusresponse() const;
  ::msg::StatusResponse* _internal_mutable_statusresponse();
  public:
  void unsafe_arena_set_allocated_statusresponse(
      ::msg::StatusResponse* statusresponse);
  ::msg::StatusResponse* unsafe_arena_release_statusresponse();

  // required .msg.Status.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::Status_Command command() const;
  void set_command(::msg::Status_Command value);
  private:
  ::msg::Status_Command _internal_command() const;
  void _internal_set_command(::msg::Status_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::StatusRequest* statusrequest_;
  ::msg::StatusResponse* statusresponse_;
  int command_;
  friend struct ::TableStruct_Status_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusRequest

// required .msg.StatusRequest.Type type = 1;
inline bool StatusRequest::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StatusRequest::has_type() const {
  return _internal_has_type();
}
inline void StatusRequest::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::StatusRequest_Type StatusRequest::_internal_type() const {
  return static_cast< ::msg::StatusRequest_Type >(type_);
}
inline ::msg::StatusRequest_Type StatusRequest::type() const {
  // @@protoc_insertion_point(field_get:msg.StatusRequest.type)
  return _internal_type();
}
inline void StatusRequest::_internal_set_type(::msg::StatusRequest_Type value) {
  assert(::msg::StatusRequest_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void StatusRequest::set_type(::msg::StatusRequest_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.StatusRequest.type)
}

// optional int32 flag = 2;
inline bool StatusRequest::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatusRequest::has_flag() const {
  return _internal_has_flag();
}
inline void StatusRequest::clear_flag() {
  flag_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusRequest::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusRequest::flag() const {
  // @@protoc_insertion_point(field_get:msg.StatusRequest.flag)
  return _internal_flag();
}
inline void StatusRequest::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  flag_ = value;
}
inline void StatusRequest::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:msg.StatusRequest.flag)
}

// optional string text = 3;
inline bool StatusRequest::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusRequest::has_text() const {
  return _internal_has_text();
}
inline void StatusRequest::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatusRequest::text() const {
  // @@protoc_insertion_point(field_get:msg.StatusRequest.text)
  return _internal_text();
}
inline void StatusRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:msg.StatusRequest.text)
}
inline std::string* StatusRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:msg.StatusRequest.text)
  return _internal_mutable_text();
}
inline const std::string& StatusRequest::_internal_text() const {
  return text_.Get();
}
inline void StatusRequest::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusRequest::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.StatusRequest.text)
}
inline void StatusRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.StatusRequest.text)
}
inline void StatusRequest::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.StatusRequest.text)
}
inline std::string* StatusRequest::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusRequest::release_text() {
  // @@protoc_insertion_point(field_release:msg.StatusRequest.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.StatusRequest.text)
}

// -------------------------------------------------------------------

// StatusResponse

// required int32 result = 1;
inline bool StatusResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatusResponse::has_result() const {
  return _internal_has_result();
}
inline void StatusResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusResponse::result() const {
  // @@protoc_insertion_point(field_get:msg.StatusResponse.result)
  return _internal_result();
}
inline void StatusResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void StatusResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:msg.StatusResponse.result)
}

// optional bool flag = 2;
inline bool StatusResponse::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StatusResponse::has_flag() const {
  return _internal_has_flag();
}
inline void StatusResponse::clear_flag() {
  flag_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool StatusResponse::_internal_flag() const {
  return flag_;
}
inline bool StatusResponse::flag() const {
  // @@protoc_insertion_point(field_get:msg.StatusResponse.flag)
  return _internal_flag();
}
inline void StatusResponse::_internal_set_flag(bool value) {
  _has_bits_[0] |= 0x00000004u;
  flag_ = value;
}
inline void StatusResponse::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:msg.StatusResponse.flag)
}

// optional string text = 3;
inline bool StatusResponse::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusResponse::has_text() const {
  return _internal_has_text();
}
inline void StatusResponse::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatusResponse::text() const {
  // @@protoc_insertion_point(field_get:msg.StatusResponse.text)
  return _internal_text();
}
inline void StatusResponse::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:msg.StatusResponse.text)
}
inline std::string* StatusResponse::mutable_text() {
  // @@protoc_insertion_point(field_mutable:msg.StatusResponse.text)
  return _internal_mutable_text();
}
inline const std::string& StatusResponse::_internal_text() const {
  return text_.Get();
}
inline void StatusResponse::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusResponse::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.StatusResponse.text)
}
inline void StatusResponse::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.StatusResponse.text)
}
inline void StatusResponse::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.StatusResponse.text)
}
inline std::string* StatusResponse::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusResponse::release_text() {
  // @@protoc_insertion_point(field_release:msg.StatusResponse.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusResponse::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.StatusResponse.text)
}

// -------------------------------------------------------------------

// Status

// required .msg.Status.Command command = 1;
inline bool Status::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Status::has_command() const {
  return _internal_has_command();
}
inline void Status::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::Status_Command Status::_internal_command() const {
  return static_cast< ::msg::Status_Command >(command_);
}
inline ::msg::Status_Command Status::command() const {
  // @@protoc_insertion_point(field_get:msg.Status.command)
  return _internal_command();
}
inline void Status::_internal_set_command(::msg::Status_Command value) {
  assert(::msg::Status_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void Status::set_command(::msg::Status_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.Status.command)
}

// optional .msg.StatusRequest statusrequest = 2;
inline bool Status::_internal_has_statusrequest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || statusrequest_ != nullptr);
  return value;
}
inline bool Status::has_statusrequest() const {
  return _internal_has_statusrequest();
}
inline void Status::clear_statusrequest() {
  if (statusrequest_ != nullptr) statusrequest_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::StatusRequest& Status::_internal_statusrequest() const {
  const ::msg::StatusRequest* p = statusrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::StatusRequest&>(
      ::msg::_StatusRequest_default_instance_);
}
inline const ::msg::StatusRequest& Status::statusrequest() const {
  // @@protoc_insertion_point(field_get:msg.Status.statusrequest)
  return _internal_statusrequest();
}
inline void Status::unsafe_arena_set_allocated_statusrequest(
    ::msg::StatusRequest* statusrequest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusrequest_);
  }
  statusrequest_ = statusrequest;
  if (statusrequest) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Status.statusrequest)
}
inline ::msg::StatusRequest* Status::release_statusrequest() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::StatusRequest* temp = statusrequest_;
  statusrequest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::StatusRequest* Status::unsafe_arena_release_statusrequest() {
  // @@protoc_insertion_point(field_release:msg.Status.statusrequest)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::StatusRequest* temp = statusrequest_;
  statusrequest_ = nullptr;
  return temp;
}
inline ::msg::StatusRequest* Status::_internal_mutable_statusrequest() {
  _has_bits_[0] |= 0x00000001u;
  if (statusrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::StatusRequest>(GetArena());
    statusrequest_ = p;
  }
  return statusrequest_;
}
inline ::msg::StatusRequest* Status::mutable_statusrequest() {
  // @@protoc_insertion_point(field_mutable:msg.Status.statusrequest)
  return _internal_mutable_statusrequest();
}
inline void Status::set_allocated_statusrequest(::msg::StatusRequest* statusrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete statusrequest_;
  }
  if (statusrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(statusrequest);
    if (message_arena != submessage_arena) {
      statusrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusrequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  statusrequest_ = statusrequest;
  // @@protoc_insertion_point(field_set_allocated:msg.Status.statusrequest)
}

// optional .msg.StatusResponse statusresponse = 3;
inline bool Status::_internal_has_statusresponse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || statusresponse_ != nullptr);
  return value;
}
inline bool Status::has_statusresponse() const {
  return _internal_has_statusresponse();
}
inline void Status::clear_statusresponse() {
  if (statusresponse_ != nullptr) statusresponse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::StatusResponse& Status::_internal_statusresponse() const {
  const ::msg::StatusResponse* p = statusresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::StatusResponse&>(
      ::msg::_StatusResponse_default_instance_);
}
inline const ::msg::StatusResponse& Status::statusresponse() const {
  // @@protoc_insertion_point(field_get:msg.Status.statusresponse)
  return _internal_statusresponse();
}
inline void Status::unsafe_arena_set_allocated_statusresponse(
    ::msg::StatusResponse* statusresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statusresponse_);
  }
  statusresponse_ = statusresponse;
  if (statusresponse) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Status.statusresponse)
}
inline ::msg::StatusResponse* Status::release_statusresponse() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::StatusResponse* temp = statusresponse_;
  statusresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::StatusResponse* Status::unsafe_arena_release_statusresponse() {
  // @@protoc_insertion_point(field_release:msg.Status.statusresponse)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::StatusResponse* temp = statusresponse_;
  statusresponse_ = nullptr;
  return temp;
}
inline ::msg::StatusResponse* Status::_internal_mutable_statusresponse() {
  _has_bits_[0] |= 0x00000002u;
  if (statusresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::StatusResponse>(GetArena());
    statusresponse_ = p;
  }
  return statusresponse_;
}
inline ::msg::StatusResponse* Status::mutable_statusresponse() {
  // @@protoc_insertion_point(field_mutable:msg.Status.statusresponse)
  return _internal_mutable_statusresponse();
}
inline void Status::set_allocated_statusresponse(::msg::StatusResponse* statusresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete statusresponse_;
  }
  if (statusresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(statusresponse);
    if (message_arena != submessage_arena) {
      statusresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  statusresponse_ = statusresponse;
  // @@protoc_insertion_point(field_set_allocated:msg.Status.statusresponse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::StatusRequest_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::StatusRequest_Type>() {
  return ::msg::StatusRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::Status_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Status_Command>() {
  return ::msg::Status_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Status_2eproto
