// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Device_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Device_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Device_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Device_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Device_2eproto;
namespace msg {
class Camera;
class CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceRequest;
class DeviceRequestDefaultTypeInternal;
extern DeviceRequestDefaultTypeInternal _DeviceRequest_default_instance_;
class DeviceResponse;
class DeviceResponseDefaultTypeInternal;
extern DeviceResponseDefaultTypeInternal _DeviceResponse_default_instance_;
class Embedded;
class EmbeddedDefaultTypeInternal;
extern EmbeddedDefaultTypeInternal _Embedded_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Camera* Arena::CreateMaybeMessage<::msg::Camera>(Arena*);
template<> ::msg::Device* Arena::CreateMaybeMessage<::msg::Device>(Arena*);
template<> ::msg::DeviceRequest* Arena::CreateMaybeMessage<::msg::DeviceRequest>(Arena*);
template<> ::msg::DeviceResponse* Arena::CreateMaybeMessage<::msg::DeviceResponse>(Arena*);
template<> ::msg::Embedded* Arena::CreateMaybeMessage<::msg::Embedded>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum Embedded_Factory : int {
  Embedded_Factory_HIKVISION = 1,
  Embedded_Factory_DAHUA = 2,
  Embedded_Factory_EATON = 3
};
bool Embedded_Factory_IsValid(int value);
constexpr Embedded_Factory Embedded_Factory_Factory_MIN = Embedded_Factory_HIKVISION;
constexpr Embedded_Factory Embedded_Factory_Factory_MAX = Embedded_Factory_EATON;
constexpr int Embedded_Factory_Factory_ARRAYSIZE = Embedded_Factory_Factory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Embedded_Factory_descriptor();
template<typename T>
inline const std::string& Embedded_Factory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Embedded_Factory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Embedded_Factory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Embedded_Factory_descriptor(), enum_t_value);
}
inline bool Embedded_Factory_Parse(
    const std::string& name, Embedded_Factory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Embedded_Factory>(
    Embedded_Factory_descriptor(), name, value);
}
enum Embedded_Type : int {
  Embedded_Type_DVR = 1,
  Embedded_Type_NVR = 2,
  Embedded_Type_IPC = 3
};
bool Embedded_Type_IsValid(int value);
constexpr Embedded_Type Embedded_Type_Type_MIN = Embedded_Type_DVR;
constexpr Embedded_Type Embedded_Type_Type_MAX = Embedded_Type_IPC;
constexpr int Embedded_Type_Type_ARRAYSIZE = Embedded_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Embedded_Type_descriptor();
template<typename T>
inline const std::string& Embedded_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Embedded_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Embedded_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Embedded_Type_descriptor(), enum_t_value);
}
inline bool Embedded_Type_Parse(
    const std::string& name, Embedded_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Embedded_Type>(
    Embedded_Type_descriptor(), name, value);
}
enum Device_Command : int {
  Device_Command_NEW_REQ = 1,
  Device_Command_NEW_REP = 2,
  Device_Command_DELETE_REQ = 3,
  Device_Command_DELETE_REP = 4,
  Device_Command_MODIFY_REQ = 5,
  Device_Command_MODIFY_REP = 6,
  Device_Command_QUERY_REQ = 7,
  Device_Command_QUERY_REP = 8
};
bool Device_Command_IsValid(int value);
constexpr Device_Command Device_Command_Command_MIN = Device_Command_NEW_REQ;
constexpr Device_Command Device_Command_Command_MAX = Device_Command_QUERY_REP;
constexpr int Device_Command_Command_ARRAYSIZE = Device_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Command_descriptor();
template<typename T>
inline const std::string& Device_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_Command_descriptor(), enum_t_value);
}
inline bool Device_Command_Parse(
    const std::string& name, Device_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_Command>(
    Device_Command_descriptor(), name, value);
}
// ===================================================================

class Camera PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {};
  virtual ~Camera();

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Camera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return CreateMaybeMessage<Camera>(nullptr);
  }

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Device_2eproto);
    return ::descriptor_table_Device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
    kNicknameFieldNumber = 4,
    kIpFieldNumber = 5,
    kIndexFieldNumber = 2,
    kEnableFieldNumber = 3,
  };
  // required string cid = 1;
  bool has_cid() const;
  private:
  bool _internal_has_cid() const;
  public:
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // optional string nickname = 4;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nickname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nickname(
      std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional string ip = 5;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // required int32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool enable = 3;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Camera)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  bool enable_;
  friend struct ::TableStruct_Device_2eproto;
};
// -------------------------------------------------------------------

class Embedded PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Embedded) */ {
 public:
  inline Embedded() : Embedded(nullptr) {};
  virtual ~Embedded();

  Embedded(const Embedded& from);
  Embedded(Embedded&& from) noexcept
    : Embedded() {
    *this = ::std::move(from);
  }

  inline Embedded& operator=(const Embedded& from) {
    CopyFrom(from);
    return *this;
  }
  inline Embedded& operator=(Embedded&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Embedded& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Embedded* internal_default_instance() {
    return reinterpret_cast<const Embedded*>(
               &_Embedded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Embedded& a, Embedded& b) {
    a.Swap(&b);
  }
  inline void Swap(Embedded* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Embedded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Embedded* New() const final {
    return CreateMaybeMessage<Embedded>(nullptr);
  }

  Embedded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Embedded>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Embedded& from);
  void MergeFrom(const Embedded& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Embedded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Embedded";
  }
  protected:
  explicit Embedded(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Device_2eproto);
    return ::descriptor_table_Device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Embedded_Factory Factory;
  static constexpr Factory HIKVISION =
    Embedded_Factory_HIKVISION;
  static constexpr Factory DAHUA =
    Embedded_Factory_DAHUA;
  static constexpr Factory EATON =
    Embedded_Factory_EATON;
  static inline bool Factory_IsValid(int value) {
    return Embedded_Factory_IsValid(value);
  }
  static constexpr Factory Factory_MIN =
    Embedded_Factory_Factory_MIN;
  static constexpr Factory Factory_MAX =
    Embedded_Factory_Factory_MAX;
  static constexpr int Factory_ARRAYSIZE =
    Embedded_Factory_Factory_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Factory_descriptor() {
    return Embedded_Factory_descriptor();
  }
  template<typename T>
  static inline const std::string& Factory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Factory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Factory_Name.");
    return Embedded_Factory_Name(enum_t_value);
  }
  static inline bool Factory_Parse(const std::string& name,
      Factory* value) {
    return Embedded_Factory_Parse(name, value);
  }

  typedef Embedded_Type Type;
  static constexpr Type DVR =
    Embedded_Type_DVR;
  static constexpr Type NVR =
    Embedded_Type_NVR;
  static constexpr Type IPC =
    Embedded_Type_IPC;
  static inline bool Type_IsValid(int value) {
    return Embedded_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Embedded_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Embedded_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Embedded_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Embedded_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Embedded_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Embedded_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCamerasFieldNumber = 10,
    kNameFieldNumber = 4,
    kPasswordFieldNumber = 5,
    kIpFieldNumber = 6,
    kDidFieldNumber = 8,
    kNicknameFieldNumber = 9,
    kEnableFieldNumber = 1,
    kPortFieldNumber = 7,
    kFactoryFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated .msg.Camera cameras = 10;
  int cameras_size() const;
  private:
  int _internal_cameras_size() const;
  public:
  void clear_cameras();
  ::msg::Camera* mutable_cameras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera >*
      mutable_cameras();
  private:
  const ::msg::Camera& _internal_cameras(int index) const;
  ::msg::Camera* _internal_add_cameras();
  public:
  const ::msg::Camera& cameras(int index) const;
  ::msg::Camera* add_cameras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera >&
      cameras() const;

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string password = 5;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string ip = 6;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string did = 8;
  bool has_did() const;
  private:
  bool _internal_has_did() const;
  public:
  void clear_did();
  const std::string& did() const;
  void set_did(const std::string& value);
  void set_did(std::string&& value);
  void set_did(const char* value);
  void set_did(const char* value, size_t size);
  std::string* mutable_did();
  std::string* release_did();
  void set_allocated_did(std::string* did);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_did();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_did(
      std::string* did);
  private:
  const std::string& _internal_did() const;
  void _internal_set_did(const std::string& value);
  std::string* _internal_mutable_did();
  public:

  // optional string nickname = 9;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nickname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nickname(
      std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // required bool enable = 1 [default = false];
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional int32 port = 7;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .msg.Embedded.Factory factory = 2;
  bool has_factory() const;
  private:
  bool _internal_has_factory() const;
  public:
  void clear_factory();
  ::msg::Embedded_Factory factory() const;
  void set_factory(::msg::Embedded_Factory value);
  private:
  ::msg::Embedded_Factory _internal_factory() const;
  void _internal_set_factory(::msg::Embedded_Factory value);
  public:

  // optional .msg.Embedded.Type type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::Embedded_Type type() const;
  void set_type(::msg::Embedded_Type value);
  private:
  ::msg::Embedded_Type _internal_type() const;
  void _internal_set_type(::msg::Embedded_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Embedded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera > cameras_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr did_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int factory_;
  int type_;
  friend struct ::TableStruct_Device_2eproto;
};
// -------------------------------------------------------------------

class DeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DeviceRequest) */ {
 public:
  inline DeviceRequest() : DeviceRequest(nullptr) {};
  virtual ~DeviceRequest();

  DeviceRequest(const DeviceRequest& from);
  DeviceRequest(DeviceRequest&& from) noexcept
    : DeviceRequest() {
    *this = ::std::move(from);
  }

  inline DeviceRequest& operator=(const DeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRequest& operator=(DeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceRequest*>(
               &_DeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceRequest& a, DeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceRequest* New() const final {
    return CreateMaybeMessage<DeviceRequest>(nullptr);
  }

  DeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceRequest& from);
  void MergeFrom(const DeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DeviceRequest";
  }
  protected:
  explicit DeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Device_2eproto);
    return ::descriptor_table_Device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDidFieldNumber = 2,
    kEmbeddedFieldNumber = 1,
  };
  // optional string did = 2;
  bool has_did() const;
  private:
  bool _internal_has_did() const;
  public:
  void clear_did();
  const std::string& did() const;
  void set_did(const std::string& value);
  void set_did(std::string&& value);
  void set_did(const char* value);
  void set_did(const char* value, size_t size);
  std::string* mutable_did();
  std::string* release_did();
  void set_allocated_did(std::string* did);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_did();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_did(
      std::string* did);
  private:
  const std::string& _internal_did() const;
  void _internal_set_did(const std::string& value);
  std::string* _internal_mutable_did();
  public:

  // optional .msg.Embedded embedded = 1;
  bool has_embedded() const;
  private:
  bool _internal_has_embedded() const;
  public:
  void clear_embedded();
  const ::msg::Embedded& embedded() const;
  ::msg::Embedded* release_embedded();
  ::msg::Embedded* mutable_embedded();
  void set_allocated_embedded(::msg::Embedded* embedded);
  private:
  const ::msg::Embedded& _internal_embedded() const;
  ::msg::Embedded* _internal_mutable_embedded();
  public:
  void unsafe_arena_set_allocated_embedded(
      ::msg::Embedded* embedded);
  ::msg::Embedded* unsafe_arena_release_embedded();

  // @@protoc_insertion_point(class_scope:msg.DeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr did_;
  ::msg::Embedded* embedded_;
  friend struct ::TableStruct_Device_2eproto;
};
// -------------------------------------------------------------------

class DeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DeviceResponse) */ {
 public:
  inline DeviceResponse() : DeviceResponse(nullptr) {};
  virtual ~DeviceResponse();

  DeviceResponse(const DeviceResponse& from);
  DeviceResponse(DeviceResponse&& from) noexcept
    : DeviceResponse() {
    *this = ::std::move(from);
  }

  inline DeviceResponse& operator=(const DeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceResponse& operator=(DeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceResponse*>(
               &_DeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceResponse& a, DeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceResponse* New() const final {
    return CreateMaybeMessage<DeviceResponse>(nullptr);
  }

  DeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceResponse& from);
  void MergeFrom(const DeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DeviceResponse";
  }
  protected:
  explicit DeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Device_2eproto);
    return ::descriptor_table_Device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbeddedsFieldNumber = 3,
    kDidFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .msg.Embedded embeddeds = 3;
  int embeddeds_size() const;
  private:
  int _internal_embeddeds_size() const;
  public:
  void clear_embeddeds();
  ::msg::Embedded* mutable_embeddeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Embedded >*
      mutable_embeddeds();
  private:
  const ::msg::Embedded& _internal_embeddeds(int index) const;
  ::msg::Embedded* _internal_add_embeddeds();
  public:
  const ::msg::Embedded& embeddeds(int index) const;
  ::msg::Embedded* add_embeddeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Embedded >&
      embeddeds() const;

  // optional string did = 2;
  bool has_did() const;
  private:
  bool _internal_has_did() const;
  public:
  void clear_did();
  const std::string& did() const;
  void set_did(const std::string& value);
  void set_did(std::string&& value);
  void set_did(const char* value);
  void set_did(const char* value, size_t size);
  std::string* mutable_did();
  std::string* release_did();
  void set_allocated_did(std::string* did);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_did();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_did(
      std::string* did);
  private:
  const std::string& _internal_did() const;
  void _internal_set_did(const std::string& value);
  std::string* _internal_mutable_did();
  public:

  // required int32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.DeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Embedded > embeddeds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr did_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_Device_2eproto;
};
// -------------------------------------------------------------------

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Device) */ {
 public:
  inline Device() : Device(nullptr) {};
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Device_2eproto);
    return ::descriptor_table_Device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Device_Command Command;
  static constexpr Command NEW_REQ =
    Device_Command_NEW_REQ;
  static constexpr Command NEW_REP =
    Device_Command_NEW_REP;
  static constexpr Command DELETE_REQ =
    Device_Command_DELETE_REQ;
  static constexpr Command DELETE_REP =
    Device_Command_DELETE_REP;
  static constexpr Command MODIFY_REQ =
    Device_Command_MODIFY_REQ;
  static constexpr Command MODIFY_REP =
    Device_Command_MODIFY_REP;
  static constexpr Command QUERY_REQ =
    Device_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    Device_Command_QUERY_REP;
  static inline bool Command_IsValid(int value) {
    return Device_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Device_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Device_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Device_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Device_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Device_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(const std::string& name,
      Command* value) {
    return Device_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDevicerequestFieldNumber = 2,
    kDeviceresponseFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // optional .msg.DeviceRequest devicerequest = 2;
  bool has_devicerequest() const;
  private:
  bool _internal_has_devicerequest() const;
  public:
  void clear_devicerequest();
  const ::msg::DeviceRequest& devicerequest() const;
  ::msg::DeviceRequest* release_devicerequest();
  ::msg::DeviceRequest* mutable_devicerequest();
  void set_allocated_devicerequest(::msg::DeviceRequest* devicerequest);
  private:
  const ::msg::DeviceRequest& _internal_devicerequest() const;
  ::msg::DeviceRequest* _internal_mutable_devicerequest();
  public:
  void unsafe_arena_set_allocated_devicerequest(
      ::msg::DeviceRequest* devicerequest);
  ::msg::DeviceRequest* unsafe_arena_release_devicerequest();

  // optional .msg.DeviceResponse deviceresponse = 3;
  bool has_deviceresponse() const;
  private:
  bool _internal_has_deviceresponse() const;
  public:
  void clear_deviceresponse();
  const ::msg::DeviceResponse& deviceresponse() const;
  ::msg::DeviceResponse* release_deviceresponse();
  ::msg::DeviceResponse* mutable_deviceresponse();
  void set_allocated_deviceresponse(::msg::DeviceResponse* deviceresponse);
  private:
  const ::msg::DeviceResponse& _internal_deviceresponse() const;
  ::msg::DeviceResponse* _internal_mutable_deviceresponse();
  public:
  void unsafe_arena_set_allocated_deviceresponse(
      ::msg::DeviceResponse* deviceresponse);
  ::msg::DeviceResponse* unsafe_arena_release_deviceresponse();

  // required .msg.Device.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::Device_Command command() const;
  void set_command(::msg::Device_Command value);
  private:
  ::msg::Device_Command _internal_command() const;
  void _internal_set_command(::msg::Device_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::DeviceRequest* devicerequest_;
  ::msg::DeviceResponse* deviceresponse_;
  int command_;
  friend struct ::TableStruct_Device_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Camera

// required string cid = 1;
inline bool Camera::_internal_has_cid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Camera::has_cid() const {
  return _internal_has_cid();
}
inline void Camera::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Camera::cid() const {
  // @@protoc_insertion_point(field_get:msg.Camera.cid)
  return _internal_cid();
}
inline void Camera::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:msg.Camera.cid)
}
inline std::string* Camera::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:msg.Camera.cid)
  return _internal_mutable_cid();
}
inline const std::string& Camera::_internal_cid() const {
  return cid_.Get();
}
inline void Camera::_internal_set_cid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Camera::set_cid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Camera.cid)
}
inline void Camera::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Camera.cid)
}
inline void Camera::set_cid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Camera.cid)
}
inline std::string* Camera::_internal_mutable_cid() {
  _has_bits_[0] |= 0x00000001u;
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Camera::release_cid() {
  // @@protoc_insertion_point(field_release:msg.Camera.cid)
  if (!_internal_has_cid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Camera::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Camera.cid)
}
inline std::string* Camera::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Camera.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Camera::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Camera.cid)
}

// required int32 index = 2;
inline bool Camera::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Camera::has_index() const {
  return _internal_has_index();
}
inline void Camera::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Camera::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Camera::index() const {
  // @@protoc_insertion_point(field_get:msg.Camera.index)
  return _internal_index();
}
inline void Camera::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  index_ = value;
}
inline void Camera::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:msg.Camera.index)
}

// required bool enable = 3;
inline bool Camera::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Camera::has_enable() const {
  return _internal_has_enable();
}
inline void Camera::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Camera::_internal_enable() const {
  return enable_;
}
inline bool Camera::enable() const {
  // @@protoc_insertion_point(field_get:msg.Camera.enable)
  return _internal_enable();
}
inline void Camera::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_ = value;
}
inline void Camera::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:msg.Camera.enable)
}

// optional string nickname = 4;
inline bool Camera::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Camera::has_nickname() const {
  return _internal_has_nickname();
}
inline void Camera::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Camera::nickname() const {
  // @@protoc_insertion_point(field_get:msg.Camera.nickname)
  return _internal_nickname();
}
inline void Camera::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:msg.Camera.nickname)
}
inline std::string* Camera::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:msg.Camera.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Camera::_internal_nickname() const {
  return nickname_.Get();
}
inline void Camera::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Camera::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Camera.nickname)
}
inline void Camera::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Camera.nickname)
}
inline void Camera::set_nickname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Camera.nickname)
}
inline std::string* Camera::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000002u;
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Camera::release_nickname() {
  // @@protoc_insertion_point(field_release:msg.Camera.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Camera::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Camera.nickname)
}
inline std::string* Camera::unsafe_arena_release_nickname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Camera.nickname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return nickname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Camera::unsafe_arena_set_allocated_nickname(
    std::string* nickname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nickname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nickname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Camera.nickname)
}

// optional string ip = 5;
inline bool Camera::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Camera::has_ip() const {
  return _internal_has_ip();
}
inline void Camera::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Camera::ip() const {
  // @@protoc_insertion_point(field_get:msg.Camera.ip)
  return _internal_ip();
}
inline void Camera::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:msg.Camera.ip)
}
inline std::string* Camera::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:msg.Camera.ip)
  return _internal_mutable_ip();
}
inline const std::string& Camera::_internal_ip() const {
  return ip_.Get();
}
inline void Camera::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Camera::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Camera.ip)
}
inline void Camera::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Camera.ip)
}
inline void Camera::set_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Camera.ip)
}
inline std::string* Camera::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000004u;
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Camera::release_ip() {
  // @@protoc_insertion_point(field_release:msg.Camera.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Camera::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Camera.ip)
}
inline std::string* Camera::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Camera.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Camera::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Camera.ip)
}

// -------------------------------------------------------------------

// Embedded

// required bool enable = 1 [default = false];
inline bool Embedded::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Embedded::has_enable() const {
  return _internal_has_enable();
}
inline void Embedded::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Embedded::_internal_enable() const {
  return enable_;
}
inline bool Embedded::enable() const {
  // @@protoc_insertion_point(field_get:msg.Embedded.enable)
  return _internal_enable();
}
inline void Embedded::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_ = value;
}
inline void Embedded::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:msg.Embedded.enable)
}

// optional .msg.Embedded.Factory factory = 2;
inline bool Embedded::_internal_has_factory() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Embedded::has_factory() const {
  return _internal_has_factory();
}
inline void Embedded::clear_factory() {
  factory_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::msg::Embedded_Factory Embedded::_internal_factory() const {
  return static_cast< ::msg::Embedded_Factory >(factory_);
}
inline ::msg::Embedded_Factory Embedded::factory() const {
  // @@protoc_insertion_point(field_get:msg.Embedded.factory)
  return _internal_factory();
}
inline void Embedded::_internal_set_factory(::msg::Embedded_Factory value) {
  assert(::msg::Embedded_Factory_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  factory_ = value;
}
inline void Embedded::set_factory(::msg::Embedded_Factory value) {
  _internal_set_factory(value);
  // @@protoc_insertion_point(field_set:msg.Embedded.factory)
}

// optional .msg.Embedded.Type type = 3;
inline bool Embedded::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Embedded::has_type() const {
  return _internal_has_type();
}
inline void Embedded::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::msg::Embedded_Type Embedded::_internal_type() const {
  return static_cast< ::msg::Embedded_Type >(type_);
}
inline ::msg::Embedded_Type Embedded::type() const {
  // @@protoc_insertion_point(field_get:msg.Embedded.type)
  return _internal_type();
}
inline void Embedded::_internal_set_type(::msg::Embedded_Type value) {
  assert(::msg::Embedded_Type_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  type_ = value;
}
inline void Embedded::set_type(::msg::Embedded_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.Embedded.type)
}

// optional string name = 4;
inline bool Embedded::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Embedded::has_name() const {
  return _internal_has_name();
}
inline void Embedded::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Embedded::name() const {
  // @@protoc_insertion_point(field_get:msg.Embedded.name)
  return _internal_name();
}
inline void Embedded::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.Embedded.name)
}
inline std::string* Embedded::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.Embedded.name)
  return _internal_mutable_name();
}
inline const std::string& Embedded::_internal_name() const {
  return name_.Get();
}
inline void Embedded::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Embedded::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Embedded.name)
}
inline void Embedded::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Embedded.name)
}
inline void Embedded::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Embedded.name)
}
inline std::string* Embedded::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Embedded::release_name() {
  // @@protoc_insertion_point(field_release:msg.Embedded.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Embedded::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Embedded.name)
}
inline std::string* Embedded::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Embedded.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Embedded::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Embedded.name)
}

// optional string password = 5;
inline bool Embedded::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Embedded::has_password() const {
  return _internal_has_password();
}
inline void Embedded::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Embedded::password() const {
  // @@protoc_insertion_point(field_get:msg.Embedded.password)
  return _internal_password();
}
inline void Embedded::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:msg.Embedded.password)
}
inline std::string* Embedded::mutable_password() {
  // @@protoc_insertion_point(field_mutable:msg.Embedded.password)
  return _internal_mutable_password();
}
inline const std::string& Embedded::_internal_password() const {
  return password_.Get();
}
inline void Embedded::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Embedded::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Embedded.password)
}
inline void Embedded::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Embedded.password)
}
inline void Embedded::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Embedded.password)
}
inline std::string* Embedded::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Embedded::release_password() {
  // @@protoc_insertion_point(field_release:msg.Embedded.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Embedded::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Embedded.password)
}
inline std::string* Embedded::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Embedded.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Embedded::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Embedded.password)
}

// optional string ip = 6;
inline bool Embedded::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Embedded::has_ip() const {
  return _internal_has_ip();
}
inline void Embedded::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Embedded::ip() const {
  // @@protoc_insertion_point(field_get:msg.Embedded.ip)
  return _internal_ip();
}
inline void Embedded::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:msg.Embedded.ip)
}
inline std::string* Embedded::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:msg.Embedded.ip)
  return _internal_mutable_ip();
}
inline const std::string& Embedded::_internal_ip() const {
  return ip_.Get();
}
inline void Embedded::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Embedded::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Embedded.ip)
}
inline void Embedded::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Embedded.ip)
}
inline void Embedded::set_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Embedded.ip)
}
inline std::string* Embedded::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000004u;
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Embedded::release_ip() {
  // @@protoc_insertion_point(field_release:msg.Embedded.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Embedded::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Embedded.ip)
}
inline std::string* Embedded::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Embedded.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Embedded::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Embedded.ip)
}

// optional int32 port = 7;
inline bool Embedded::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Embedded::has_port() const {
  return _internal_has_port();
}
inline void Embedded::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Embedded::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Embedded::port() const {
  // @@protoc_insertion_point(field_get:msg.Embedded.port)
  return _internal_port();
}
inline void Embedded::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  port_ = value;
}
inline void Embedded::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg.Embedded.port)
}

// optional string did = 8;
inline bool Embedded::_internal_has_did() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Embedded::has_did() const {
  return _internal_has_did();
}
inline void Embedded::clear_did() {
  did_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Embedded::did() const {
  // @@protoc_insertion_point(field_get:msg.Embedded.did)
  return _internal_did();
}
inline void Embedded::set_did(const std::string& value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:msg.Embedded.did)
}
inline std::string* Embedded::mutable_did() {
  // @@protoc_insertion_point(field_mutable:msg.Embedded.did)
  return _internal_mutable_did();
}
inline const std::string& Embedded::_internal_did() const {
  return did_.Get();
}
inline void Embedded::_internal_set_did(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Embedded::set_did(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  did_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Embedded.did)
}
inline void Embedded::set_did(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Embedded.did)
}
inline void Embedded::set_did(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Embedded.did)
}
inline std::string* Embedded::_internal_mutable_did() {
  _has_bits_[0] |= 0x00000008u;
  return did_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Embedded::release_did() {
  // @@protoc_insertion_point(field_release:msg.Embedded.did)
  if (!_internal_has_did()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return did_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Embedded::set_allocated_did(std::string* did) {
  if (did != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  did_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), did,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Embedded.did)
}
inline std::string* Embedded::unsafe_arena_release_did() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Embedded.did)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return did_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Embedded::unsafe_arena_set_allocated_did(
    std::string* did) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (did != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  did_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      did, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Embedded.did)
}

// optional string nickname = 9;
inline bool Embedded::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Embedded::has_nickname() const {
  return _internal_has_nickname();
}
inline void Embedded::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Embedded::nickname() const {
  // @@protoc_insertion_point(field_get:msg.Embedded.nickname)
  return _internal_nickname();
}
inline void Embedded::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:msg.Embedded.nickname)
}
inline std::string* Embedded::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:msg.Embedded.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Embedded::_internal_nickname() const {
  return nickname_.Get();
}
inline void Embedded::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Embedded::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Embedded.nickname)
}
inline void Embedded::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Embedded.nickname)
}
inline void Embedded::set_nickname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Embedded.nickname)
}
inline std::string* Embedded::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000010u;
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Embedded::release_nickname() {
  // @@protoc_insertion_point(field_release:msg.Embedded.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Embedded::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Embedded.nickname)
}
inline std::string* Embedded::unsafe_arena_release_nickname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Embedded.nickname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return nickname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Embedded::unsafe_arena_set_allocated_nickname(
    std::string* nickname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nickname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nickname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Embedded.nickname)
}

// repeated .msg.Camera cameras = 10;
inline int Embedded::_internal_cameras_size() const {
  return cameras_.size();
}
inline int Embedded::cameras_size() const {
  return _internal_cameras_size();
}
inline void Embedded::clear_cameras() {
  cameras_.Clear();
}
inline ::msg::Camera* Embedded::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:msg.Embedded.cameras)
  return cameras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera >*
Embedded::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:msg.Embedded.cameras)
  return &cameras_;
}
inline const ::msg::Camera& Embedded::_internal_cameras(int index) const {
  return cameras_.Get(index);
}
inline const ::msg::Camera& Embedded::cameras(int index) const {
  // @@protoc_insertion_point(field_get:msg.Embedded.cameras)
  return _internal_cameras(index);
}
inline ::msg::Camera* Embedded::_internal_add_cameras() {
  return cameras_.Add();
}
inline ::msg::Camera* Embedded::add_cameras() {
  // @@protoc_insertion_point(field_add:msg.Embedded.cameras)
  return _internal_add_cameras();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera >&
Embedded::cameras() const {
  // @@protoc_insertion_point(field_list:msg.Embedded.cameras)
  return cameras_;
}

// -------------------------------------------------------------------

// DeviceRequest

// optional .msg.Embedded embedded = 1;
inline bool DeviceRequest::_internal_has_embedded() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || embedded_ != nullptr);
  return value;
}
inline bool DeviceRequest::has_embedded() const {
  return _internal_has_embedded();
}
inline void DeviceRequest::clear_embedded() {
  if (embedded_ != nullptr) embedded_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::Embedded& DeviceRequest::_internal_embedded() const {
  const ::msg::Embedded* p = embedded_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Embedded*>(
      &::msg::_Embedded_default_instance_);
}
inline const ::msg::Embedded& DeviceRequest::embedded() const {
  // @@protoc_insertion_point(field_get:msg.DeviceRequest.embedded)
  return _internal_embedded();
}
inline void DeviceRequest::unsafe_arena_set_allocated_embedded(
    ::msg::Embedded* embedded) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(embedded_);
  }
  embedded_ = embedded;
  if (embedded) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.DeviceRequest.embedded)
}
inline ::msg::Embedded* DeviceRequest::release_embedded() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::Embedded* temp = embedded_;
  embedded_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Embedded* DeviceRequest::unsafe_arena_release_embedded() {
  // @@protoc_insertion_point(field_release:msg.DeviceRequest.embedded)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::Embedded* temp = embedded_;
  embedded_ = nullptr;
  return temp;
}
inline ::msg::Embedded* DeviceRequest::_internal_mutable_embedded() {
  _has_bits_[0] |= 0x00000002u;
  if (embedded_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Embedded>(GetArena());
    embedded_ = p;
  }
  return embedded_;
}
inline ::msg::Embedded* DeviceRequest::mutable_embedded() {
  // @@protoc_insertion_point(field_mutable:msg.DeviceRequest.embedded)
  return _internal_mutable_embedded();
}
inline void DeviceRequest::set_allocated_embedded(::msg::Embedded* embedded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete embedded_;
  }
  if (embedded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(embedded);
    if (message_arena != submessage_arena) {
      embedded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedded, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  embedded_ = embedded;
  // @@protoc_insertion_point(field_set_allocated:msg.DeviceRequest.embedded)
}

// optional string did = 2;
inline bool DeviceRequest::_internal_has_did() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceRequest::has_did() const {
  return _internal_has_did();
}
inline void DeviceRequest::clear_did() {
  did_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceRequest::did() const {
  // @@protoc_insertion_point(field_get:msg.DeviceRequest.did)
  return _internal_did();
}
inline void DeviceRequest::set_did(const std::string& value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:msg.DeviceRequest.did)
}
inline std::string* DeviceRequest::mutable_did() {
  // @@protoc_insertion_point(field_mutable:msg.DeviceRequest.did)
  return _internal_mutable_did();
}
inline const std::string& DeviceRequest::_internal_did() const {
  return did_.Get();
}
inline void DeviceRequest::_internal_set_did(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRequest::set_did(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.DeviceRequest.did)
}
inline void DeviceRequest::set_did(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.DeviceRequest.did)
}
inline void DeviceRequest::set_did(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.DeviceRequest.did)
}
inline std::string* DeviceRequest::_internal_mutable_did() {
  _has_bits_[0] |= 0x00000001u;
  return did_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRequest::release_did() {
  // @@protoc_insertion_point(field_release:msg.DeviceRequest.did)
  if (!_internal_has_did()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return did_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRequest::set_allocated_did(std::string* did) {
  if (did != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  did_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), did,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.DeviceRequest.did)
}
inline std::string* DeviceRequest::unsafe_arena_release_did() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.DeviceRequest.did)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return did_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceRequest::unsafe_arena_set_allocated_did(
    std::string* did) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (did != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  did_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      did, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.DeviceRequest.did)
}

// -------------------------------------------------------------------

// DeviceResponse

// required int32 result = 1;
inline bool DeviceResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceResponse::has_result() const {
  return _internal_has_result();
}
inline void DeviceResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceResponse::result() const {
  // @@protoc_insertion_point(field_get:msg.DeviceResponse.result)
  return _internal_result();
}
inline void DeviceResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void DeviceResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:msg.DeviceResponse.result)
}

// optional string did = 2;
inline bool DeviceResponse::_internal_has_did() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceResponse::has_did() const {
  return _internal_has_did();
}
inline void DeviceResponse::clear_did() {
  did_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceResponse::did() const {
  // @@protoc_insertion_point(field_get:msg.DeviceResponse.did)
  return _internal_did();
}
inline void DeviceResponse::set_did(const std::string& value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:msg.DeviceResponse.did)
}
inline std::string* DeviceResponse::mutable_did() {
  // @@protoc_insertion_point(field_mutable:msg.DeviceResponse.did)
  return _internal_mutable_did();
}
inline const std::string& DeviceResponse::_internal_did() const {
  return did_.Get();
}
inline void DeviceResponse::_internal_set_did(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceResponse::set_did(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.DeviceResponse.did)
}
inline void DeviceResponse::set_did(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.DeviceResponse.did)
}
inline void DeviceResponse::set_did(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.DeviceResponse.did)
}
inline std::string* DeviceResponse::_internal_mutable_did() {
  _has_bits_[0] |= 0x00000001u;
  return did_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceResponse::release_did() {
  // @@protoc_insertion_point(field_release:msg.DeviceResponse.did)
  if (!_internal_has_did()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return did_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceResponse::set_allocated_did(std::string* did) {
  if (did != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  did_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), did,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.DeviceResponse.did)
}
inline std::string* DeviceResponse::unsafe_arena_release_did() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.DeviceResponse.did)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return did_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceResponse::unsafe_arena_set_allocated_did(
    std::string* did) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (did != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  did_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      did, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.DeviceResponse.did)
}

// repeated .msg.Embedded embeddeds = 3;
inline int DeviceResponse::_internal_embeddeds_size() const {
  return embeddeds_.size();
}
inline int DeviceResponse::embeddeds_size() const {
  return _internal_embeddeds_size();
}
inline void DeviceResponse::clear_embeddeds() {
  embeddeds_.Clear();
}
inline ::msg::Embedded* DeviceResponse::mutable_embeddeds(int index) {
  // @@protoc_insertion_point(field_mutable:msg.DeviceResponse.embeddeds)
  return embeddeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Embedded >*
DeviceResponse::mutable_embeddeds() {
  // @@protoc_insertion_point(field_mutable_list:msg.DeviceResponse.embeddeds)
  return &embeddeds_;
}
inline const ::msg::Embedded& DeviceResponse::_internal_embeddeds(int index) const {
  return embeddeds_.Get(index);
}
inline const ::msg::Embedded& DeviceResponse::embeddeds(int index) const {
  // @@protoc_insertion_point(field_get:msg.DeviceResponse.embeddeds)
  return _internal_embeddeds(index);
}
inline ::msg::Embedded* DeviceResponse::_internal_add_embeddeds() {
  return embeddeds_.Add();
}
inline ::msg::Embedded* DeviceResponse::add_embeddeds() {
  // @@protoc_insertion_point(field_add:msg.DeviceResponse.embeddeds)
  return _internal_add_embeddeds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Embedded >&
DeviceResponse::embeddeds() const {
  // @@protoc_insertion_point(field_list:msg.DeviceResponse.embeddeds)
  return embeddeds_;
}

// -------------------------------------------------------------------

// Device

// required .msg.Device.Command command = 1;
inline bool Device::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Device::has_command() const {
  return _internal_has_command();
}
inline void Device::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::Device_Command Device::_internal_command() const {
  return static_cast< ::msg::Device_Command >(command_);
}
inline ::msg::Device_Command Device::command() const {
  // @@protoc_insertion_point(field_get:msg.Device.command)
  return _internal_command();
}
inline void Device::_internal_set_command(::msg::Device_Command value) {
  assert(::msg::Device_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void Device::set_command(::msg::Device_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.Device.command)
}

// optional .msg.DeviceRequest devicerequest = 2;
inline bool Device::_internal_has_devicerequest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || devicerequest_ != nullptr);
  return value;
}
inline bool Device::has_devicerequest() const {
  return _internal_has_devicerequest();
}
inline void Device::clear_devicerequest() {
  if (devicerequest_ != nullptr) devicerequest_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::DeviceRequest& Device::_internal_devicerequest() const {
  const ::msg::DeviceRequest* p = devicerequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::DeviceRequest*>(
      &::msg::_DeviceRequest_default_instance_);
}
inline const ::msg::DeviceRequest& Device::devicerequest() const {
  // @@protoc_insertion_point(field_get:msg.Device.devicerequest)
  return _internal_devicerequest();
}
inline void Device::unsafe_arena_set_allocated_devicerequest(
    ::msg::DeviceRequest* devicerequest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(devicerequest_);
  }
  devicerequest_ = devicerequest;
  if (devicerequest) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Device.devicerequest)
}
inline ::msg::DeviceRequest* Device::release_devicerequest() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::DeviceRequest* temp = devicerequest_;
  devicerequest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::DeviceRequest* Device::unsafe_arena_release_devicerequest() {
  // @@protoc_insertion_point(field_release:msg.Device.devicerequest)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::DeviceRequest* temp = devicerequest_;
  devicerequest_ = nullptr;
  return temp;
}
inline ::msg::DeviceRequest* Device::_internal_mutable_devicerequest() {
  _has_bits_[0] |= 0x00000001u;
  if (devicerequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::DeviceRequest>(GetArena());
    devicerequest_ = p;
  }
  return devicerequest_;
}
inline ::msg::DeviceRequest* Device::mutable_devicerequest() {
  // @@protoc_insertion_point(field_mutable:msg.Device.devicerequest)
  return _internal_mutable_devicerequest();
}
inline void Device::set_allocated_devicerequest(::msg::DeviceRequest* devicerequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete devicerequest_;
  }
  if (devicerequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(devicerequest);
    if (message_arena != submessage_arena) {
      devicerequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devicerequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  devicerequest_ = devicerequest;
  // @@protoc_insertion_point(field_set_allocated:msg.Device.devicerequest)
}

// optional .msg.DeviceResponse deviceresponse = 3;
inline bool Device::_internal_has_deviceresponse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || deviceresponse_ != nullptr);
  return value;
}
inline bool Device::has_deviceresponse() const {
  return _internal_has_deviceresponse();
}
inline void Device::clear_deviceresponse() {
  if (deviceresponse_ != nullptr) deviceresponse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::DeviceResponse& Device::_internal_deviceresponse() const {
  const ::msg::DeviceResponse* p = deviceresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::DeviceResponse*>(
      &::msg::_DeviceResponse_default_instance_);
}
inline const ::msg::DeviceResponse& Device::deviceresponse() const {
  // @@protoc_insertion_point(field_get:msg.Device.deviceresponse)
  return _internal_deviceresponse();
}
inline void Device::unsafe_arena_set_allocated_deviceresponse(
    ::msg::DeviceResponse* deviceresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceresponse_);
  }
  deviceresponse_ = deviceresponse;
  if (deviceresponse) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Device.deviceresponse)
}
inline ::msg::DeviceResponse* Device::release_deviceresponse() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::DeviceResponse* temp = deviceresponse_;
  deviceresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::DeviceResponse* Device::unsafe_arena_release_deviceresponse() {
  // @@protoc_insertion_point(field_release:msg.Device.deviceresponse)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::DeviceResponse* temp = deviceresponse_;
  deviceresponse_ = nullptr;
  return temp;
}
inline ::msg::DeviceResponse* Device::_internal_mutable_deviceresponse() {
  _has_bits_[0] |= 0x00000002u;
  if (deviceresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::DeviceResponse>(GetArena());
    deviceresponse_ = p;
  }
  return deviceresponse_;
}
inline ::msg::DeviceResponse* Device::mutable_deviceresponse() {
  // @@protoc_insertion_point(field_mutable:msg.Device.deviceresponse)
  return _internal_mutable_deviceresponse();
}
inline void Device::set_allocated_deviceresponse(::msg::DeviceResponse* deviceresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deviceresponse_;
  }
  if (deviceresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deviceresponse);
    if (message_arena != submessage_arena) {
      deviceresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  deviceresponse_ = deviceresponse;
  // @@protoc_insertion_point(field_set_allocated:msg.Device.deviceresponse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::Embedded_Factory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Embedded_Factory>() {
  return ::msg::Embedded_Factory_descriptor();
}
template <> struct is_proto_enum< ::msg::Embedded_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Embedded_Type>() {
  return ::msg::Embedded_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::Device_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Device_Command>() {
  return ::msg::Device_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Device_2eproto
