// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Alarm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Alarm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Alarm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Alarm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Alarm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Alarm_2eproto;
namespace msg {
class Alarm;
class AlarmDefaultTypeInternal;
extern AlarmDefaultTypeInternal _Alarm_default_instance_;
class AlarmInfo;
class AlarmInfoDefaultTypeInternal;
extern AlarmInfoDefaultTypeInternal _AlarmInfo_default_instance_;
class AlarmPosition;
class AlarmPositionDefaultTypeInternal;
extern AlarmPositionDefaultTypeInternal _AlarmPosition_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Alarm* Arena::CreateMaybeMessage<::msg::Alarm>(Arena*);
template<> ::msg::AlarmInfo* Arena::CreateMaybeMessage<::msg::AlarmInfo>(Arena*);
template<> ::msg::AlarmPosition* Arena::CreateMaybeMessage<::msg::AlarmPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum AlarmInfo_Type : int {
  AlarmInfo_Type_HELMET = 1,
  AlarmInfo_Type_PHONE = 2,
  AlarmInfo_Type_SLEEP = 3,
  AlarmInfo_Type_FIGHT = 4,
  AlarmInfo_Type_ATTENDANCE_IN = 5,
  AlarmInfo_Type_ATTENDANCE_OUT = 6
};
bool AlarmInfo_Type_IsValid(int value);
constexpr AlarmInfo_Type AlarmInfo_Type_Type_MIN = AlarmInfo_Type_HELMET;
constexpr AlarmInfo_Type AlarmInfo_Type_Type_MAX = AlarmInfo_Type_ATTENDANCE_OUT;
constexpr int AlarmInfo_Type_Type_ARRAYSIZE = AlarmInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmInfo_Type_descriptor();
template<typename T>
inline const std::string& AlarmInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlarmInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlarmInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlarmInfo_Type_descriptor(), enum_t_value);
}
inline bool AlarmInfo_Type_Parse(
    const std::string& name, AlarmInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlarmInfo_Type>(
    AlarmInfo_Type_descriptor(), name, value);
}
enum Alarm_Command : int {
  Alarm_Command_NOTIFY = 1
};
bool Alarm_Command_IsValid(int value);
constexpr Alarm_Command Alarm_Command_Command_MIN = Alarm_Command_NOTIFY;
constexpr Alarm_Command Alarm_Command_Command_MAX = Alarm_Command_NOTIFY;
constexpr int Alarm_Command_Command_ARRAYSIZE = Alarm_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Alarm_Command_descriptor();
template<typename T>
inline const std::string& Alarm_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Alarm_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Alarm_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Alarm_Command_descriptor(), enum_t_value);
}
inline bool Alarm_Command_Parse(
    const std::string& name, Alarm_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Alarm_Command>(
    Alarm_Command_descriptor(), name, value);
}
// ===================================================================

class AlarmPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlarmPosition) */ {
 public:
  inline AlarmPosition() : AlarmPosition(nullptr) {};
  virtual ~AlarmPosition();

  AlarmPosition(const AlarmPosition& from);
  AlarmPosition(AlarmPosition&& from) noexcept
    : AlarmPosition() {
    *this = ::std::move(from);
  }

  inline AlarmPosition& operator=(const AlarmPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmPosition& operator=(AlarmPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmPosition* internal_default_instance() {
    return reinterpret_cast<const AlarmPosition*>(
               &_AlarmPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlarmPosition& a, AlarmPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmPosition* New() const final {
    return CreateMaybeMessage<AlarmPosition>(nullptr);
  }

  AlarmPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmPosition& from);
  void MergeFrom(const AlarmPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlarmPosition";
  }
  protected:
  explicit AlarmPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Alarm_2eproto);
    return ::descriptor_table_Alarm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 w = 3;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 h = 4;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AlarmPosition)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  friend struct ::TableStruct_Alarm_2eproto;
};
// -------------------------------------------------------------------

class AlarmInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlarmInfo) */ {
 public:
  inline AlarmInfo() : AlarmInfo(nullptr) {};
  virtual ~AlarmInfo();

  AlarmInfo(const AlarmInfo& from);
  AlarmInfo(AlarmInfo&& from) noexcept
    : AlarmInfo() {
    *this = ::std::move(from);
  }

  inline AlarmInfo& operator=(const AlarmInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmInfo& operator=(AlarmInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmInfo* internal_default_instance() {
    return reinterpret_cast<const AlarmInfo*>(
               &_AlarmInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlarmInfo& a, AlarmInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmInfo* New() const final {
    return CreateMaybeMessage<AlarmInfo>(nullptr);
  }

  AlarmInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmInfo& from);
  void MergeFrom(const AlarmInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlarmInfo";
  }
  protected:
  explicit AlarmInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Alarm_2eproto);
    return ::descriptor_table_Alarm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlarmInfo_Type Type;
  static constexpr Type HELMET =
    AlarmInfo_Type_HELMET;
  static constexpr Type PHONE =
    AlarmInfo_Type_PHONE;
  static constexpr Type SLEEP =
    AlarmInfo_Type_SLEEP;
  static constexpr Type FIGHT =
    AlarmInfo_Type_FIGHT;
  static constexpr Type ATTENDANCE_IN =
    AlarmInfo_Type_ATTENDANCE_IN;
  static constexpr Type ATTENDANCE_OUT =
    AlarmInfo_Type_ATTENDANCE_OUT;
  static inline bool Type_IsValid(int value) {
    return AlarmInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    AlarmInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    AlarmInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    AlarmInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return AlarmInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return AlarmInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return AlarmInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlarmpositionFieldNumber = 5,
    kCidFieldNumber = 2,
    kTimeFieldNumber = 3,
    kPictureFieldNumber = 4,
    kUidFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // repeated .msg.AlarmPosition alarmposition = 5;
  int alarmposition_size() const;
  private:
  int _internal_alarmposition_size() const;
  public:
  void clear_alarmposition();
  ::msg::AlarmPosition* mutable_alarmposition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlarmPosition >*
      mutable_alarmposition();
  private:
  const ::msg::AlarmPosition& _internal_alarmposition(int index) const;
  ::msg::AlarmPosition* _internal_add_alarmposition();
  public:
  const ::msg::AlarmPosition& alarmposition(int index) const;
  ::msg::AlarmPosition* add_alarmposition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlarmPosition >&
      alarmposition() const;

  // required string cid = 2;
  bool has_cid() const;
  private:
  bool _internal_has_cid() const;
  public:
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // required string time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time(
      std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // required string picture = 4;
  bool has_picture() const;
  private:
  bool _internal_has_picture() const;
  public:
  void clear_picture();
  const std::string& picture() const;
  void set_picture(const std::string& value);
  void set_picture(std::string&& value);
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  std::string* mutable_picture();
  std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_picture();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_picture(
      std::string* picture);
  private:
  const std::string& _internal_picture() const;
  void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // optional string uid = 6;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // required .msg.AlarmInfo.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::AlarmInfo_Type type() const;
  void set_type(::msg::AlarmInfo_Type value);
  private:
  ::msg::AlarmInfo_Type _internal_type() const;
  void _internal_set_type(::msg::AlarmInfo_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AlarmInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlarmPosition > alarmposition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  int type_;
  friend struct ::TableStruct_Alarm_2eproto;
};
// -------------------------------------------------------------------

class Alarm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Alarm) */ {
 public:
  inline Alarm() : Alarm(nullptr) {};
  virtual ~Alarm();

  Alarm(const Alarm& from);
  Alarm(Alarm&& from) noexcept
    : Alarm() {
    *this = ::std::move(from);
  }

  inline Alarm& operator=(const Alarm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alarm& operator=(Alarm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Alarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alarm* internal_default_instance() {
    return reinterpret_cast<const Alarm*>(
               &_Alarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Alarm& a, Alarm& b) {
    a.Swap(&b);
  }
  inline void Swap(Alarm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Alarm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Alarm* New() const final {
    return CreateMaybeMessage<Alarm>(nullptr);
  }

  Alarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Alarm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Alarm& from);
  void MergeFrom(const Alarm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alarm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Alarm";
  }
  protected:
  explicit Alarm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Alarm_2eproto);
    return ::descriptor_table_Alarm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Alarm_Command Command;
  static constexpr Command NOTIFY =
    Alarm_Command_NOTIFY;
  static inline bool Command_IsValid(int value) {
    return Alarm_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Alarm_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Alarm_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Alarm_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Alarm_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Alarm_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(const std::string& name,
      Command* value) {
    return Alarm_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlarminfoFieldNumber = 2,
    kCommandFieldNumber = 1,
  };
  // required .msg.AlarmInfo alarminfo = 2;
  bool has_alarminfo() const;
  private:
  bool _internal_has_alarminfo() const;
  public:
  void clear_alarminfo();
  const ::msg::AlarmInfo& alarminfo() const;
  ::msg::AlarmInfo* release_alarminfo();
  ::msg::AlarmInfo* mutable_alarminfo();
  void set_allocated_alarminfo(::msg::AlarmInfo* alarminfo);
  private:
  const ::msg::AlarmInfo& _internal_alarminfo() const;
  ::msg::AlarmInfo* _internal_mutable_alarminfo();
  public:
  void unsafe_arena_set_allocated_alarminfo(
      ::msg::AlarmInfo* alarminfo);
  ::msg::AlarmInfo* unsafe_arena_release_alarminfo();

  // required .msg.Alarm.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::Alarm_Command command() const;
  void set_command(::msg::Alarm_Command value);
  private:
  ::msg::Alarm_Command _internal_command() const;
  void _internal_set_command(::msg::Alarm_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Alarm)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::AlarmInfo* alarminfo_;
  int command_;
  friend struct ::TableStruct_Alarm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlarmPosition

// required int32 x = 1;
inline bool AlarmPosition::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlarmPosition::has_x() const {
  return _internal_has_x();
}
inline void AlarmPosition::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmPosition::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmPosition::x() const {
  // @@protoc_insertion_point(field_get:msg.AlarmPosition.x)
  return _internal_x();
}
inline void AlarmPosition::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void AlarmPosition::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.AlarmPosition.x)
}

// required int32 y = 2;
inline bool AlarmPosition::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AlarmPosition::has_y() const {
  return _internal_has_y();
}
inline void AlarmPosition::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmPosition::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmPosition::y() const {
  // @@protoc_insertion_point(field_get:msg.AlarmPosition.y)
  return _internal_y();
}
inline void AlarmPosition::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void AlarmPosition::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.AlarmPosition.y)
}

// required int32 w = 3;
inline bool AlarmPosition::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlarmPosition::has_w() const {
  return _internal_has_w();
}
inline void AlarmPosition::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmPosition::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmPosition::w() const {
  // @@protoc_insertion_point(field_get:msg.AlarmPosition.w)
  return _internal_w();
}
inline void AlarmPosition::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  w_ = value;
}
inline void AlarmPosition::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:msg.AlarmPosition.w)
}

// required int32 h = 4;
inline bool AlarmPosition::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AlarmPosition::has_h() const {
  return _internal_has_h();
}
inline void AlarmPosition::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmPosition::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmPosition::h() const {
  // @@protoc_insertion_point(field_get:msg.AlarmPosition.h)
  return _internal_h();
}
inline void AlarmPosition::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  h_ = value;
}
inline void AlarmPosition::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:msg.AlarmPosition.h)
}

// -------------------------------------------------------------------

// AlarmInfo

// required .msg.AlarmInfo.Type type = 1;
inline bool AlarmInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AlarmInfo::has_type() const {
  return _internal_has_type();
}
inline void AlarmInfo::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::msg::AlarmInfo_Type AlarmInfo::_internal_type() const {
  return static_cast< ::msg::AlarmInfo_Type >(type_);
}
inline ::msg::AlarmInfo_Type AlarmInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.type)
  return _internal_type();
}
inline void AlarmInfo::_internal_set_type(::msg::AlarmInfo_Type value) {
  assert(::msg::AlarmInfo_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void AlarmInfo::set_type(::msg::AlarmInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.type)
}

// required string cid = 2;
inline bool AlarmInfo::_internal_has_cid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlarmInfo::has_cid() const {
  return _internal_has_cid();
}
inline void AlarmInfo::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlarmInfo::cid() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.cid)
  return _internal_cid();
}
inline void AlarmInfo::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.cid)
}
inline std::string* AlarmInfo::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.cid)
  return _internal_mutable_cid();
}
inline const std::string& AlarmInfo::_internal_cid() const {
  return cid_.Get();
}
inline void AlarmInfo::_internal_set_cid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmInfo::set_cid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlarmInfo.cid)
}
inline void AlarmInfo::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlarmInfo.cid)
}
inline void AlarmInfo::set_cid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlarmInfo.cid)
}
inline std::string* AlarmInfo::_internal_mutable_cid() {
  _has_bits_[0] |= 0x00000001u;
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmInfo::release_cid() {
  // @@protoc_insertion_point(field_release:msg.AlarmInfo.cid)
  if (!_internal_has_cid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmInfo::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmInfo.cid)
}
inline std::string* AlarmInfo::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.AlarmInfo.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmInfo::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.AlarmInfo.cid)
}

// required string time = 3;
inline bool AlarmInfo::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AlarmInfo::has_time() const {
  return _internal_has_time();
}
inline void AlarmInfo::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AlarmInfo::time() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.time)
  return _internal_time();
}
inline void AlarmInfo::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.time)
}
inline std::string* AlarmInfo::mutable_time() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.time)
  return _internal_mutable_time();
}
inline const std::string& AlarmInfo::_internal_time() const {
  return time_.Get();
}
inline void AlarmInfo::_internal_set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmInfo::set_time(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlarmInfo.time)
}
inline void AlarmInfo::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlarmInfo.time)
}
inline void AlarmInfo::set_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlarmInfo.time)
}
inline std::string* AlarmInfo::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000002u;
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmInfo::release_time() {
  // @@protoc_insertion_point(field_release:msg.AlarmInfo.time)
  if (!_internal_has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmInfo::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmInfo.time)
}
inline std::string* AlarmInfo::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.AlarmInfo.time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmInfo::unsafe_arena_set_allocated_time(
    std::string* time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.AlarmInfo.time)
}

// required string picture = 4;
inline bool AlarmInfo::_internal_has_picture() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlarmInfo::has_picture() const {
  return _internal_has_picture();
}
inline void AlarmInfo::clear_picture() {
  picture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AlarmInfo::picture() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.picture)
  return _internal_picture();
}
inline void AlarmInfo::set_picture(const std::string& value) {
  _internal_set_picture(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.picture)
}
inline std::string* AlarmInfo::mutable_picture() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.picture)
  return _internal_mutable_picture();
}
inline const std::string& AlarmInfo::_internal_picture() const {
  return picture_.Get();
}
inline void AlarmInfo::_internal_set_picture(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmInfo::set_picture(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlarmInfo.picture)
}
inline void AlarmInfo::set_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlarmInfo.picture)
}
inline void AlarmInfo::set_picture(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlarmInfo.picture)
}
inline std::string* AlarmInfo::_internal_mutable_picture() {
  _has_bits_[0] |= 0x00000004u;
  return picture_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmInfo::release_picture() {
  // @@protoc_insertion_point(field_release:msg.AlarmInfo.picture)
  if (!_internal_has_picture()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return picture_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmInfo::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmInfo.picture)
}
inline std::string* AlarmInfo::unsafe_arena_release_picture() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.AlarmInfo.picture)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return picture_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmInfo::unsafe_arena_set_allocated_picture(
    std::string* picture) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (picture != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  picture_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      picture, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.AlarmInfo.picture)
}

// repeated .msg.AlarmPosition alarmposition = 5;
inline int AlarmInfo::_internal_alarmposition_size() const {
  return alarmposition_.size();
}
inline int AlarmInfo::alarmposition_size() const {
  return _internal_alarmposition_size();
}
inline void AlarmInfo::clear_alarmposition() {
  alarmposition_.Clear();
}
inline ::msg::AlarmPosition* AlarmInfo::mutable_alarmposition(int index) {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.alarmposition)
  return alarmposition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlarmPosition >*
AlarmInfo::mutable_alarmposition() {
  // @@protoc_insertion_point(field_mutable_list:msg.AlarmInfo.alarmposition)
  return &alarmposition_;
}
inline const ::msg::AlarmPosition& AlarmInfo::_internal_alarmposition(int index) const {
  return alarmposition_.Get(index);
}
inline const ::msg::AlarmPosition& AlarmInfo::alarmposition(int index) const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.alarmposition)
  return _internal_alarmposition(index);
}
inline ::msg::AlarmPosition* AlarmInfo::_internal_add_alarmposition() {
  return alarmposition_.Add();
}
inline ::msg::AlarmPosition* AlarmInfo::add_alarmposition() {
  // @@protoc_insertion_point(field_add:msg.AlarmInfo.alarmposition)
  return _internal_add_alarmposition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AlarmPosition >&
AlarmInfo::alarmposition() const {
  // @@protoc_insertion_point(field_list:msg.AlarmInfo.alarmposition)
  return alarmposition_;
}

// optional string uid = 6;
inline bool AlarmInfo::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AlarmInfo::has_uid() const {
  return _internal_has_uid();
}
inline void AlarmInfo::clear_uid() {
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AlarmInfo::uid() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.uid)
  return _internal_uid();
}
inline void AlarmInfo::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.uid)
}
inline std::string* AlarmInfo::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.uid)
  return _internal_mutable_uid();
}
inline const std::string& AlarmInfo::_internal_uid() const {
  return uid_.Get();
}
inline void AlarmInfo::_internal_set_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmInfo::set_uid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlarmInfo.uid)
}
inline void AlarmInfo::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlarmInfo.uid)
}
inline void AlarmInfo::set_uid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlarmInfo.uid)
}
inline std::string* AlarmInfo::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000008u;
  return uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmInfo::release_uid() {
  // @@protoc_insertion_point(field_release:msg.AlarmInfo.uid)
  if (!_internal_has_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return uid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmInfo::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmInfo.uid)
}
inline std::string* AlarmInfo::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.AlarmInfo.uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmInfo::unsafe_arena_set_allocated_uid(
    std::string* uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.AlarmInfo.uid)
}

// -------------------------------------------------------------------

// Alarm

// required .msg.Alarm.Command command = 1;
inline bool Alarm::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Alarm::has_command() const {
  return _internal_has_command();
}
inline void Alarm::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::msg::Alarm_Command Alarm::_internal_command() const {
  return static_cast< ::msg::Alarm_Command >(command_);
}
inline ::msg::Alarm_Command Alarm::command() const {
  // @@protoc_insertion_point(field_get:msg.Alarm.command)
  return _internal_command();
}
inline void Alarm::_internal_set_command(::msg::Alarm_Command value) {
  assert(::msg::Alarm_Command_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  command_ = value;
}
inline void Alarm::set_command(::msg::Alarm_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.Alarm.command)
}

// required .msg.AlarmInfo alarminfo = 2;
inline bool Alarm::_internal_has_alarminfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || alarminfo_ != nullptr);
  return value;
}
inline bool Alarm::has_alarminfo() const {
  return _internal_has_alarminfo();
}
inline void Alarm::clear_alarminfo() {
  if (alarminfo_ != nullptr) alarminfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::AlarmInfo& Alarm::_internal_alarminfo() const {
  const ::msg::AlarmInfo* p = alarminfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::AlarmInfo*>(
      &::msg::_AlarmInfo_default_instance_);
}
inline const ::msg::AlarmInfo& Alarm::alarminfo() const {
  // @@protoc_insertion_point(field_get:msg.Alarm.alarminfo)
  return _internal_alarminfo();
}
inline void Alarm::unsafe_arena_set_allocated_alarminfo(
    ::msg::AlarmInfo* alarminfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alarminfo_);
  }
  alarminfo_ = alarminfo;
  if (alarminfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Alarm.alarminfo)
}
inline ::msg::AlarmInfo* Alarm::release_alarminfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlarmInfo* temp = alarminfo_;
  alarminfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::AlarmInfo* Alarm::unsafe_arena_release_alarminfo() {
  // @@protoc_insertion_point(field_release:msg.Alarm.alarminfo)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlarmInfo* temp = alarminfo_;
  alarminfo_ = nullptr;
  return temp;
}
inline ::msg::AlarmInfo* Alarm::_internal_mutable_alarminfo() {
  _has_bits_[0] |= 0x00000001u;
  if (alarminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::AlarmInfo>(GetArena());
    alarminfo_ = p;
  }
  return alarminfo_;
}
inline ::msg::AlarmInfo* Alarm::mutable_alarminfo() {
  // @@protoc_insertion_point(field_mutable:msg.Alarm.alarminfo)
  return _internal_mutable_alarminfo();
}
inline void Alarm::set_allocated_alarminfo(::msg::AlarmInfo* alarminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete alarminfo_;
  }
  if (alarminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alarminfo);
    if (message_arena != submessage_arena) {
      alarminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alarminfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  alarminfo_ = alarminfo;
  // @@protoc_insertion_point(field_set_allocated:msg.Alarm.alarminfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::AlarmInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::AlarmInfo_Type>() {
  return ::msg::AlarmInfo_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::Alarm_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Alarm_Command>() {
  return ::msg::Alarm_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Alarm_2eproto
