// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: algorithm.proto

#include "algorithm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace msg {
constexpr Algorithm::Algorithm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , camera_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gpu_(0)
  , dectect_(0)
  , track_(0)
  , seconddetectforphone_(0)
  , similarforface_(0)
  , inoutforface_(false)
  , triggertime_(0)
  , type_(1)
{}
struct AlgorithmDefaultTypeInternal {
  constexpr AlgorithmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlgorithmDefaultTypeInternal() {}
  union {
    Algorithm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlgorithmDefaultTypeInternal _Algorithm_default_instance_;
constexpr AlgorithmMessage::AlgorithmMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : algorithms_()
  , pid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
  , command_(1)
{}
struct AlgorithmMessageDefaultTypeInternal {
  constexpr AlgorithmMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlgorithmMessageDefaultTypeInternal() {}
  union {
    AlgorithmMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlgorithmMessageDefaultTypeInternal _AlgorithmMessage_default_instance_;
}  // namespace msg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_algorithm_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_algorithm_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_algorithm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_algorithm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, type_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, gpu_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, id_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, camera_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, dectect_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, track_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, seconddetectforphone_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, similarforface_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, inoutforface_),
  PROTOBUF_FIELD_OFFSET(::msg::Algorithm, triggertime_),
  9,
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmMessage, command_),
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmMessage, algorithms_),
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmMessage, status_),
  PROTOBUF_FIELD_OFFSET(::msg::AlgorithmMessage, pid_),
  2,
  ~0u,
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::msg::Algorithm)},
  { 25, 34, sizeof(::msg::AlgorithmMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_Algorithm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_AlgorithmMessage_default_instance_),
};

const char descriptor_table_protodef_algorithm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017algorithm.proto\022\003msg\"\244\002\n\tAlgorithm\022!\n\004"
  "type\030\001 \002(\0162\023.msg.Algorithm.Type\022\013\n\003gpu\030\002"
  " \002(\005\022\n\n\002id\030\003 \002(\014\022\016\n\006camera\030\004 \002(\014\022\017\n\007dect"
  "ect\030\005 \002(\002\022\r\n\005track\030\006 \002(\002\022\034\n\024seconddetect"
  "forphone\030\007 \001(\002\022\026\n\016similarforface\030\010 \001(\002\022\024"
  "\n\014inoutforface\030\t \001(\010\022\023\n\013triggertime\030\n \001("
  "\005\"J\n\004Type\022\n\n\006HELMET\020\001\022\t\n\005PHONE\020\002\022\t\n\005SLEE"
  "P\020\003\022\t\n\005FIGHT\020\004\022\010\n\004FACE\020\005\022\013\n\007OFFDUTY\020\006\"\346\001"
  "\n\020AlgorithmMessage\022.\n\007command\030\001 \002(\0162\035.ms"
  "g.AlgorithmMessage.Command\022\"\n\nalgorithms"
  "\030\002 \003(\0132\016.msg.Algorithm\022\016\n\006status\030\003 \001(\005\022\013"
  "\n\003pid\030\004 \001(\014\"a\n\007Command\022\013\n\007NEW_REQ\020\001\022\013\n\007N"
  "EW_REP\020\002\022\016\n\nDELETE_REQ\020\003\022\016\n\nDELETE_REP\020\004"
  "\022\r\n\tQUERY_REQ\020\005\022\r\n\tQUERY_REP\020\006"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_algorithm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_algorithm_2eproto = {
  false, false, 550, descriptor_table_protodef_algorithm_2eproto, "algorithm.proto", 
  &descriptor_table_algorithm_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_algorithm_2eproto::offsets,
  file_level_metadata_algorithm_2eproto, file_level_enum_descriptors_algorithm_2eproto, file_level_service_descriptors_algorithm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_algorithm_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_algorithm_2eproto);
  return descriptor_table_algorithm_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_algorithm_2eproto(&descriptor_table_algorithm_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Algorithm_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_algorithm_2eproto);
  return file_level_enum_descriptors_algorithm_2eproto[0];
}
bool Algorithm_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Algorithm_Type Algorithm::HELMET;
constexpr Algorithm_Type Algorithm::PHONE;
constexpr Algorithm_Type Algorithm::SLEEP;
constexpr Algorithm_Type Algorithm::FIGHT;
constexpr Algorithm_Type Algorithm::FACE;
constexpr Algorithm_Type Algorithm::OFFDUTY;
constexpr Algorithm_Type Algorithm::Type_MIN;
constexpr Algorithm_Type Algorithm::Type_MAX;
constexpr int Algorithm::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlgorithmMessage_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_algorithm_2eproto);
  return file_level_enum_descriptors_algorithm_2eproto[1];
}
bool AlgorithmMessage_Command_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AlgorithmMessage_Command AlgorithmMessage::NEW_REQ;
constexpr AlgorithmMessage_Command AlgorithmMessage::NEW_REP;
constexpr AlgorithmMessage_Command AlgorithmMessage::DELETE_REQ;
constexpr AlgorithmMessage_Command AlgorithmMessage::DELETE_REP;
constexpr AlgorithmMessage_Command AlgorithmMessage::QUERY_REQ;
constexpr AlgorithmMessage_Command AlgorithmMessage::QUERY_REP;
constexpr AlgorithmMessage_Command AlgorithmMessage::Command_MIN;
constexpr AlgorithmMessage_Command AlgorithmMessage::Command_MAX;
constexpr int AlgorithmMessage::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Algorithm::_Internal {
 public:
  using HasBits = decltype(std::declval<Algorithm>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gpu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dectect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_track(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seconddetectforphone(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_similarforface(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inoutforface(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_triggertime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000021f) ^ 0x0000021f) != 0;
  }
};

Algorithm::Algorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.Algorithm)
}
Algorithm::Algorithm(const Algorithm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  camera_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_camera()) {
    camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_camera(), 
      GetArena());
  }
  ::memcpy(&gpu_, &from.gpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&gpu_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:msg.Algorithm)
}

void Algorithm::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
camera_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gpu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&triggertime_) -
    reinterpret_cast<char*>(&gpu_)) + sizeof(triggertime_));
type_ = 1;
}

Algorithm::~Algorithm() {
  // @@protoc_insertion_point(destructor:msg.Algorithm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Algorithm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Algorithm::ArenaDtor(void* object) {
  Algorithm* _this = reinterpret_cast< Algorithm* >(object);
  (void)_this;
}
void Algorithm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Algorithm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Algorithm::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Algorithm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      camera_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&gpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inoutforface_) -
        reinterpret_cast<char*>(&gpu_)) + sizeof(inoutforface_));
  }
  if (cached_has_bits & 0x00000300u) {
    triggertime_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Algorithm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.Algorithm.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::Algorithm_Type_IsValid(val))) {
            _internal_set_type(static_cast<::msg::Algorithm_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 gpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gpu(&has_bits);
          gpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes camera = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_camera();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float dectect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_dectect(&has_bits);
          dectect_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float track = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_track(&has_bits);
          track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float seconddetectforphone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_seconddetectforphone(&has_bits);
          seconddetectforphone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float similarforface = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_similarforface(&has_bits);
          similarforface_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool inoutforface = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_inoutforface(&has_bits);
          inoutforface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 triggertime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_triggertime(&has_bits);
          triggertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Algorithm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Algorithm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.Algorithm.Type type = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required int32 gpu = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gpu(), target);
  }

  // required bytes id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_id(), target);
  }

  // required bytes camera = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_camera(), target);
  }

  // required float dectect = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dectect(), target);
  }

  // required float track = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_track(), target);
  }

  // optional float seconddetectforphone = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_seconddetectforphone(), target);
  }

  // optional float similarforface = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_similarforface(), target);
  }

  // optional bool inoutforface = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_inoutforface(), target);
  }

  // optional int32 triggertime = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_triggertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Algorithm)
  return target;
}

size_t Algorithm::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg.Algorithm)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required bytes id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (_internal_has_camera()) {
    // required bytes camera = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_camera());
  }

  if (_internal_has_gpu()) {
    // required int32 gpu = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpu());
  }

  if (_internal_has_dectect()) {
    // required float dectect = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_track()) {
    // required float track = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_type()) {
    // required .msg.Algorithm.Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t Algorithm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Algorithm)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000021f) ^ 0x0000021f) == 0) {  // All required fields are present.
    // required bytes id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());

    // required bytes camera = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_camera());

    // required int32 gpu = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpu());

    // required float dectect = 5;
    total_size += 1 + 4;

    // required float track = 6;
    total_size += 1 + 4;

    // required .msg.Algorithm.Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional float seconddetectforphone = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float similarforface = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool inoutforface = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 triggertime = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_triggertime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Algorithm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.Algorithm)
  GOOGLE_DCHECK_NE(&from, this);
  const Algorithm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Algorithm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.Algorithm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.Algorithm)
    MergeFrom(*source);
  }
}

void Algorithm::MergeFrom(const Algorithm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.Algorithm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_camera(from._internal_camera());
    }
    if (cached_has_bits & 0x00000004u) {
      gpu_ = from.gpu_;
    }
    if (cached_has_bits & 0x00000008u) {
      dectect_ = from.dectect_;
    }
    if (cached_has_bits & 0x00000010u) {
      track_ = from.track_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconddetectforphone_ = from.seconddetectforphone_;
    }
    if (cached_has_bits & 0x00000040u) {
      similarforface_ = from.similarforface_;
    }
    if (cached_has_bits & 0x00000080u) {
      inoutforface_ = from.inoutforface_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      triggertime_ = from.triggertime_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Algorithm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.Algorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Algorithm::CopyFrom(const Algorithm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Algorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Algorithm::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Algorithm::InternalSwap(Algorithm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_.Swap(&other->camera_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Algorithm, triggertime_)
      + sizeof(Algorithm::triggertime_)
      - PROTOBUF_FIELD_OFFSET(Algorithm, gpu_)>(
          reinterpret_cast<char*>(&gpu_),
          reinterpret_cast<char*>(&other->gpu_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Algorithm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AlgorithmMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AlgorithmMessage>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

AlgorithmMessage::AlgorithmMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  algorithms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.AlgorithmMessage)
}
AlgorithmMessage::AlgorithmMessage(const AlgorithmMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      algorithms_(from.algorithms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pid()) {
    pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pid(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&status_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:msg.AlgorithmMessage)
}

void AlgorithmMessage::SharedCtor() {
pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = 0;
command_ = 1;
}

AlgorithmMessage::~AlgorithmMessage() {
  // @@protoc_insertion_point(destructor:msg.AlgorithmMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlgorithmMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlgorithmMessage::ArenaDtor(void* object) {
  AlgorithmMessage* _this = reinterpret_cast< AlgorithmMessage* >(object);
  (void)_this;
}
void AlgorithmMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlgorithmMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlgorithmMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AlgorithmMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    status_ = 0;
    command_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.AlgorithmMessage.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::AlgorithmMessage_Command_IsValid(val))) {
            _internal_set_command(static_cast<::msg::AlgorithmMessage_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .msg.Algorithm algorithms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_algorithms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlgorithmMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AlgorithmMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.AlgorithmMessage.Command command = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // repeated .msg.Algorithm algorithms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_algorithms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_algorithms(i), target, stream);
  }

  // optional int32 status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // optional bytes pid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AlgorithmMessage)
  return target;
}

size_t AlgorithmMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AlgorithmMessage)
  size_t total_size = 0;

  // required .msg.AlgorithmMessage.Command command = 1;
  if (_internal_has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Algorithm algorithms = 2;
  total_size += 1UL * this->_internal_algorithms_size();
  for (const auto& msg : this->algorithms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes pid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pid());
    }

    // optional int32 status = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.AlgorithmMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlgorithmMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.AlgorithmMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.AlgorithmMessage)
    MergeFrom(*source);
  }
}

void AlgorithmMessage::MergeFrom(const AlgorithmMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.AlgorithmMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  algorithms_.MergeFrom(from.algorithms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pid(from._internal_pid());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      command_ = from.command_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgorithmMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.AlgorithmMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmMessage::CopyFrom(const AlgorithmMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AlgorithmMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(algorithms_)) return false;
  return true;
}

void AlgorithmMessage::InternalSwap(AlgorithmMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  algorithms_.InternalSwap(&other->algorithms_);
  pid_.Swap(&other->pid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::Algorithm* Arena::CreateMaybeMessage< ::msg::Algorithm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Algorithm >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::AlgorithmMessage* Arena::CreateMaybeMessage< ::msg::AlgorithmMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::AlgorithmMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
