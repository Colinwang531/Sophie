// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: algorithm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_algorithm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_algorithm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_algorithm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_algorithm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_algorithm_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_algorithm_2eproto_metadata_getter(int index);
namespace msg {
class Algorithm;
struct AlgorithmDefaultTypeInternal;
extern AlgorithmDefaultTypeInternal _Algorithm_default_instance_;
class AlgorithmMessage;
struct AlgorithmMessageDefaultTypeInternal;
extern AlgorithmMessageDefaultTypeInternal _AlgorithmMessage_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Algorithm* Arena::CreateMaybeMessage<::msg::Algorithm>(Arena*);
template<> ::msg::AlgorithmMessage* Arena::CreateMaybeMessage<::msg::AlgorithmMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum Algorithm_Type : int {
  Algorithm_Type_HELMET = 1,
  Algorithm_Type_PHONE = 2,
  Algorithm_Type_SLEEP = 3,
  Algorithm_Type_FIGHT = 4,
  Algorithm_Type_FACE = 5,
  Algorithm_Type_OFFDUTY = 6
};
bool Algorithm_Type_IsValid(int value);
constexpr Algorithm_Type Algorithm_Type_Type_MIN = Algorithm_Type_HELMET;
constexpr Algorithm_Type Algorithm_Type_Type_MAX = Algorithm_Type_OFFDUTY;
constexpr int Algorithm_Type_Type_ARRAYSIZE = Algorithm_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Algorithm_Type_descriptor();
template<typename T>
inline const std::string& Algorithm_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Algorithm_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Algorithm_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Algorithm_Type_descriptor(), enum_t_value);
}
inline bool Algorithm_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Algorithm_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Algorithm_Type>(
    Algorithm_Type_descriptor(), name, value);
}
enum AlgorithmMessage_Command : int {
  AlgorithmMessage_Command_NEW_REQ = 1,
  AlgorithmMessage_Command_NEW_REP = 2,
  AlgorithmMessage_Command_DELETE_REQ = 3,
  AlgorithmMessage_Command_DELETE_REP = 4,
  AlgorithmMessage_Command_QUERY_REQ = 5,
  AlgorithmMessage_Command_QUERY_REP = 6
};
bool AlgorithmMessage_Command_IsValid(int value);
constexpr AlgorithmMessage_Command AlgorithmMessage_Command_Command_MIN = AlgorithmMessage_Command_NEW_REQ;
constexpr AlgorithmMessage_Command AlgorithmMessage_Command_Command_MAX = AlgorithmMessage_Command_QUERY_REP;
constexpr int AlgorithmMessage_Command_Command_ARRAYSIZE = AlgorithmMessage_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlgorithmMessage_Command_descriptor();
template<typename T>
inline const std::string& AlgorithmMessage_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlgorithmMessage_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlgorithmMessage_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlgorithmMessage_Command_descriptor(), enum_t_value);
}
inline bool AlgorithmMessage_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlgorithmMessage_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlgorithmMessage_Command>(
    AlgorithmMessage_Command_descriptor(), name, value);
}
// ===================================================================

class Algorithm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Algorithm) */ {
 public:
  inline Algorithm() : Algorithm(nullptr) {}
  virtual ~Algorithm();
  explicit constexpr Algorithm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Algorithm(const Algorithm& from);
  Algorithm(Algorithm&& from) noexcept
    : Algorithm() {
    *this = ::std::move(from);
  }

  inline Algorithm& operator=(const Algorithm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Algorithm& operator=(Algorithm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Algorithm& default_instance() {
    return *internal_default_instance();
  }
  static inline const Algorithm* internal_default_instance() {
    return reinterpret_cast<const Algorithm*>(
               &_Algorithm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Algorithm& a, Algorithm& b) {
    a.Swap(&b);
  }
  inline void Swap(Algorithm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Algorithm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Algorithm* New() const final {
    return CreateMaybeMessage<Algorithm>(nullptr);
  }

  Algorithm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Algorithm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Algorithm& from);
  void MergeFrom(const Algorithm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Algorithm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Algorithm";
  }
  protected:
  explicit Algorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_algorithm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Algorithm_Type Type;
  static constexpr Type HELMET =
    Algorithm_Type_HELMET;
  static constexpr Type PHONE =
    Algorithm_Type_PHONE;
  static constexpr Type SLEEP =
    Algorithm_Type_SLEEP;
  static constexpr Type FIGHT =
    Algorithm_Type_FIGHT;
  static constexpr Type FACE =
    Algorithm_Type_FACE;
  static constexpr Type OFFDUTY =
    Algorithm_Type_OFFDUTY;
  static inline bool Type_IsValid(int value) {
    return Algorithm_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Algorithm_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Algorithm_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Algorithm_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Algorithm_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Algorithm_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Algorithm_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 3,
    kCameraFieldNumber = 4,
    kGpuFieldNumber = 2,
    kDectectFieldNumber = 5,
    kTrackFieldNumber = 6,
    kSeconddetectforphoneFieldNumber = 7,
    kSimilarforfaceFieldNumber = 8,
    kInoutforfaceFieldNumber = 9,
    kTriggertimeFieldNumber = 10,
    kTypeFieldNumber = 1,
  };
  // required bytes id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required bytes camera = 4;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const std::string& camera() const;
  void set_camera(const std::string& value);
  void set_camera(std::string&& value);
  void set_camera(const char* value);
  void set_camera(const void* value, size_t size);
  std::string* mutable_camera();
  std::string* release_camera();
  void set_allocated_camera(std::string* camera);
  private:
  const std::string& _internal_camera() const;
  void _internal_set_camera(const std::string& value);
  std::string* _internal_mutable_camera();
  public:

  // required int32 gpu = 2;
  bool has_gpu() const;
  private:
  bool _internal_has_gpu() const;
  public:
  void clear_gpu();
  ::PROTOBUF_NAMESPACE_ID::int32 gpu() const;
  void set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu() const;
  void _internal_set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float dectect = 5;
  bool has_dectect() const;
  private:
  bool _internal_has_dectect() const;
  public:
  void clear_dectect();
  float dectect() const;
  void set_dectect(float value);
  private:
  float _internal_dectect() const;
  void _internal_set_dectect(float value);
  public:

  // required float track = 6;
  bool has_track() const;
  private:
  bool _internal_has_track() const;
  public:
  void clear_track();
  float track() const;
  void set_track(float value);
  private:
  float _internal_track() const;
  void _internal_set_track(float value);
  public:

  // optional float seconddetectforphone = 7;
  bool has_seconddetectforphone() const;
  private:
  bool _internal_has_seconddetectforphone() const;
  public:
  void clear_seconddetectforphone();
  float seconddetectforphone() const;
  void set_seconddetectforphone(float value);
  private:
  float _internal_seconddetectforphone() const;
  void _internal_set_seconddetectforphone(float value);
  public:

  // optional float similarforface = 8;
  bool has_similarforface() const;
  private:
  bool _internal_has_similarforface() const;
  public:
  void clear_similarforface();
  float similarforface() const;
  void set_similarforface(float value);
  private:
  float _internal_similarforface() const;
  void _internal_set_similarforface(float value);
  public:

  // optional bool inoutforface = 9;
  bool has_inoutforface() const;
  private:
  bool _internal_has_inoutforface() const;
  public:
  void clear_inoutforface();
  bool inoutforface() const;
  void set_inoutforface(bool value);
  private:
  bool _internal_inoutforface() const;
  void _internal_set_inoutforface(bool value);
  public:

  // optional int32 triggertime = 10;
  bool has_triggertime() const;
  private:
  bool _internal_has_triggertime() const;
  public:
  void clear_triggertime();
  ::PROTOBUF_NAMESPACE_ID::int32 triggertime() const;
  void set_triggertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_triggertime() const;
  void _internal_set_triggertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.Algorithm.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::Algorithm_Type type() const;
  void set_type(::msg::Algorithm_Type value);
  private:
  ::msg::Algorithm_Type _internal_type() const;
  void _internal_set_type(::msg::Algorithm_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Algorithm)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_;
  float dectect_;
  float track_;
  float seconddetectforphone_;
  float similarforface_;
  bool inoutforface_;
  ::PROTOBUF_NAMESPACE_ID::int32 triggertime_;
  int type_;
  friend struct ::TableStruct_algorithm_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlgorithmMessage) */ {
 public:
  inline AlgorithmMessage() : AlgorithmMessage(nullptr) {}
  virtual ~AlgorithmMessage();
  explicit constexpr AlgorithmMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlgorithmMessage(const AlgorithmMessage& from);
  AlgorithmMessage(AlgorithmMessage&& from) noexcept
    : AlgorithmMessage() {
    *this = ::std::move(from);
  }

  inline AlgorithmMessage& operator=(const AlgorithmMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmMessage& operator=(AlgorithmMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgorithmMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlgorithmMessage* internal_default_instance() {
    return reinterpret_cast<const AlgorithmMessage*>(
               &_AlgorithmMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlgorithmMessage& a, AlgorithmMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmMessage* New() const final {
    return CreateMaybeMessage<AlgorithmMessage>(nullptr);
  }

  AlgorithmMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgorithmMessage& from);
  void MergeFrom(const AlgorithmMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlgorithmMessage";
  }
  protected:
  explicit AlgorithmMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_algorithm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlgorithmMessage_Command Command;
  static constexpr Command NEW_REQ =
    AlgorithmMessage_Command_NEW_REQ;
  static constexpr Command NEW_REP =
    AlgorithmMessage_Command_NEW_REP;
  static constexpr Command DELETE_REQ =
    AlgorithmMessage_Command_DELETE_REQ;
  static constexpr Command DELETE_REP =
    AlgorithmMessage_Command_DELETE_REP;
  static constexpr Command QUERY_REQ =
    AlgorithmMessage_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    AlgorithmMessage_Command_QUERY_REP;
  static inline bool Command_IsValid(int value) {
    return AlgorithmMessage_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    AlgorithmMessage_Command_Command_MIN;
  static constexpr Command Command_MAX =
    AlgorithmMessage_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    AlgorithmMessage_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return AlgorithmMessage_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return AlgorithmMessage_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return AlgorithmMessage_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmsFieldNumber = 2,
    kPidFieldNumber = 4,
    kStatusFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // repeated .msg.Algorithm algorithms = 2;
  int algorithms_size() const;
  private:
  int _internal_algorithms_size() const;
  public:
  void clear_algorithms();
  ::msg::Algorithm* mutable_algorithms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Algorithm >*
      mutable_algorithms();
  private:
  const ::msg::Algorithm& _internal_algorithms(int index) const;
  ::msg::Algorithm* _internal_add_algorithms();
  public:
  const ::msg::Algorithm& algorithms(int index) const;
  ::msg::Algorithm* add_algorithms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Algorithm >&
      algorithms() const;

  // optional bytes pid = 4;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  void set_pid(const std::string& value);
  void set_pid(std::string&& value);
  void set_pid(const char* value);
  void set_pid(const void* value, size_t size);
  std::string* mutable_pid();
  std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional int32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.AlgorithmMessage.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::AlgorithmMessage_Command command() const;
  void set_command(::msg::AlgorithmMessage_Command value);
  private:
  ::msg::AlgorithmMessage_Command _internal_command() const;
  void _internal_set_command(::msg::AlgorithmMessage_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AlgorithmMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Algorithm > algorithms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  int command_;
  friend struct ::TableStruct_algorithm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Algorithm

// required .msg.Algorithm.Type type = 1;
inline bool Algorithm::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Algorithm::has_type() const {
  return _internal_has_type();
}
inline void Algorithm::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::msg::Algorithm_Type Algorithm::_internal_type() const {
  return static_cast< ::msg::Algorithm_Type >(type_);
}
inline ::msg::Algorithm_Type Algorithm::type() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.type)
  return _internal_type();
}
inline void Algorithm::_internal_set_type(::msg::Algorithm_Type value) {
  assert(::msg::Algorithm_Type_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void Algorithm::set_type(::msg::Algorithm_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.type)
}

// required int32 gpu = 2;
inline bool Algorithm::_internal_has_gpu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Algorithm::has_gpu() const {
  return _internal_has_gpu();
}
inline void Algorithm::clear_gpu() {
  gpu_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Algorithm::_internal_gpu() const {
  return gpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Algorithm::gpu() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.gpu)
  return _internal_gpu();
}
inline void Algorithm::_internal_set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  gpu_ = value;
}
inline void Algorithm::set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpu(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.gpu)
}

// required bytes id = 3;
inline bool Algorithm::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Algorithm::has_id() const {
  return _internal_has_id();
}
inline void Algorithm::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Algorithm::id() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.id)
  return _internal_id();
}
inline void Algorithm::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.id)
}
inline std::string* Algorithm::mutable_id() {
  // @@protoc_insertion_point(field_mutable:msg.Algorithm.id)
  return _internal_mutable_id();
}
inline const std::string& Algorithm::_internal_id() const {
  return id_.Get();
}
inline void Algorithm::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Algorithm::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Algorithm.id)
}
inline void Algorithm::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Algorithm.id)
}
inline void Algorithm::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Algorithm.id)
}
inline std::string* Algorithm::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Algorithm::release_id() {
  // @@protoc_insertion_point(field_release:msg.Algorithm.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Algorithm::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Algorithm.id)
}

// required bytes camera = 4;
inline bool Algorithm::_internal_has_camera() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Algorithm::has_camera() const {
  return _internal_has_camera();
}
inline void Algorithm::clear_camera() {
  camera_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Algorithm::camera() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.camera)
  return _internal_camera();
}
inline void Algorithm::set_camera(const std::string& value) {
  _internal_set_camera(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.camera)
}
inline std::string* Algorithm::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:msg.Algorithm.camera)
  return _internal_mutable_camera();
}
inline const std::string& Algorithm::_internal_camera() const {
  return camera_.Get();
}
inline void Algorithm::_internal_set_camera(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Algorithm::set_camera(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  camera_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Algorithm.camera)
}
inline void Algorithm::set_camera(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Algorithm.camera)
}
inline void Algorithm::set_camera(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Algorithm.camera)
}
inline std::string* Algorithm::_internal_mutable_camera() {
  _has_bits_[0] |= 0x00000002u;
  return camera_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Algorithm::release_camera() {
  // @@protoc_insertion_point(field_release:msg.Algorithm.camera)
  if (!_internal_has_camera()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return camera_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Algorithm::set_allocated_camera(std::string* camera) {
  if (camera != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  camera_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Algorithm.camera)
}

// required float dectect = 5;
inline bool Algorithm::_internal_has_dectect() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Algorithm::has_dectect() const {
  return _internal_has_dectect();
}
inline void Algorithm::clear_dectect() {
  dectect_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Algorithm::_internal_dectect() const {
  return dectect_;
}
inline float Algorithm::dectect() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.dectect)
  return _internal_dectect();
}
inline void Algorithm::_internal_set_dectect(float value) {
  _has_bits_[0] |= 0x00000008u;
  dectect_ = value;
}
inline void Algorithm::set_dectect(float value) {
  _internal_set_dectect(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.dectect)
}

// required float track = 6;
inline bool Algorithm::_internal_has_track() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Algorithm::has_track() const {
  return _internal_has_track();
}
inline void Algorithm::clear_track() {
  track_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Algorithm::_internal_track() const {
  return track_;
}
inline float Algorithm::track() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.track)
  return _internal_track();
}
inline void Algorithm::_internal_set_track(float value) {
  _has_bits_[0] |= 0x00000010u;
  track_ = value;
}
inline void Algorithm::set_track(float value) {
  _internal_set_track(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.track)
}

// optional float seconddetectforphone = 7;
inline bool Algorithm::_internal_has_seconddetectforphone() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Algorithm::has_seconddetectforphone() const {
  return _internal_has_seconddetectforphone();
}
inline void Algorithm::clear_seconddetectforphone() {
  seconddetectforphone_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Algorithm::_internal_seconddetectforphone() const {
  return seconddetectforphone_;
}
inline float Algorithm::seconddetectforphone() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.seconddetectforphone)
  return _internal_seconddetectforphone();
}
inline void Algorithm::_internal_set_seconddetectforphone(float value) {
  _has_bits_[0] |= 0x00000020u;
  seconddetectforphone_ = value;
}
inline void Algorithm::set_seconddetectforphone(float value) {
  _internal_set_seconddetectforphone(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.seconddetectforphone)
}

// optional float similarforface = 8;
inline bool Algorithm::_internal_has_similarforface() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Algorithm::has_similarforface() const {
  return _internal_has_similarforface();
}
inline void Algorithm::clear_similarforface() {
  similarforface_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Algorithm::_internal_similarforface() const {
  return similarforface_;
}
inline float Algorithm::similarforface() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.similarforface)
  return _internal_similarforface();
}
inline void Algorithm::_internal_set_similarforface(float value) {
  _has_bits_[0] |= 0x00000040u;
  similarforface_ = value;
}
inline void Algorithm::set_similarforface(float value) {
  _internal_set_similarforface(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.similarforface)
}

// optional bool inoutforface = 9;
inline bool Algorithm::_internal_has_inoutforface() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Algorithm::has_inoutforface() const {
  return _internal_has_inoutforface();
}
inline void Algorithm::clear_inoutforface() {
  inoutforface_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Algorithm::_internal_inoutforface() const {
  return inoutforface_;
}
inline bool Algorithm::inoutforface() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.inoutforface)
  return _internal_inoutforface();
}
inline void Algorithm::_internal_set_inoutforface(bool value) {
  _has_bits_[0] |= 0x00000080u;
  inoutforface_ = value;
}
inline void Algorithm::set_inoutforface(bool value) {
  _internal_set_inoutforface(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.inoutforface)
}

// optional int32 triggertime = 10;
inline bool Algorithm::_internal_has_triggertime() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Algorithm::has_triggertime() const {
  return _internal_has_triggertime();
}
inline void Algorithm::clear_triggertime() {
  triggertime_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Algorithm::_internal_triggertime() const {
  return triggertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Algorithm::triggertime() const {
  // @@protoc_insertion_point(field_get:msg.Algorithm.triggertime)
  return _internal_triggertime();
}
inline void Algorithm::_internal_set_triggertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  triggertime_ = value;
}
inline void Algorithm::set_triggertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_triggertime(value);
  // @@protoc_insertion_point(field_set:msg.Algorithm.triggertime)
}

// -------------------------------------------------------------------

// AlgorithmMessage

// required .msg.AlgorithmMessage.Command command = 1;
inline bool AlgorithmMessage::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlgorithmMessage::has_command() const {
  return _internal_has_command();
}
inline void AlgorithmMessage::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::AlgorithmMessage_Command AlgorithmMessage::_internal_command() const {
  return static_cast< ::msg::AlgorithmMessage_Command >(command_);
}
inline ::msg::AlgorithmMessage_Command AlgorithmMessage::command() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmMessage.command)
  return _internal_command();
}
inline void AlgorithmMessage::_internal_set_command(::msg::AlgorithmMessage_Command value) {
  assert(::msg::AlgorithmMessage_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void AlgorithmMessage::set_command(::msg::AlgorithmMessage_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmMessage.command)
}

// repeated .msg.Algorithm algorithms = 2;
inline int AlgorithmMessage::_internal_algorithms_size() const {
  return algorithms_.size();
}
inline int AlgorithmMessage::algorithms_size() const {
  return _internal_algorithms_size();
}
inline void AlgorithmMessage::clear_algorithms() {
  algorithms_.Clear();
}
inline ::msg::Algorithm* AlgorithmMessage::mutable_algorithms(int index) {
  // @@protoc_insertion_point(field_mutable:msg.AlgorithmMessage.algorithms)
  return algorithms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Algorithm >*
AlgorithmMessage::mutable_algorithms() {
  // @@protoc_insertion_point(field_mutable_list:msg.AlgorithmMessage.algorithms)
  return &algorithms_;
}
inline const ::msg::Algorithm& AlgorithmMessage::_internal_algorithms(int index) const {
  return algorithms_.Get(index);
}
inline const ::msg::Algorithm& AlgorithmMessage::algorithms(int index) const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmMessage.algorithms)
  return _internal_algorithms(index);
}
inline ::msg::Algorithm* AlgorithmMessage::_internal_add_algorithms() {
  return algorithms_.Add();
}
inline ::msg::Algorithm* AlgorithmMessage::add_algorithms() {
  // @@protoc_insertion_point(field_add:msg.AlgorithmMessage.algorithms)
  return _internal_add_algorithms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Algorithm >&
AlgorithmMessage::algorithms() const {
  // @@protoc_insertion_point(field_list:msg.AlgorithmMessage.algorithms)
  return algorithms_;
}

// optional int32 status = 3;
inline bool AlgorithmMessage::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AlgorithmMessage::has_status() const {
  return _internal_has_status();
}
inline void AlgorithmMessage::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmMessage::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmMessage::status() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmMessage.status)
  return _internal_status();
}
inline void AlgorithmMessage::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void AlgorithmMessage::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmMessage.status)
}

// optional bytes pid = 4;
inline bool AlgorithmMessage::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlgorithmMessage::has_pid() const {
  return _internal_has_pid();
}
inline void AlgorithmMessage::clear_pid() {
  pid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlgorithmMessage::pid() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmMessage.pid)
  return _internal_pid();
}
inline void AlgorithmMessage::set_pid(const std::string& value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmMessage.pid)
}
inline std::string* AlgorithmMessage::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:msg.AlgorithmMessage.pid)
  return _internal_mutable_pid();
}
inline const std::string& AlgorithmMessage::_internal_pid() const {
  return pid_.Get();
}
inline void AlgorithmMessage::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlgorithmMessage::set_pid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlgorithmMessage.pid)
}
inline void AlgorithmMessage::set_pid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlgorithmMessage.pid)
}
inline void AlgorithmMessage::set_pid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlgorithmMessage.pid)
}
inline std::string* AlgorithmMessage::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlgorithmMessage::release_pid() {
  // @@protoc_insertion_point(field_release:msg.AlgorithmMessage.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlgorithmMessage::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlgorithmMessage.pid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::Algorithm_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Algorithm_Type>() {
  return ::msg::Algorithm_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::AlgorithmMessage_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::AlgorithmMessage_Command>() {
  return ::msg::AlgorithmMessage_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_algorithm_2eproto
