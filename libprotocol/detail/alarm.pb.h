// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alarm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_alarm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_alarm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_alarm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_alarm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alarm_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_alarm_2eproto_metadata_getter(int index);
namespace msg {
class Alarm;
struct AlarmDefaultTypeInternal;
extern AlarmDefaultTypeInternal _Alarm_default_instance_;
class AlarmMessage;
struct AlarmMessageDefaultTypeInternal;
extern AlarmMessageDefaultTypeInternal _AlarmMessage_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Alarm* Arena::CreateMaybeMessage<::msg::Alarm>(Arena*);
template<> ::msg::AlarmMessage* Arena::CreateMaybeMessage<::msg::AlarmMessage>(Arena*);
template<> ::msg::Range* Arena::CreateMaybeMessage<::msg::Range>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum Alarm_Type : int {
  Alarm_Type_HELMET = 1,
  Alarm_Type_PHONE = 2,
  Alarm_Type_SLEEP = 3,
  Alarm_Type_FIGHT = 4,
  Alarm_Type_FACE = 5,
  Alarm_Type_BODY = 6
};
bool Alarm_Type_IsValid(int value);
constexpr Alarm_Type Alarm_Type_Type_MIN = Alarm_Type_HELMET;
constexpr Alarm_Type Alarm_Type_Type_MAX = Alarm_Type_BODY;
constexpr int Alarm_Type_Type_ARRAYSIZE = Alarm_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Alarm_Type_descriptor();
template<typename T>
inline const std::string& Alarm_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Alarm_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Alarm_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Alarm_Type_descriptor(), enum_t_value);
}
inline bool Alarm_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Alarm_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Alarm_Type>(
    Alarm_Type_descriptor(), name, value);
}
enum AlarmMessage_Command : int {
  AlarmMessage_Command_ALARM_PUSH = 1,
  AlarmMessage_Command_ALARM_ACK = 2
};
bool AlarmMessage_Command_IsValid(int value);
constexpr AlarmMessage_Command AlarmMessage_Command_Command_MIN = AlarmMessage_Command_ALARM_PUSH;
constexpr AlarmMessage_Command AlarmMessage_Command_Command_MAX = AlarmMessage_Command_ALARM_ACK;
constexpr int AlarmMessage_Command_Command_ARRAYSIZE = AlarmMessage_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmMessage_Command_descriptor();
template<typename T>
inline const std::string& AlarmMessage_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlarmMessage_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlarmMessage_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlarmMessage_Command_descriptor(), enum_t_value);
}
inline bool AlarmMessage_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlarmMessage_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlarmMessage_Command>(
    AlarmMessage_Command_descriptor(), name, value);
}
// ===================================================================

class Range PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  virtual ~Range();
  explicit constexpr Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(nullptr);
  }

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_alarm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 w = 3;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 h = 4;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Range)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  friend struct ::TableStruct_alarm_2eproto;
};
// -------------------------------------------------------------------

class Alarm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Alarm) */ {
 public:
  inline Alarm() : Alarm(nullptr) {}
  virtual ~Alarm();
  explicit constexpr Alarm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Alarm(const Alarm& from);
  Alarm(Alarm&& from) noexcept
    : Alarm() {
    *this = ::std::move(from);
  }

  inline Alarm& operator=(const Alarm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alarm& operator=(Alarm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Alarm& default_instance() {
    return *internal_default_instance();
  }
  static inline const Alarm* internal_default_instance() {
    return reinterpret_cast<const Alarm*>(
               &_Alarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Alarm& a, Alarm& b) {
    a.Swap(&b);
  }
  inline void Swap(Alarm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Alarm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Alarm* New() const final {
    return CreateMaybeMessage<Alarm>(nullptr);
  }

  Alarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Alarm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Alarm& from);
  void MergeFrom(const Alarm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alarm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Alarm";
  }
  protected:
  explicit Alarm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_alarm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Alarm_Type Type;
  static constexpr Type HELMET =
    Alarm_Type_HELMET;
  static constexpr Type PHONE =
    Alarm_Type_PHONE;
  static constexpr Type SLEEP =
    Alarm_Type_SLEEP;
  static constexpr Type FIGHT =
    Alarm_Type_FIGHT;
  static constexpr Type FACE =
    Alarm_Type_FACE;
  static constexpr Type BODY =
    Alarm_Type_BODY;
  static inline bool Type_IsValid(int value) {
    return Alarm_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Alarm_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Alarm_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Alarm_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Alarm_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Alarm_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Alarm_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 5,
    kCameraFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kPictureFieldNumber = 4,
    kIdforfaceFieldNumber = 6,
    kInoutforfaceFieldNumber = 7,
    kBodycountFieldNumber = 8,
    kTypeFieldNumber = 1,
  };
  // repeated .msg.Range ranges = 5;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::msg::Range* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Range >*
      mutable_ranges();
  private:
  const ::msg::Range& _internal_ranges(int index) const;
  ::msg::Range* _internal_add_ranges();
  public:
  const ::msg::Range& ranges(int index) const;
  ::msg::Range* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Range >&
      ranges() const;

  // required bytes camera = 2;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const std::string& camera() const;
  void set_camera(const std::string& value);
  void set_camera(std::string&& value);
  void set_camera(const char* value);
  void set_camera(const void* value, size_t size);
  std::string* mutable_camera();
  std::string* release_camera();
  void set_allocated_camera(std::string* camera);
  private:
  const std::string& _internal_camera() const;
  void _internal_set_camera(const std::string& value);
  std::string* _internal_mutable_camera();
  public:

  // required bytes timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const void* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // required bytes picture = 4;
  bool has_picture() const;
  private:
  bool _internal_has_picture() const;
  public:
  void clear_picture();
  const std::string& picture() const;
  void set_picture(const std::string& value);
  void set_picture(std::string&& value);
  void set_picture(const char* value);
  void set_picture(const void* value, size_t size);
  std::string* mutable_picture();
  std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  private:
  const std::string& _internal_picture() const;
  void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // optional bytes idforface = 6;
  bool has_idforface() const;
  private:
  bool _internal_has_idforface() const;
  public:
  void clear_idforface();
  const std::string& idforface() const;
  void set_idforface(const std::string& value);
  void set_idforface(std::string&& value);
  void set_idforface(const char* value);
  void set_idforface(const void* value, size_t size);
  std::string* mutable_idforface();
  std::string* release_idforface();
  void set_allocated_idforface(std::string* idforface);
  private:
  const std::string& _internal_idforface() const;
  void _internal_set_idforface(const std::string& value);
  std::string* _internal_mutable_idforface();
  public:

  // optional bool inoutforface = 7;
  bool has_inoutforface() const;
  private:
  bool _internal_has_inoutforface() const;
  public:
  void clear_inoutforface();
  bool inoutforface() const;
  void set_inoutforface(bool value);
  private:
  bool _internal_inoutforface() const;
  void _internal_set_inoutforface(bool value);
  public:

  // optional int32 bodycount = 8;
  bool has_bodycount() const;
  private:
  bool _internal_has_bodycount() const;
  public:
  void clear_bodycount();
  ::PROTOBUF_NAMESPACE_ID::int32 bodycount() const;
  void set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bodycount() const;
  void _internal_set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.Alarm.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::Alarm_Type type() const;
  void set_type(::msg::Alarm_Type value);
  private:
  ::msg::Alarm_Type _internal_type() const;
  void _internal_set_type(::msg::Alarm_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Alarm)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Range > ranges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idforface_;
  bool inoutforface_;
  ::PROTOBUF_NAMESPACE_ID::int32 bodycount_;
  int type_;
  friend struct ::TableStruct_alarm_2eproto;
};
// -------------------------------------------------------------------

class AlarmMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlarmMessage) */ {
 public:
  inline AlarmMessage() : AlarmMessage(nullptr) {}
  virtual ~AlarmMessage();
  explicit constexpr AlarmMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlarmMessage(const AlarmMessage& from);
  AlarmMessage(AlarmMessage&& from) noexcept
    : AlarmMessage() {
    *this = ::std::move(from);
  }

  inline AlarmMessage& operator=(const AlarmMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmMessage& operator=(AlarmMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlarmMessage* internal_default_instance() {
    return reinterpret_cast<const AlarmMessage*>(
               &_AlarmMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlarmMessage& a, AlarmMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmMessage* New() const final {
    return CreateMaybeMessage<AlarmMessage>(nullptr);
  }

  AlarmMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmMessage& from);
  void MergeFrom(const AlarmMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlarmMessage";
  }
  protected:
  explicit AlarmMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_alarm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlarmMessage_Command Command;
  static constexpr Command ALARM_PUSH =
    AlarmMessage_Command_ALARM_PUSH;
  static constexpr Command ALARM_ACK =
    AlarmMessage_Command_ALARM_ACK;
  static inline bool Command_IsValid(int value) {
    return AlarmMessage_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    AlarmMessage_Command_Command_MIN;
  static constexpr Command Command_MAX =
    AlarmMessage_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    AlarmMessage_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return AlarmMessage_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return AlarmMessage_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return AlarmMessage_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 3,
    kAlarmFieldNumber = 2,
    kCommandFieldNumber = 1,
  };
  // optional bytes pid = 3;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  void set_pid(const std::string& value);
  void set_pid(std::string&& value);
  void set_pid(const char* value);
  void set_pid(const void* value, size_t size);
  std::string* mutable_pid();
  std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional .msg.Alarm alarm = 2;
  bool has_alarm() const;
  private:
  bool _internal_has_alarm() const;
  public:
  void clear_alarm();
  const ::msg::Alarm& alarm() const;
  ::msg::Alarm* release_alarm();
  ::msg::Alarm* mutable_alarm();
  void set_allocated_alarm(::msg::Alarm* alarm);
  private:
  const ::msg::Alarm& _internal_alarm() const;
  ::msg::Alarm* _internal_mutable_alarm();
  public:
  void unsafe_arena_set_allocated_alarm(
      ::msg::Alarm* alarm);
  ::msg::Alarm* unsafe_arena_release_alarm();

  // required .msg.AlarmMessage.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::AlarmMessage_Command command() const;
  void set_command(::msg::AlarmMessage_Command value);
  private:
  ::msg::AlarmMessage_Command _internal_command() const;
  void _internal_set_command(::msg::AlarmMessage_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AlarmMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  ::msg::Alarm* alarm_;
  int command_;
  friend struct ::TableStruct_alarm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Range

// required int32 x = 1;
inline bool Range::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Range::has_x() const {
  return _internal_has_x();
}
inline void Range::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::x() const {
  // @@protoc_insertion_point(field_get:msg.Range.x)
  return _internal_x();
}
inline void Range::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Range::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.Range.x)
}

// required int32 y = 2;
inline bool Range::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Range::has_y() const {
  return _internal_has_y();
}
inline void Range::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::y() const {
  // @@protoc_insertion_point(field_get:msg.Range.y)
  return _internal_y();
}
inline void Range::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Range::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.Range.y)
}

// required int32 w = 3;
inline bool Range::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Range::has_w() const {
  return _internal_has_w();
}
inline void Range::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::w() const {
  // @@protoc_insertion_point(field_get:msg.Range.w)
  return _internal_w();
}
inline void Range::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  w_ = value;
}
inline void Range::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:msg.Range.w)
}

// required int32 h = 4;
inline bool Range::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Range::has_h() const {
  return _internal_has_h();
}
inline void Range::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Range::h() const {
  // @@protoc_insertion_point(field_get:msg.Range.h)
  return _internal_h();
}
inline void Range::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  h_ = value;
}
inline void Range::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:msg.Range.h)
}

// -------------------------------------------------------------------

// Alarm

// required .msg.Alarm.Type type = 1;
inline bool Alarm::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Alarm::has_type() const {
  return _internal_has_type();
}
inline void Alarm::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::msg::Alarm_Type Alarm::_internal_type() const {
  return static_cast< ::msg::Alarm_Type >(type_);
}
inline ::msg::Alarm_Type Alarm::type() const {
  // @@protoc_insertion_point(field_get:msg.Alarm.type)
  return _internal_type();
}
inline void Alarm::_internal_set_type(::msg::Alarm_Type value) {
  assert(::msg::Alarm_Type_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void Alarm::set_type(::msg::Alarm_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.Alarm.type)
}

// required bytes camera = 2;
inline bool Alarm::_internal_has_camera() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Alarm::has_camera() const {
  return _internal_has_camera();
}
inline void Alarm::clear_camera() {
  camera_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Alarm::camera() const {
  // @@protoc_insertion_point(field_get:msg.Alarm.camera)
  return _internal_camera();
}
inline void Alarm::set_camera(const std::string& value) {
  _internal_set_camera(value);
  // @@protoc_insertion_point(field_set:msg.Alarm.camera)
}
inline std::string* Alarm::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:msg.Alarm.camera)
  return _internal_mutable_camera();
}
inline const std::string& Alarm::_internal_camera() const {
  return camera_.Get();
}
inline void Alarm::_internal_set_camera(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Alarm::set_camera(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Alarm.camera)
}
inline void Alarm::set_camera(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Alarm.camera)
}
inline void Alarm::set_camera(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Alarm.camera)
}
inline std::string* Alarm::_internal_mutable_camera() {
  _has_bits_[0] |= 0x00000001u;
  return camera_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Alarm::release_camera() {
  // @@protoc_insertion_point(field_release:msg.Alarm.camera)
  if (!_internal_has_camera()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return camera_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alarm::set_allocated_camera(std::string* camera) {
  if (camera != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Alarm.camera)
}

// required bytes timestamp = 3;
inline bool Alarm::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Alarm::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Alarm::clear_timestamp() {
  timestamp_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Alarm::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.Alarm.timestamp)
  return _internal_timestamp();
}
inline void Alarm::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.Alarm.timestamp)
}
inline std::string* Alarm::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:msg.Alarm.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& Alarm::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void Alarm::_internal_set_timestamp(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Alarm::set_timestamp(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Alarm.timestamp)
}
inline void Alarm::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Alarm.timestamp)
}
inline void Alarm::set_timestamp(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Alarm.timestamp)
}
inline std::string* Alarm::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Alarm::release_timestamp() {
  // @@protoc_insertion_point(field_release:msg.Alarm.timestamp)
  if (!_internal_has_timestamp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return timestamp_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alarm::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Alarm.timestamp)
}

// required bytes picture = 4;
inline bool Alarm::_internal_has_picture() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Alarm::has_picture() const {
  return _internal_has_picture();
}
inline void Alarm::clear_picture() {
  picture_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Alarm::picture() const {
  // @@protoc_insertion_point(field_get:msg.Alarm.picture)
  return _internal_picture();
}
inline void Alarm::set_picture(const std::string& value) {
  _internal_set_picture(value);
  // @@protoc_insertion_point(field_set:msg.Alarm.picture)
}
inline std::string* Alarm::mutable_picture() {
  // @@protoc_insertion_point(field_mutable:msg.Alarm.picture)
  return _internal_mutable_picture();
}
inline const std::string& Alarm::_internal_picture() const {
  return picture_.Get();
}
inline void Alarm::_internal_set_picture(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Alarm::set_picture(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Alarm.picture)
}
inline void Alarm::set_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Alarm.picture)
}
inline void Alarm::set_picture(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Alarm.picture)
}
inline std::string* Alarm::_internal_mutable_picture() {
  _has_bits_[0] |= 0x00000004u;
  return picture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Alarm::release_picture() {
  // @@protoc_insertion_point(field_release:msg.Alarm.picture)
  if (!_internal_has_picture()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return picture_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alarm::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Alarm.picture)
}

// repeated .msg.Range ranges = 5;
inline int Alarm::_internal_ranges_size() const {
  return ranges_.size();
}
inline int Alarm::ranges_size() const {
  return _internal_ranges_size();
}
inline void Alarm::clear_ranges() {
  ranges_.Clear();
}
inline ::msg::Range* Alarm::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:msg.Alarm.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Range >*
Alarm::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:msg.Alarm.ranges)
  return &ranges_;
}
inline const ::msg::Range& Alarm::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::msg::Range& Alarm::ranges(int index) const {
  // @@protoc_insertion_point(field_get:msg.Alarm.ranges)
  return _internal_ranges(index);
}
inline ::msg::Range* Alarm::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::msg::Range* Alarm::add_ranges() {
  // @@protoc_insertion_point(field_add:msg.Alarm.ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Range >&
Alarm::ranges() const {
  // @@protoc_insertion_point(field_list:msg.Alarm.ranges)
  return ranges_;
}

// optional bytes idforface = 6;
inline bool Alarm::_internal_has_idforface() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Alarm::has_idforface() const {
  return _internal_has_idforface();
}
inline void Alarm::clear_idforface() {
  idforface_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Alarm::idforface() const {
  // @@protoc_insertion_point(field_get:msg.Alarm.idforface)
  return _internal_idforface();
}
inline void Alarm::set_idforface(const std::string& value) {
  _internal_set_idforface(value);
  // @@protoc_insertion_point(field_set:msg.Alarm.idforface)
}
inline std::string* Alarm::mutable_idforface() {
  // @@protoc_insertion_point(field_mutable:msg.Alarm.idforface)
  return _internal_mutable_idforface();
}
inline const std::string& Alarm::_internal_idforface() const {
  return idforface_.Get();
}
inline void Alarm::_internal_set_idforface(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  idforface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Alarm::set_idforface(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  idforface_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Alarm.idforface)
}
inline void Alarm::set_idforface(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  idforface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Alarm.idforface)
}
inline void Alarm::set_idforface(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  idforface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Alarm.idforface)
}
inline std::string* Alarm::_internal_mutable_idforface() {
  _has_bits_[0] |= 0x00000008u;
  return idforface_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Alarm::release_idforface() {
  // @@protoc_insertion_point(field_release:msg.Alarm.idforface)
  if (!_internal_has_idforface()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return idforface_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alarm::set_allocated_idforface(std::string* idforface) {
  if (idforface != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  idforface_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idforface,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Alarm.idforface)
}

// optional bool inoutforface = 7;
inline bool Alarm::_internal_has_inoutforface() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Alarm::has_inoutforface() const {
  return _internal_has_inoutforface();
}
inline void Alarm::clear_inoutforface() {
  inoutforface_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Alarm::_internal_inoutforface() const {
  return inoutforface_;
}
inline bool Alarm::inoutforface() const {
  // @@protoc_insertion_point(field_get:msg.Alarm.inoutforface)
  return _internal_inoutforface();
}
inline void Alarm::_internal_set_inoutforface(bool value) {
  _has_bits_[0] |= 0x00000010u;
  inoutforface_ = value;
}
inline void Alarm::set_inoutforface(bool value) {
  _internal_set_inoutforface(value);
  // @@protoc_insertion_point(field_set:msg.Alarm.inoutforface)
}

// optional int32 bodycount = 8;
inline bool Alarm::_internal_has_bodycount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Alarm::has_bodycount() const {
  return _internal_has_bodycount();
}
inline void Alarm::clear_bodycount() {
  bodycount_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alarm::_internal_bodycount() const {
  return bodycount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alarm::bodycount() const {
  // @@protoc_insertion_point(field_get:msg.Alarm.bodycount)
  return _internal_bodycount();
}
inline void Alarm::_internal_set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  bodycount_ = value;
}
inline void Alarm::set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bodycount(value);
  // @@protoc_insertion_point(field_set:msg.Alarm.bodycount)
}

// -------------------------------------------------------------------

// AlarmMessage

// required .msg.AlarmMessage.Command command = 1;
inline bool AlarmMessage::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlarmMessage::has_command() const {
  return _internal_has_command();
}
inline void AlarmMessage::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::AlarmMessage_Command AlarmMessage::_internal_command() const {
  return static_cast< ::msg::AlarmMessage_Command >(command_);
}
inline ::msg::AlarmMessage_Command AlarmMessage::command() const {
  // @@protoc_insertion_point(field_get:msg.AlarmMessage.command)
  return _internal_command();
}
inline void AlarmMessage::_internal_set_command(::msg::AlarmMessage_Command value) {
  assert(::msg::AlarmMessage_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void AlarmMessage::set_command(::msg::AlarmMessage_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.AlarmMessage.command)
}

// optional .msg.Alarm alarm = 2;
inline bool AlarmMessage::_internal_has_alarm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || alarm_ != nullptr);
  return value;
}
inline bool AlarmMessage::has_alarm() const {
  return _internal_has_alarm();
}
inline void AlarmMessage::clear_alarm() {
  if (alarm_ != nullptr) alarm_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::Alarm& AlarmMessage::_internal_alarm() const {
  const ::msg::Alarm* p = alarm_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Alarm&>(
      ::msg::_Alarm_default_instance_);
}
inline const ::msg::Alarm& AlarmMessage::alarm() const {
  // @@protoc_insertion_point(field_get:msg.AlarmMessage.alarm)
  return _internal_alarm();
}
inline void AlarmMessage::unsafe_arena_set_allocated_alarm(
    ::msg::Alarm* alarm) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alarm_);
  }
  alarm_ = alarm;
  if (alarm) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.AlarmMessage.alarm)
}
inline ::msg::Alarm* AlarmMessage::release_alarm() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::Alarm* temp = alarm_;
  alarm_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Alarm* AlarmMessage::unsafe_arena_release_alarm() {
  // @@protoc_insertion_point(field_release:msg.AlarmMessage.alarm)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::Alarm* temp = alarm_;
  alarm_ = nullptr;
  return temp;
}
inline ::msg::Alarm* AlarmMessage::_internal_mutable_alarm() {
  _has_bits_[0] |= 0x00000002u;
  if (alarm_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Alarm>(GetArena());
    alarm_ = p;
  }
  return alarm_;
}
inline ::msg::Alarm* AlarmMessage::mutable_alarm() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmMessage.alarm)
  return _internal_mutable_alarm();
}
inline void AlarmMessage::set_allocated_alarm(::msg::Alarm* alarm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete alarm_;
  }
  if (alarm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alarm);
    if (message_arena != submessage_arena) {
      alarm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alarm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  alarm_ = alarm;
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmMessage.alarm)
}

// optional bytes pid = 3;
inline bool AlarmMessage::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlarmMessage::has_pid() const {
  return _internal_has_pid();
}
inline void AlarmMessage::clear_pid() {
  pid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlarmMessage::pid() const {
  // @@protoc_insertion_point(field_get:msg.AlarmMessage.pid)
  return _internal_pid();
}
inline void AlarmMessage::set_pid(const std::string& value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:msg.AlarmMessage.pid)
}
inline std::string* AlarmMessage::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmMessage.pid)
  return _internal_mutable_pid();
}
inline const std::string& AlarmMessage::_internal_pid() const {
  return pid_.Get();
}
inline void AlarmMessage::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmMessage::set_pid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlarmMessage.pid)
}
inline void AlarmMessage::set_pid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlarmMessage.pid)
}
inline void AlarmMessage::set_pid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlarmMessage.pid)
}
inline std::string* AlarmMessage::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmMessage::release_pid() {
  // @@protoc_insertion_point(field_release:msg.AlarmMessage.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmMessage::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmMessage.pid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::Alarm_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Alarm_Type>() {
  return ::msg::Alarm_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::AlarmMessage_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::AlarmMessage_Command>() {
  return ::msg::AlarmMessage_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_alarm_2eproto
