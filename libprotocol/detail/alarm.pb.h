// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alarm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_alarm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_alarm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_alarm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_alarm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alarm_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_alarm_2eproto_metadata_getter(int index);
namespace msg {
class AlarmInfo;
struct AlarmInfoDefaultTypeInternal;
extern AlarmInfoDefaultTypeInternal _AlarmInfo_default_instance_;
class AlarmMessage;
struct AlarmMessageDefaultTypeInternal;
extern AlarmMessageDefaultTypeInternal _AlarmMessage_default_instance_;
class PositionInfo;
struct PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::AlarmInfo* Arena::CreateMaybeMessage<::msg::AlarmInfo>(Arena*);
template<> ::msg::AlarmMessage* Arena::CreateMaybeMessage<::msg::AlarmMessage>(Arena*);
template<> ::msg::PositionInfo* Arena::CreateMaybeMessage<::msg::PositionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum AlarmInfo_AlarmType : int {
  AlarmInfo_AlarmType_ALARM_TYPE_HELMET = 1,
  AlarmInfo_AlarmType_ALARM_TYPE_PHONE = 2,
  AlarmInfo_AlarmType_ALARM_TYPE_SLEEP = 3,
  AlarmInfo_AlarmType_ALARM_TYPE_FIGHT = 4,
  AlarmInfo_AlarmType_ALARM_TYPE_FACE = 5,
  AlarmInfo_AlarmType_ALARM_TYPE_BODY = 6
};
bool AlarmInfo_AlarmType_IsValid(int value);
constexpr AlarmInfo_AlarmType AlarmInfo_AlarmType_AlarmType_MIN = AlarmInfo_AlarmType_ALARM_TYPE_HELMET;
constexpr AlarmInfo_AlarmType AlarmInfo_AlarmType_AlarmType_MAX = AlarmInfo_AlarmType_ALARM_TYPE_BODY;
constexpr int AlarmInfo_AlarmType_AlarmType_ARRAYSIZE = AlarmInfo_AlarmType_AlarmType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmInfo_AlarmType_descriptor();
template<typename T>
inline const std::string& AlarmInfo_AlarmType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlarmInfo_AlarmType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlarmInfo_AlarmType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlarmInfo_AlarmType_descriptor(), enum_t_value);
}
inline bool AlarmInfo_AlarmType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlarmInfo_AlarmType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlarmInfo_AlarmType>(
    AlarmInfo_AlarmType_descriptor(), name, value);
}
// ===================================================================

class PositionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PositionInfo) */ {
 public:
  inline PositionInfo() : PositionInfo(nullptr) {}
  virtual ~PositionInfo();
  explicit constexpr PositionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionInfo(const PositionInfo& from);
  PositionInfo(PositionInfo&& from) noexcept
    : PositionInfo() {
    *this = ::std::move(from);
  }

  inline PositionInfo& operator=(const PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionInfo& operator=(PositionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionInfo* internal_default_instance() {
    return reinterpret_cast<const PositionInfo*>(
               &_PositionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PositionInfo& a, PositionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionInfo* New() const final {
    return CreateMaybeMessage<PositionInfo>(nullptr);
  }

  PositionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionInfo& from);
  void MergeFrom(const PositionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PositionInfo";
  }
  protected:
  explicit PositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_alarm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 w = 3;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 h = 4;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PositionInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  friend struct ::TableStruct_alarm_2eproto;
};
// -------------------------------------------------------------------

class AlarmInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlarmInfo) */ {
 public:
  inline AlarmInfo() : AlarmInfo(nullptr) {}
  virtual ~AlarmInfo();
  explicit constexpr AlarmInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlarmInfo(const AlarmInfo& from);
  AlarmInfo(AlarmInfo&& from) noexcept
    : AlarmInfo() {
    *this = ::std::move(from);
  }

  inline AlarmInfo& operator=(const AlarmInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmInfo& operator=(AlarmInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlarmInfo* internal_default_instance() {
    return reinterpret_cast<const AlarmInfo*>(
               &_AlarmInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlarmInfo& a, AlarmInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmInfo* New() const final {
    return CreateMaybeMessage<AlarmInfo>(nullptr);
  }

  AlarmInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmInfo& from);
  void MergeFrom(const AlarmInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlarmInfo";
  }
  protected:
  explicit AlarmInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_alarm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlarmInfo_AlarmType AlarmType;
  static constexpr AlarmType ALARM_TYPE_HELMET =
    AlarmInfo_AlarmType_ALARM_TYPE_HELMET;
  static constexpr AlarmType ALARM_TYPE_PHONE =
    AlarmInfo_AlarmType_ALARM_TYPE_PHONE;
  static constexpr AlarmType ALARM_TYPE_SLEEP =
    AlarmInfo_AlarmType_ALARM_TYPE_SLEEP;
  static constexpr AlarmType ALARM_TYPE_FIGHT =
    AlarmInfo_AlarmType_ALARM_TYPE_FIGHT;
  static constexpr AlarmType ALARM_TYPE_FACE =
    AlarmInfo_AlarmType_ALARM_TYPE_FACE;
  static constexpr AlarmType ALARM_TYPE_BODY =
    AlarmInfo_AlarmType_ALARM_TYPE_BODY;
  static inline bool AlarmType_IsValid(int value) {
    return AlarmInfo_AlarmType_IsValid(value);
  }
  static constexpr AlarmType AlarmType_MIN =
    AlarmInfo_AlarmType_AlarmType_MIN;
  static constexpr AlarmType AlarmType_MAX =
    AlarmInfo_AlarmType_AlarmType_MAX;
  static constexpr int AlarmType_ARRAYSIZE =
    AlarmInfo_AlarmType_AlarmType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AlarmType_descriptor() {
    return AlarmInfo_AlarmType_descriptor();
  }
  template<typename T>
  static inline const std::string& AlarmType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AlarmType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AlarmType_Name.");
    return AlarmInfo_AlarmType_Name(enum_t_value);
  }
  static inline bool AlarmType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AlarmType* value) {
    return AlarmInfo_AlarmType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositioninfoFieldNumber = 5,
    kCameraFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kPictureFieldNumber = 4,
    kIdforfaceFieldNumber = 6,
    kInoutforfaceFieldNumber = 7,
    kBodycountFieldNumber = 8,
    kTypeFieldNumber = 1,
  };
  // repeated .msg.PositionInfo positioninfo = 5;
  int positioninfo_size() const;
  private:
  int _internal_positioninfo_size() const;
  public:
  void clear_positioninfo();
  ::msg::PositionInfo* mutable_positioninfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PositionInfo >*
      mutable_positioninfo();
  private:
  const ::msg::PositionInfo& _internal_positioninfo(int index) const;
  ::msg::PositionInfo* _internal_add_positioninfo();
  public:
  const ::msg::PositionInfo& positioninfo(int index) const;
  ::msg::PositionInfo* add_positioninfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PositionInfo >&
      positioninfo() const;

  // required bytes camera = 2;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const std::string& camera() const;
  void set_camera(const std::string& value);
  void set_camera(std::string&& value);
  void set_camera(const char* value);
  void set_camera(const void* value, size_t size);
  std::string* mutable_camera();
  std::string* release_camera();
  void set_allocated_camera(std::string* camera);
  private:
  const std::string& _internal_camera() const;
  void _internal_set_camera(const std::string& value);
  std::string* _internal_mutable_camera();
  public:

  // required bytes timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const void* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // required bytes picture = 4;
  bool has_picture() const;
  private:
  bool _internal_has_picture() const;
  public:
  void clear_picture();
  const std::string& picture() const;
  void set_picture(const std::string& value);
  void set_picture(std::string&& value);
  void set_picture(const char* value);
  void set_picture(const void* value, size_t size);
  std::string* mutable_picture();
  std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  private:
  const std::string& _internal_picture() const;
  void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // optional bytes idforface = 6;
  bool has_idforface() const;
  private:
  bool _internal_has_idforface() const;
  public:
  void clear_idforface();
  const std::string& idforface() const;
  void set_idforface(const std::string& value);
  void set_idforface(std::string&& value);
  void set_idforface(const char* value);
  void set_idforface(const void* value, size_t size);
  std::string* mutable_idforface();
  std::string* release_idforface();
  void set_allocated_idforface(std::string* idforface);
  private:
  const std::string& _internal_idforface() const;
  void _internal_set_idforface(const std::string& value);
  std::string* _internal_mutable_idforface();
  public:

  // optional bool inoutforface = 7;
  bool has_inoutforface() const;
  private:
  bool _internal_has_inoutforface() const;
  public:
  void clear_inoutforface();
  bool inoutforface() const;
  void set_inoutforface(bool value);
  private:
  bool _internal_inoutforface() const;
  void _internal_set_inoutforface(bool value);
  public:

  // optional int32 bodycount = 8;
  bool has_bodycount() const;
  private:
  bool _internal_has_bodycount() const;
  public:
  void clear_bodycount();
  ::PROTOBUF_NAMESPACE_ID::int32 bodycount() const;
  void set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bodycount() const;
  void _internal_set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.AlarmInfo.AlarmType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::AlarmInfo_AlarmType type() const;
  void set_type(::msg::AlarmInfo_AlarmType value);
  private:
  ::msg::AlarmInfo_AlarmType _internal_type() const;
  void _internal_set_type(::msg::AlarmInfo_AlarmType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AlarmInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PositionInfo > positioninfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idforface_;
  bool inoutforface_;
  ::PROTOBUF_NAMESPACE_ID::int32 bodycount_;
  int type_;
  friend struct ::TableStruct_alarm_2eproto;
};
// -------------------------------------------------------------------

class AlarmMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlarmMessage) */ {
 public:
  inline AlarmMessage() : AlarmMessage(nullptr) {}
  virtual ~AlarmMessage();
  explicit constexpr AlarmMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlarmMessage(const AlarmMessage& from);
  AlarmMessage(AlarmMessage&& from) noexcept
    : AlarmMessage() {
    *this = ::std::move(from);
  }

  inline AlarmMessage& operator=(const AlarmMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmMessage& operator=(AlarmMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlarmMessage* internal_default_instance() {
    return reinterpret_cast<const AlarmMessage*>(
               &_AlarmMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlarmMessage& a, AlarmMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmMessage* New() const final {
    return CreateMaybeMessage<AlarmMessage>(nullptr);
  }

  AlarmMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmMessage& from);
  void MergeFrom(const AlarmMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlarmMessage";
  }
  protected:
  explicit AlarmMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_alarm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // required .msg.AlarmInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::msg::AlarmInfo& info() const;
  ::msg::AlarmInfo* release_info();
  ::msg::AlarmInfo* mutable_info();
  void set_allocated_info(::msg::AlarmInfo* info);
  private:
  const ::msg::AlarmInfo& _internal_info() const;
  ::msg::AlarmInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::msg::AlarmInfo* info);
  ::msg::AlarmInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:msg.AlarmMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::AlarmInfo* info_;
  friend struct ::TableStruct_alarm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionInfo

// required int32 x = 1;
inline bool PositionInfo::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PositionInfo::has_x() const {
  return _internal_has_x();
}
inline void PositionInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::x() const {
  // @@protoc_insertion_point(field_get:msg.PositionInfo.x)
  return _internal_x();
}
inline void PositionInfo::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void PositionInfo::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.PositionInfo.x)
}

// required int32 y = 2;
inline bool PositionInfo::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PositionInfo::has_y() const {
  return _internal_has_y();
}
inline void PositionInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::y() const {
  // @@protoc_insertion_point(field_get:msg.PositionInfo.y)
  return _internal_y();
}
inline void PositionInfo::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void PositionInfo::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.PositionInfo.y)
}

// required int32 w = 3;
inline bool PositionInfo::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PositionInfo::has_w() const {
  return _internal_has_w();
}
inline void PositionInfo::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::w() const {
  // @@protoc_insertion_point(field_get:msg.PositionInfo.w)
  return _internal_w();
}
inline void PositionInfo::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  w_ = value;
}
inline void PositionInfo::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:msg.PositionInfo.w)
}

// required int32 h = 4;
inline bool PositionInfo::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PositionInfo::has_h() const {
  return _internal_has_h();
}
inline void PositionInfo::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionInfo::h() const {
  // @@protoc_insertion_point(field_get:msg.PositionInfo.h)
  return _internal_h();
}
inline void PositionInfo::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  h_ = value;
}
inline void PositionInfo::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:msg.PositionInfo.h)
}

// -------------------------------------------------------------------

// AlarmInfo

// required .msg.AlarmInfo.AlarmType type = 1;
inline bool AlarmInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AlarmInfo::has_type() const {
  return _internal_has_type();
}
inline void AlarmInfo::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::msg::AlarmInfo_AlarmType AlarmInfo::_internal_type() const {
  return static_cast< ::msg::AlarmInfo_AlarmType >(type_);
}
inline ::msg::AlarmInfo_AlarmType AlarmInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.type)
  return _internal_type();
}
inline void AlarmInfo::_internal_set_type(::msg::AlarmInfo_AlarmType value) {
  assert(::msg::AlarmInfo_AlarmType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void AlarmInfo::set_type(::msg::AlarmInfo_AlarmType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.type)
}

// required bytes camera = 2;
inline bool AlarmInfo::_internal_has_camera() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlarmInfo::has_camera() const {
  return _internal_has_camera();
}
inline void AlarmInfo::clear_camera() {
  camera_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlarmInfo::camera() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.camera)
  return _internal_camera();
}
inline void AlarmInfo::set_camera(const std::string& value) {
  _internal_set_camera(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.camera)
}
inline std::string* AlarmInfo::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.camera)
  return _internal_mutable_camera();
}
inline const std::string& AlarmInfo::_internal_camera() const {
  return camera_.Get();
}
inline void AlarmInfo::_internal_set_camera(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmInfo::set_camera(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlarmInfo.camera)
}
inline void AlarmInfo::set_camera(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlarmInfo.camera)
}
inline void AlarmInfo::set_camera(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlarmInfo.camera)
}
inline std::string* AlarmInfo::_internal_mutable_camera() {
  _has_bits_[0] |= 0x00000001u;
  return camera_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmInfo::release_camera() {
  // @@protoc_insertion_point(field_release:msg.AlarmInfo.camera)
  if (!_internal_has_camera()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return camera_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmInfo::set_allocated_camera(std::string* camera) {
  if (camera != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmInfo.camera)
}

// required bytes timestamp = 3;
inline bool AlarmInfo::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AlarmInfo::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void AlarmInfo::clear_timestamp() {
  timestamp_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AlarmInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.timestamp)
  return _internal_timestamp();
}
inline void AlarmInfo::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.timestamp)
}
inline std::string* AlarmInfo::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& AlarmInfo::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void AlarmInfo::_internal_set_timestamp(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmInfo::set_timestamp(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlarmInfo.timestamp)
}
inline void AlarmInfo::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlarmInfo.timestamp)
}
inline void AlarmInfo::set_timestamp(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlarmInfo.timestamp)
}
inline std::string* AlarmInfo::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmInfo::release_timestamp() {
  // @@protoc_insertion_point(field_release:msg.AlarmInfo.timestamp)
  if (!_internal_has_timestamp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return timestamp_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmInfo::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmInfo.timestamp)
}

// required bytes picture = 4;
inline bool AlarmInfo::_internal_has_picture() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlarmInfo::has_picture() const {
  return _internal_has_picture();
}
inline void AlarmInfo::clear_picture() {
  picture_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AlarmInfo::picture() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.picture)
  return _internal_picture();
}
inline void AlarmInfo::set_picture(const std::string& value) {
  _internal_set_picture(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.picture)
}
inline std::string* AlarmInfo::mutable_picture() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.picture)
  return _internal_mutable_picture();
}
inline const std::string& AlarmInfo::_internal_picture() const {
  return picture_.Get();
}
inline void AlarmInfo::_internal_set_picture(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmInfo::set_picture(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlarmInfo.picture)
}
inline void AlarmInfo::set_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlarmInfo.picture)
}
inline void AlarmInfo::set_picture(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlarmInfo.picture)
}
inline std::string* AlarmInfo::_internal_mutable_picture() {
  _has_bits_[0] |= 0x00000004u;
  return picture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmInfo::release_picture() {
  // @@protoc_insertion_point(field_release:msg.AlarmInfo.picture)
  if (!_internal_has_picture()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return picture_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmInfo::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmInfo.picture)
}

// repeated .msg.PositionInfo positioninfo = 5;
inline int AlarmInfo::_internal_positioninfo_size() const {
  return positioninfo_.size();
}
inline int AlarmInfo::positioninfo_size() const {
  return _internal_positioninfo_size();
}
inline void AlarmInfo::clear_positioninfo() {
  positioninfo_.Clear();
}
inline ::msg::PositionInfo* AlarmInfo::mutable_positioninfo(int index) {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.positioninfo)
  return positioninfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PositionInfo >*
AlarmInfo::mutable_positioninfo() {
  // @@protoc_insertion_point(field_mutable_list:msg.AlarmInfo.positioninfo)
  return &positioninfo_;
}
inline const ::msg::PositionInfo& AlarmInfo::_internal_positioninfo(int index) const {
  return positioninfo_.Get(index);
}
inline const ::msg::PositionInfo& AlarmInfo::positioninfo(int index) const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.positioninfo)
  return _internal_positioninfo(index);
}
inline ::msg::PositionInfo* AlarmInfo::_internal_add_positioninfo() {
  return positioninfo_.Add();
}
inline ::msg::PositionInfo* AlarmInfo::add_positioninfo() {
  // @@protoc_insertion_point(field_add:msg.AlarmInfo.positioninfo)
  return _internal_add_positioninfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PositionInfo >&
AlarmInfo::positioninfo() const {
  // @@protoc_insertion_point(field_list:msg.AlarmInfo.positioninfo)
  return positioninfo_;
}

// optional bytes idforface = 6;
inline bool AlarmInfo::_internal_has_idforface() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AlarmInfo::has_idforface() const {
  return _internal_has_idforface();
}
inline void AlarmInfo::clear_idforface() {
  idforface_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AlarmInfo::idforface() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.idforface)
  return _internal_idforface();
}
inline void AlarmInfo::set_idforface(const std::string& value) {
  _internal_set_idforface(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.idforface)
}
inline std::string* AlarmInfo::mutable_idforface() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmInfo.idforface)
  return _internal_mutable_idforface();
}
inline const std::string& AlarmInfo::_internal_idforface() const {
  return idforface_.Get();
}
inline void AlarmInfo::_internal_set_idforface(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  idforface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmInfo::set_idforface(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  idforface_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlarmInfo.idforface)
}
inline void AlarmInfo::set_idforface(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  idforface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlarmInfo.idforface)
}
inline void AlarmInfo::set_idforface(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  idforface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlarmInfo.idforface)
}
inline std::string* AlarmInfo::_internal_mutable_idforface() {
  _has_bits_[0] |= 0x00000008u;
  return idforface_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmInfo::release_idforface() {
  // @@protoc_insertion_point(field_release:msg.AlarmInfo.idforface)
  if (!_internal_has_idforface()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return idforface_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmInfo::set_allocated_idforface(std::string* idforface) {
  if (idforface != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  idforface_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idforface,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmInfo.idforface)
}

// optional bool inoutforface = 7;
inline bool AlarmInfo::_internal_has_inoutforface() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AlarmInfo::has_inoutforface() const {
  return _internal_has_inoutforface();
}
inline void AlarmInfo::clear_inoutforface() {
  inoutforface_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool AlarmInfo::_internal_inoutforface() const {
  return inoutforface_;
}
inline bool AlarmInfo::inoutforface() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.inoutforface)
  return _internal_inoutforface();
}
inline void AlarmInfo::_internal_set_inoutforface(bool value) {
  _has_bits_[0] |= 0x00000010u;
  inoutforface_ = value;
}
inline void AlarmInfo::set_inoutforface(bool value) {
  _internal_set_inoutforface(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.inoutforface)
}

// optional int32 bodycount = 8;
inline bool AlarmInfo::_internal_has_bodycount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AlarmInfo::has_bodycount() const {
  return _internal_has_bodycount();
}
inline void AlarmInfo::clear_bodycount() {
  bodycount_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmInfo::_internal_bodycount() const {
  return bodycount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmInfo::bodycount() const {
  // @@protoc_insertion_point(field_get:msg.AlarmInfo.bodycount)
  return _internal_bodycount();
}
inline void AlarmInfo::_internal_set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  bodycount_ = value;
}
inline void AlarmInfo::set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bodycount(value);
  // @@protoc_insertion_point(field_set:msg.AlarmInfo.bodycount)
}

// -------------------------------------------------------------------

// AlarmMessage

// required .msg.AlarmInfo info = 1;
inline bool AlarmMessage::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool AlarmMessage::has_info() const {
  return _internal_has_info();
}
inline void AlarmMessage::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::AlarmInfo& AlarmMessage::_internal_info() const {
  const ::msg::AlarmInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::AlarmInfo&>(
      ::msg::_AlarmInfo_default_instance_);
}
inline const ::msg::AlarmInfo& AlarmMessage::info() const {
  // @@protoc_insertion_point(field_get:msg.AlarmMessage.info)
  return _internal_info();
}
inline void AlarmMessage::unsafe_arena_set_allocated_info(
    ::msg::AlarmInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.AlarmMessage.info)
}
inline ::msg::AlarmInfo* AlarmMessage::release_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlarmInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::AlarmInfo* AlarmMessage::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:msg.AlarmMessage.info)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlarmInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::msg::AlarmInfo* AlarmMessage::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::AlarmInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::msg::AlarmInfo* AlarmMessage::mutable_info() {
  // @@protoc_insertion_point(field_mutable:msg.AlarmMessage.info)
  return _internal_mutable_info();
}
inline void AlarmMessage::set_allocated_info(::msg::AlarmInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:msg.AlarmMessage.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::AlarmInfo_AlarmType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::AlarmInfo_AlarmType>() {
  return ::msg::AlarmInfo_AlarmType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_alarm_2eproto
