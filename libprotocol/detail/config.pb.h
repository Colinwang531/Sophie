// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_config_2eproto_metadata_getter(int index);
namespace msg {
class AlgorithmInfo;
struct AlgorithmInfoDefaultTypeInternal;
extern AlgorithmInfoDefaultTypeInternal _AlgorithmInfo_default_instance_;
class CameraInfo;
struct CameraInfoDefaultTypeInternal;
extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
class ConfigureMessage;
struct ConfigureMessageDefaultTypeInternal;
extern ConfigureMessageDefaultTypeInternal _ConfigureMessage_default_instance_;
class CrewInfo;
struct CrewInfoDefaultTypeInternal;
extern CrewInfoDefaultTypeInternal _CrewInfo_default_instance_;
class DeviceInfo;
struct DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::AlgorithmInfo* Arena::CreateMaybeMessage<::msg::AlgorithmInfo>(Arena*);
template<> ::msg::CameraInfo* Arena::CreateMaybeMessage<::msg::CameraInfo>(Arena*);
template<> ::msg::ConfigureMessage* Arena::CreateMaybeMessage<::msg::ConfigureMessage>(Arena*);
template<> ::msg::CrewInfo* Arena::CreateMaybeMessage<::msg::CrewInfo>(Arena*);
template<> ::msg::DeviceInfo* Arena::CreateMaybeMessage<::msg::DeviceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum AlgorithmInfo_AlgorithmType : int {
  AlgorithmInfo_AlgorithmType_HELMET = 1,
  AlgorithmInfo_AlgorithmType_PHONE = 2,
  AlgorithmInfo_AlgorithmType_SLEEP = 3,
  AlgorithmInfo_AlgorithmType_FIGHT = 4,
  AlgorithmInfo_AlgorithmType_FACE = 5,
  AlgorithmInfo_AlgorithmType_OFFDUTY = 6,
  AlgorithmInfo_AlgorithmType_FIRE = 7
};
bool AlgorithmInfo_AlgorithmType_IsValid(int value);
constexpr AlgorithmInfo_AlgorithmType AlgorithmInfo_AlgorithmType_AlgorithmType_MIN = AlgorithmInfo_AlgorithmType_HELMET;
constexpr AlgorithmInfo_AlgorithmType AlgorithmInfo_AlgorithmType_AlgorithmType_MAX = AlgorithmInfo_AlgorithmType_FIRE;
constexpr int AlgorithmInfo_AlgorithmType_AlgorithmType_ARRAYSIZE = AlgorithmInfo_AlgorithmType_AlgorithmType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlgorithmInfo_AlgorithmType_descriptor();
template<typename T>
inline const std::string& AlgorithmInfo_AlgorithmType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlgorithmInfo_AlgorithmType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlgorithmInfo_AlgorithmType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlgorithmInfo_AlgorithmType_descriptor(), enum_t_value);
}
inline bool AlgorithmInfo_AlgorithmType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlgorithmInfo_AlgorithmType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlgorithmInfo_AlgorithmType>(
    AlgorithmInfo_AlgorithmType_descriptor(), name, value);
}
enum CameraInfo_CameraType : int {
  CameraInfo_CameraType_CAMERA_TYPE_ANALOG = 1,
  CameraInfo_CameraType_CAMERA_TYPE_DIGIST = 2
};
bool CameraInfo_CameraType_IsValid(int value);
constexpr CameraInfo_CameraType CameraInfo_CameraType_CameraType_MIN = CameraInfo_CameraType_CAMERA_TYPE_ANALOG;
constexpr CameraInfo_CameraType CameraInfo_CameraType_CameraType_MAX = CameraInfo_CameraType_CAMERA_TYPE_DIGIST;
constexpr int CameraInfo_CameraType_CameraType_ARRAYSIZE = CameraInfo_CameraType_CameraType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraInfo_CameraType_descriptor();
template<typename T>
inline const std::string& CameraInfo_CameraType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraInfo_CameraType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraInfo_CameraType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraInfo_CameraType_descriptor(), enum_t_value);
}
inline bool CameraInfo_CameraType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraInfo_CameraType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraInfo_CameraType>(
    CameraInfo_CameraType_descriptor(), name, value);
}
enum DeviceInfo_FactoryType : int {
  DeviceInfo_FactoryType_FACTORY_TYPE_HIKVISION = 1,
  DeviceInfo_FactoryType_FACTORY_TYPE_DAHUA = 2,
  DeviceInfo_FactoryType_FACTORY_TYPE_EATON = 3
};
bool DeviceInfo_FactoryType_IsValid(int value);
constexpr DeviceInfo_FactoryType DeviceInfo_FactoryType_FactoryType_MIN = DeviceInfo_FactoryType_FACTORY_TYPE_HIKVISION;
constexpr DeviceInfo_FactoryType DeviceInfo_FactoryType_FactoryType_MAX = DeviceInfo_FactoryType_FACTORY_TYPE_EATON;
constexpr int DeviceInfo_FactoryType_FactoryType_ARRAYSIZE = DeviceInfo_FactoryType_FactoryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceInfo_FactoryType_descriptor();
template<typename T>
inline const std::string& DeviceInfo_FactoryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceInfo_FactoryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceInfo_FactoryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceInfo_FactoryType_descriptor(), enum_t_value);
}
inline bool DeviceInfo_FactoryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceInfo_FactoryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceInfo_FactoryType>(
    DeviceInfo_FactoryType_descriptor(), name, value);
}
enum DeviceInfo_DeviceMode : int {
  DeviceInfo_DeviceMode_DEVICE_MODE_DVR = 1,
  DeviceInfo_DeviceMode_DEVICE_MODE_NVR = 2,
  DeviceInfo_DeviceMode_DEVICE_MODE_IPC = 3
};
bool DeviceInfo_DeviceMode_IsValid(int value);
constexpr DeviceInfo_DeviceMode DeviceInfo_DeviceMode_DeviceMode_MIN = DeviceInfo_DeviceMode_DEVICE_MODE_DVR;
constexpr DeviceInfo_DeviceMode DeviceInfo_DeviceMode_DeviceMode_MAX = DeviceInfo_DeviceMode_DEVICE_MODE_IPC;
constexpr int DeviceInfo_DeviceMode_DeviceMode_ARRAYSIZE = DeviceInfo_DeviceMode_DeviceMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceInfo_DeviceMode_descriptor();
template<typename T>
inline const std::string& DeviceInfo_DeviceMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceInfo_DeviceMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceInfo_DeviceMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceInfo_DeviceMode_descriptor(), enum_t_value);
}
inline bool DeviceInfo_DeviceMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceInfo_DeviceMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceInfo_DeviceMode>(
    DeviceInfo_DeviceMode_descriptor(), name, value);
}
enum ConfigureMessage_CommandType : int {
  ConfigureMessage_CommandType_COMMAND_TYPE_ALGO_NEW_REQ = 1,
  ConfigureMessage_CommandType_COMMAND_TYPE_ALGO_NEW_REP = 2,
  ConfigureMessage_CommandType_COMMAND_TYPE_DEVICE_NEW_REQ = 3,
  ConfigureMessage_CommandType_COMMAND_TYPE_DEVICE_NEW_REP = 4,
  ConfigureMessage_CommandType_COMMAND_TYPE_DEVICE_DELETE_REQ = 5,
  ConfigureMessage_CommandType_COMMAND_TYPE_DEVICE_DELETE_REP = 6,
  ConfigureMessage_CommandType_COMMAND_TYPE_SAIL_STATUS_SET_REQ = 7,
  ConfigureMessage_CommandType_COMMAND_TYPE_SAIL_STATUS_SET_REP = 8,
  ConfigureMessage_CommandType_COMMAND_TYPE_CREW_NEW_REQ = 9,
  ConfigureMessage_CommandType_COMMAND_TYPE_CREW_NEW_REP = 10
};
bool ConfigureMessage_CommandType_IsValid(int value);
constexpr ConfigureMessage_CommandType ConfigureMessage_CommandType_CommandType_MIN = ConfigureMessage_CommandType_COMMAND_TYPE_ALGO_NEW_REQ;
constexpr ConfigureMessage_CommandType ConfigureMessage_CommandType_CommandType_MAX = ConfigureMessage_CommandType_COMMAND_TYPE_CREW_NEW_REP;
constexpr int ConfigureMessage_CommandType_CommandType_ARRAYSIZE = ConfigureMessage_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigureMessage_CommandType_descriptor();
template<typename T>
inline const std::string& ConfigureMessage_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfigureMessage_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfigureMessage_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfigureMessage_CommandType_descriptor(), enum_t_value);
}
inline bool ConfigureMessage_CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfigureMessage_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfigureMessage_CommandType>(
    ConfigureMessage_CommandType_descriptor(), name, value);
}
// ===================================================================

class AlgorithmInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AlgorithmInfo) */ {
 public:
  inline AlgorithmInfo() : AlgorithmInfo(nullptr) {}
  virtual ~AlgorithmInfo();
  explicit constexpr AlgorithmInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlgorithmInfo(const AlgorithmInfo& from);
  AlgorithmInfo(AlgorithmInfo&& from) noexcept
    : AlgorithmInfo() {
    *this = ::std::move(from);
  }

  inline AlgorithmInfo& operator=(const AlgorithmInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmInfo& operator=(AlgorithmInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgorithmInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlgorithmInfo* internal_default_instance() {
    return reinterpret_cast<const AlgorithmInfo*>(
               &_AlgorithmInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlgorithmInfo& a, AlgorithmInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmInfo* New() const final {
    return CreateMaybeMessage<AlgorithmInfo>(nullptr);
  }

  AlgorithmInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgorithmInfo& from);
  void MergeFrom(const AlgorithmInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AlgorithmInfo";
  }
  protected:
  explicit AlgorithmInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_config_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlgorithmInfo_AlgorithmType AlgorithmType;
  static constexpr AlgorithmType HELMET =
    AlgorithmInfo_AlgorithmType_HELMET;
  static constexpr AlgorithmType PHONE =
    AlgorithmInfo_AlgorithmType_PHONE;
  static constexpr AlgorithmType SLEEP =
    AlgorithmInfo_AlgorithmType_SLEEP;
  static constexpr AlgorithmType FIGHT =
    AlgorithmInfo_AlgorithmType_FIGHT;
  static constexpr AlgorithmType FACE =
    AlgorithmInfo_AlgorithmType_FACE;
  static constexpr AlgorithmType OFFDUTY =
    AlgorithmInfo_AlgorithmType_OFFDUTY;
  static constexpr AlgorithmType FIRE =
    AlgorithmInfo_AlgorithmType_FIRE;
  static inline bool AlgorithmType_IsValid(int value) {
    return AlgorithmInfo_AlgorithmType_IsValid(value);
  }
  static constexpr AlgorithmType AlgorithmType_MIN =
    AlgorithmInfo_AlgorithmType_AlgorithmType_MIN;
  static constexpr AlgorithmType AlgorithmType_MAX =
    AlgorithmInfo_AlgorithmType_AlgorithmType_MAX;
  static constexpr int AlgorithmType_ARRAYSIZE =
    AlgorithmInfo_AlgorithmType_AlgorithmType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AlgorithmType_descriptor() {
    return AlgorithmInfo_AlgorithmType_descriptor();
  }
  template<typename T>
  static inline const std::string& AlgorithmType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AlgorithmType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AlgorithmType_Name.");
    return AlgorithmInfo_AlgorithmType_Name(enum_t_value);
  }
  static inline bool AlgorithmType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AlgorithmType* value) {
    return AlgorithmInfo_AlgorithmType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 3,
    kCameraFieldNumber = 4,
    kGpuFieldNumber = 2,
    kDectectFieldNumber = 5,
    kTrackFieldNumber = 6,
    kSeconddetectforphoneFieldNumber = 7,
    kSimilarforfaceFieldNumber = 8,
    kInoutforfaceFieldNumber = 9,
    kTriggertimeFieldNumber = 10,
    kTypeFieldNumber = 1,
  };
  // required bytes id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required bytes camera = 4;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const std::string& camera() const;
  void set_camera(const std::string& value);
  void set_camera(std::string&& value);
  void set_camera(const char* value);
  void set_camera(const void* value, size_t size);
  std::string* mutable_camera();
  std::string* release_camera();
  void set_allocated_camera(std::string* camera);
  private:
  const std::string& _internal_camera() const;
  void _internal_set_camera(const std::string& value);
  std::string* _internal_mutable_camera();
  public:

  // required int32 gpu = 2;
  bool has_gpu() const;
  private:
  bool _internal_has_gpu() const;
  public:
  void clear_gpu();
  ::PROTOBUF_NAMESPACE_ID::int32 gpu() const;
  void set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu() const;
  void _internal_set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float dectect = 5;
  bool has_dectect() const;
  private:
  bool _internal_has_dectect() const;
  public:
  void clear_dectect();
  float dectect() const;
  void set_dectect(float value);
  private:
  float _internal_dectect() const;
  void _internal_set_dectect(float value);
  public:

  // required float track = 6;
  bool has_track() const;
  private:
  bool _internal_has_track() const;
  public:
  void clear_track();
  float track() const;
  void set_track(float value);
  private:
  float _internal_track() const;
  void _internal_set_track(float value);
  public:

  // optional float seconddetectforphone = 7;
  bool has_seconddetectforphone() const;
  private:
  bool _internal_has_seconddetectforphone() const;
  public:
  void clear_seconddetectforphone();
  float seconddetectforphone() const;
  void set_seconddetectforphone(float value);
  private:
  float _internal_seconddetectforphone() const;
  void _internal_set_seconddetectforphone(float value);
  public:

  // optional float similarforface = 8;
  bool has_similarforface() const;
  private:
  bool _internal_has_similarforface() const;
  public:
  void clear_similarforface();
  float similarforface() const;
  void set_similarforface(float value);
  private:
  float _internal_similarforface() const;
  void _internal_set_similarforface(float value);
  public:

  // optional bool inoutforface = 9;
  bool has_inoutforface() const;
  private:
  bool _internal_has_inoutforface() const;
  public:
  void clear_inoutforface();
  bool inoutforface() const;
  void set_inoutforface(bool value);
  private:
  bool _internal_inoutforface() const;
  void _internal_set_inoutforface(bool value);
  public:

  // optional int32 triggertime = 10;
  bool has_triggertime() const;
  private:
  bool _internal_has_triggertime() const;
  public:
  void clear_triggertime();
  ::PROTOBUF_NAMESPACE_ID::int32 triggertime() const;
  void set_triggertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_triggertime() const;
  void _internal_set_triggertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.AlgorithmInfo.AlgorithmType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::AlgorithmInfo_AlgorithmType type() const;
  void set_type(::msg::AlgorithmInfo_AlgorithmType value);
  private:
  ::msg::AlgorithmInfo_AlgorithmType _internal_type() const;
  void _internal_set_type(::msg::AlgorithmInfo_AlgorithmType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AlgorithmInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_;
  float dectect_;
  float track_;
  float seconddetectforphone_;
  float similarforface_;
  bool inoutforface_;
  ::PROTOBUF_NAMESPACE_ID::int32 triggertime_;
  int type_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class CameraInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CameraInfo) */ {
 public:
  inline CameraInfo() : CameraInfo(nullptr) {}
  virtual ~CameraInfo();
  explicit constexpr CameraInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraInfo(const CameraInfo& from);
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo* New() const final {
    return CreateMaybeMessage<CameraInfo>(nullptr);
  }

  CameraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CameraInfo";
  }
  protected:
  explicit CameraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_config_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CameraInfo_CameraType CameraType;
  static constexpr CameraType CAMERA_TYPE_ANALOG =
    CameraInfo_CameraType_CAMERA_TYPE_ANALOG;
  static constexpr CameraType CAMERA_TYPE_DIGIST =
    CameraInfo_CameraType_CAMERA_TYPE_DIGIST;
  static inline bool CameraType_IsValid(int value) {
    return CameraInfo_CameraType_IsValid(value);
  }
  static constexpr CameraType CameraType_MIN =
    CameraInfo_CameraType_CameraType_MIN;
  static constexpr CameraType CameraType_MAX =
    CameraInfo_CameraType_CameraType_MAX;
  static constexpr int CameraType_ARRAYSIZE =
    CameraInfo_CameraType_CameraType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CameraType_descriptor() {
    return CameraInfo_CameraType_descriptor();
  }
  template<typename T>
  static inline const std::string& CameraType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CameraType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CameraType_Name.");
    return CameraInfo_CameraType_Name(enum_t_value);
  }
  static inline bool CameraType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CameraType* value) {
    return CameraInfo_CameraType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 2,
    kNicknameFieldNumber = 5,
    kIpv4FieldNumber = 6,
    kIndexFieldNumber = 3,
    kEnableFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // required bytes cid = 2;
  bool has_cid() const;
  private:
  bool _internal_has_cid() const;
  public:
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const void* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // required bytes nickname = 5;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // required bytes ipv4 = 6;
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  const std::string& ipv4() const;
  void set_ipv4(const std::string& value);
  void set_ipv4(std::string&& value);
  void set_ipv4(const char* value);
  void set_ipv4(const void* value, size_t size);
  std::string* mutable_ipv4();
  std::string* release_ipv4();
  void set_allocated_ipv4(std::string* ipv4);
  private:
  const std::string& _internal_ipv4() const;
  void _internal_set_ipv4(const std::string& value);
  std::string* _internal_mutable_ipv4();
  public:

  // required int32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool enable = 4;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // required .msg.CameraInfo.CameraType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::CameraInfo_CameraType type() const;
  void set_type(::msg::CameraInfo_CameraType value);
  private:
  ::msg::CameraInfo_CameraType _internal_type() const;
  void _internal_set_type(::msg::CameraInfo_CameraType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CameraInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  bool enable_;
  int type_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  virtual ~DeviceInfo();
  explicit constexpr DeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(nullptr);
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_config_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeviceInfo_FactoryType FactoryType;
  static constexpr FactoryType FACTORY_TYPE_HIKVISION =
    DeviceInfo_FactoryType_FACTORY_TYPE_HIKVISION;
  static constexpr FactoryType FACTORY_TYPE_DAHUA =
    DeviceInfo_FactoryType_FACTORY_TYPE_DAHUA;
  static constexpr FactoryType FACTORY_TYPE_EATON =
    DeviceInfo_FactoryType_FACTORY_TYPE_EATON;
  static inline bool FactoryType_IsValid(int value) {
    return DeviceInfo_FactoryType_IsValid(value);
  }
  static constexpr FactoryType FactoryType_MIN =
    DeviceInfo_FactoryType_FactoryType_MIN;
  static constexpr FactoryType FactoryType_MAX =
    DeviceInfo_FactoryType_FactoryType_MAX;
  static constexpr int FactoryType_ARRAYSIZE =
    DeviceInfo_FactoryType_FactoryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FactoryType_descriptor() {
    return DeviceInfo_FactoryType_descriptor();
  }
  template<typename T>
  static inline const std::string& FactoryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FactoryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FactoryType_Name.");
    return DeviceInfo_FactoryType_Name(enum_t_value);
  }
  static inline bool FactoryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FactoryType* value) {
    return DeviceInfo_FactoryType_Parse(name, value);
  }

  typedef DeviceInfo_DeviceMode DeviceMode;
  static constexpr DeviceMode DEVICE_MODE_DVR =
    DeviceInfo_DeviceMode_DEVICE_MODE_DVR;
  static constexpr DeviceMode DEVICE_MODE_NVR =
    DeviceInfo_DeviceMode_DEVICE_MODE_NVR;
  static constexpr DeviceMode DEVICE_MODE_IPC =
    DeviceInfo_DeviceMode_DEVICE_MODE_IPC;
  static inline bool DeviceMode_IsValid(int value) {
    return DeviceInfo_DeviceMode_IsValid(value);
  }
  static constexpr DeviceMode DeviceMode_MIN =
    DeviceInfo_DeviceMode_DeviceMode_MIN;
  static constexpr DeviceMode DeviceMode_MAX =
    DeviceInfo_DeviceMode_DeviceMode_MAX;
  static constexpr int DeviceMode_ARRAYSIZE =
    DeviceInfo_DeviceMode_DeviceMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceMode_descriptor() {
    return DeviceInfo_DeviceMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceMode_Name.");
    return DeviceInfo_DeviceMode_Name(enum_t_value);
  }
  static inline bool DeviceMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeviceMode* value) {
    return DeviceInfo_DeviceMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 10,
    kDidFieldNumber = 1,
    kUsernameFieldNumber = 5,
    kUserpwdFieldNumber = 6,
    kIpv4FieldNumber = 7,
    kNicknameFieldNumber = 9,
    kEnableFieldNumber = 2,
    kPortFieldNumber = 8,
    kTypeFieldNumber = 3,
    kModeFieldNumber = 4,
  };
  // repeated .msg.CameraInfo infos = 10;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::msg::CameraInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CameraInfo >*
      mutable_infos();
  private:
  const ::msg::CameraInfo& _internal_infos(int index) const;
  ::msg::CameraInfo* _internal_add_infos();
  public:
  const ::msg::CameraInfo& infos(int index) const;
  ::msg::CameraInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CameraInfo >&
      infos() const;

  // required bytes did = 1;
  bool has_did() const;
  private:
  bool _internal_has_did() const;
  public:
  void clear_did();
  const std::string& did() const;
  void set_did(const std::string& value);
  void set_did(std::string&& value);
  void set_did(const char* value);
  void set_did(const void* value, size_t size);
  std::string* mutable_did();
  std::string* release_did();
  void set_allocated_did(std::string* did);
  private:
  const std::string& _internal_did() const;
  void _internal_set_did(const std::string& value);
  std::string* _internal_mutable_did();
  public:

  // optional bytes username = 5;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional bytes userpwd = 6;
  bool has_userpwd() const;
  private:
  bool _internal_has_userpwd() const;
  public:
  void clear_userpwd();
  const std::string& userpwd() const;
  void set_userpwd(const std::string& value);
  void set_userpwd(std::string&& value);
  void set_userpwd(const char* value);
  void set_userpwd(const void* value, size_t size);
  std::string* mutable_userpwd();
  std::string* release_userpwd();
  void set_allocated_userpwd(std::string* userpwd);
  private:
  const std::string& _internal_userpwd() const;
  void _internal_set_userpwd(const std::string& value);
  std::string* _internal_mutable_userpwd();
  public:

  // optional bytes ipv4 = 7;
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  const std::string& ipv4() const;
  void set_ipv4(const std::string& value);
  void set_ipv4(std::string&& value);
  void set_ipv4(const char* value);
  void set_ipv4(const void* value, size_t size);
  std::string* mutable_ipv4();
  std::string* release_ipv4();
  void set_allocated_ipv4(std::string* ipv4);
  private:
  const std::string& _internal_ipv4() const;
  void _internal_set_ipv4(const std::string& value);
  std::string* _internal_mutable_ipv4();
  public:

  // optional bytes nickname = 9;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional int32 port = 8;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .msg.DeviceInfo.FactoryType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::DeviceInfo_FactoryType type() const;
  void set_type(::msg::DeviceInfo_FactoryType value);
  private:
  ::msg::DeviceInfo_FactoryType _internal_type() const;
  void _internal_set_type(::msg::DeviceInfo_FactoryType value);
  public:

  // optional .msg.DeviceInfo.DeviceMode mode = 4;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::msg::DeviceInfo_DeviceMode mode() const;
  void set_mode(::msg::DeviceInfo_DeviceMode value);
  private:
  ::msg::DeviceInfo_DeviceMode _internal_mode() const;
  void _internal_set_mode(::msg::DeviceInfo_DeviceMode value);
  public:

  // @@protoc_insertion_point(class_scope:msg.DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CameraInfo > infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr did_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int type_;
  int mode_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class CrewInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CrewInfo) */ {
 public:
  inline CrewInfo() : CrewInfo(nullptr) {}
  virtual ~CrewInfo();
  explicit constexpr CrewInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrewInfo(const CrewInfo& from);
  CrewInfo(CrewInfo&& from) noexcept
    : CrewInfo() {
    *this = ::std::move(from);
  }

  inline CrewInfo& operator=(const CrewInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewInfo& operator=(CrewInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrewInfo* internal_default_instance() {
    return reinterpret_cast<const CrewInfo*>(
               &_CrewInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CrewInfo& a, CrewInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewInfo* New() const final {
    return CreateMaybeMessage<CrewInfo>(nullptr);
  }

  CrewInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewInfo& from);
  void MergeFrom(const CrewInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CrewInfo";
  }
  protected:
  explicit CrewInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_config_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicturesFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kJobFieldNumber = 3,
  };
  // repeated bytes pictures = 4;
  int pictures_size() const;
  private:
  int _internal_pictures_size() const;
  public:
  void clear_pictures();
  const std::string& pictures(int index) const;
  std::string* mutable_pictures(int index);
  void set_pictures(int index, const std::string& value);
  void set_pictures(int index, std::string&& value);
  void set_pictures(int index, const char* value);
  void set_pictures(int index, const void* value, size_t size);
  std::string* add_pictures();
  void add_pictures(const std::string& value);
  void add_pictures(std::string&& value);
  void add_pictures(const char* value);
  void add_pictures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pictures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pictures();
  private:
  const std::string& _internal_pictures(int index) const;
  std::string* _internal_add_pictures();
  public:

  // required bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes job = 3;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const std::string& job() const;
  void set_job(const std::string& value);
  void set_job(std::string&& value);
  void set_job(const char* value);
  void set_job(const void* value, size_t size);
  std::string* mutable_job();
  std::string* release_job();
  void set_allocated_job(std::string* job);
  private:
  const std::string& _internal_job() const;
  void _internal_set_job(const std::string& value);
  std::string* _internal_mutable_job();
  public:

  // @@protoc_insertion_point(class_scope:msg.CrewInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pictures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class ConfigureMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ConfigureMessage) */ {
 public:
  inline ConfigureMessage() : ConfigureMessage(nullptr) {}
  virtual ~ConfigureMessage();
  explicit constexpr ConfigureMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigureMessage(const ConfigureMessage& from);
  ConfigureMessage(ConfigureMessage&& from) noexcept
    : ConfigureMessage() {
    *this = ::std::move(from);
  }

  inline ConfigureMessage& operator=(const ConfigureMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigureMessage& operator=(ConfigureMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigureMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigureMessage* internal_default_instance() {
    return reinterpret_cast<const ConfigureMessage*>(
               &_ConfigureMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConfigureMessage& a, ConfigureMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigureMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigureMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigureMessage* New() const final {
    return CreateMaybeMessage<ConfigureMessage>(nullptr);
  }

  ConfigureMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigureMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigureMessage& from);
  void MergeFrom(const ConfigureMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ConfigureMessage";
  }
  protected:
  explicit ConfigureMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_config_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConfigureMessage_CommandType CommandType;
  static constexpr CommandType COMMAND_TYPE_ALGO_NEW_REQ =
    ConfigureMessage_CommandType_COMMAND_TYPE_ALGO_NEW_REQ;
  static constexpr CommandType COMMAND_TYPE_ALGO_NEW_REP =
    ConfigureMessage_CommandType_COMMAND_TYPE_ALGO_NEW_REP;
  static constexpr CommandType COMMAND_TYPE_DEVICE_NEW_REQ =
    ConfigureMessage_CommandType_COMMAND_TYPE_DEVICE_NEW_REQ;
  static constexpr CommandType COMMAND_TYPE_DEVICE_NEW_REP =
    ConfigureMessage_CommandType_COMMAND_TYPE_DEVICE_NEW_REP;
  static constexpr CommandType COMMAND_TYPE_DEVICE_DELETE_REQ =
    ConfigureMessage_CommandType_COMMAND_TYPE_DEVICE_DELETE_REQ;
  static constexpr CommandType COMMAND_TYPE_DEVICE_DELETE_REP =
    ConfigureMessage_CommandType_COMMAND_TYPE_DEVICE_DELETE_REP;
  static constexpr CommandType COMMAND_TYPE_SAIL_STATUS_SET_REQ =
    ConfigureMessage_CommandType_COMMAND_TYPE_SAIL_STATUS_SET_REQ;
  static constexpr CommandType COMMAND_TYPE_SAIL_STATUS_SET_REP =
    ConfigureMessage_CommandType_COMMAND_TYPE_SAIL_STATUS_SET_REP;
  static constexpr CommandType COMMAND_TYPE_CREW_NEW_REQ =
    ConfigureMessage_CommandType_COMMAND_TYPE_CREW_NEW_REQ;
  static constexpr CommandType COMMAND_TYPE_CREW_NEW_REP =
    ConfigureMessage_CommandType_COMMAND_TYPE_CREW_NEW_REP;
  static inline bool CommandType_IsValid(int value) {
    return ConfigureMessage_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    ConfigureMessage_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    ConfigureMessage_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    ConfigureMessage_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return ConfigureMessage_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return ConfigureMessage_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandType* value) {
    return ConfigureMessage_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmFieldNumber = 2,
    kDeviceFieldNumber = 3,
    kCrewFieldNumber = 4,
    kStatusFieldNumber = 5,
    kSailFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // optional .msg.AlgorithmInfo algorithm = 2;
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  const ::msg::AlgorithmInfo& algorithm() const;
  ::msg::AlgorithmInfo* release_algorithm();
  ::msg::AlgorithmInfo* mutable_algorithm();
  void set_allocated_algorithm(::msg::AlgorithmInfo* algorithm);
  private:
  const ::msg::AlgorithmInfo& _internal_algorithm() const;
  ::msg::AlgorithmInfo* _internal_mutable_algorithm();
  public:
  void unsafe_arena_set_allocated_algorithm(
      ::msg::AlgorithmInfo* algorithm);
  ::msg::AlgorithmInfo* unsafe_arena_release_algorithm();

  // optional .msg.DeviceInfo device = 3;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::msg::DeviceInfo& device() const;
  ::msg::DeviceInfo* release_device();
  ::msg::DeviceInfo* mutable_device();
  void set_allocated_device(::msg::DeviceInfo* device);
  private:
  const ::msg::DeviceInfo& _internal_device() const;
  ::msg::DeviceInfo* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::msg::DeviceInfo* device);
  ::msg::DeviceInfo* unsafe_arena_release_device();

  // optional .msg.CrewInfo crew = 4;
  bool has_crew() const;
  private:
  bool _internal_has_crew() const;
  public:
  void clear_crew();
  const ::msg::CrewInfo& crew() const;
  ::msg::CrewInfo* release_crew();
  ::msg::CrewInfo* mutable_crew();
  void set_allocated_crew(::msg::CrewInfo* crew);
  private:
  const ::msg::CrewInfo& _internal_crew() const;
  ::msg::CrewInfo* _internal_mutable_crew();
  public:
  void unsafe_arena_set_allocated_crew(
      ::msg::CrewInfo* crew);
  ::msg::CrewInfo* unsafe_arena_release_crew();

  // optional int32 status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool sail = 6;
  bool has_sail() const;
  private:
  bool _internal_has_sail() const;
  public:
  void clear_sail();
  bool sail() const;
  void set_sail(bool value);
  private:
  bool _internal_sail() const;
  void _internal_set_sail(bool value);
  public:

  // required .msg.ConfigureMessage.CommandType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::ConfigureMessage_CommandType type() const;
  void set_type(::msg::ConfigureMessage_CommandType value);
  private:
  ::msg::ConfigureMessage_CommandType _internal_type() const;
  void _internal_set_type(::msg::ConfigureMessage_CommandType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ConfigureMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::AlgorithmInfo* algorithm_;
  ::msg::DeviceInfo* device_;
  ::msg::CrewInfo* crew_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  bool sail_;
  int type_;
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlgorithmInfo

// required .msg.AlgorithmInfo.AlgorithmType type = 1;
inline bool AlgorithmInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_type() const {
  return _internal_has_type();
}
inline void AlgorithmInfo::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::msg::AlgorithmInfo_AlgorithmType AlgorithmInfo::_internal_type() const {
  return static_cast< ::msg::AlgorithmInfo_AlgorithmType >(type_);
}
inline ::msg::AlgorithmInfo_AlgorithmType AlgorithmInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.type)
  return _internal_type();
}
inline void AlgorithmInfo::_internal_set_type(::msg::AlgorithmInfo_AlgorithmType value) {
  assert(::msg::AlgorithmInfo_AlgorithmType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void AlgorithmInfo::set_type(::msg::AlgorithmInfo_AlgorithmType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.type)
}

// required int32 gpu = 2;
inline bool AlgorithmInfo::_internal_has_gpu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_gpu() const {
  return _internal_has_gpu();
}
inline void AlgorithmInfo::clear_gpu() {
  gpu_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmInfo::_internal_gpu() const {
  return gpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmInfo::gpu() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.gpu)
  return _internal_gpu();
}
inline void AlgorithmInfo::_internal_set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  gpu_ = value;
}
inline void AlgorithmInfo::set_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpu(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.gpu)
}

// required bytes id = 3;
inline bool AlgorithmInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_id() const {
  return _internal_has_id();
}
inline void AlgorithmInfo::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlgorithmInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.id)
  return _internal_id();
}
inline void AlgorithmInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.id)
}
inline std::string* AlgorithmInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:msg.AlgorithmInfo.id)
  return _internal_mutable_id();
}
inline const std::string& AlgorithmInfo::_internal_id() const {
  return id_.Get();
}
inline void AlgorithmInfo::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlgorithmInfo::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlgorithmInfo.id)
}
inline void AlgorithmInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlgorithmInfo.id)
}
inline void AlgorithmInfo::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlgorithmInfo.id)
}
inline std::string* AlgorithmInfo::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlgorithmInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.AlgorithmInfo.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlgorithmInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlgorithmInfo.id)
}

// required bytes camera = 4;
inline bool AlgorithmInfo::_internal_has_camera() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_camera() const {
  return _internal_has_camera();
}
inline void AlgorithmInfo::clear_camera() {
  camera_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AlgorithmInfo::camera() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.camera)
  return _internal_camera();
}
inline void AlgorithmInfo::set_camera(const std::string& value) {
  _internal_set_camera(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.camera)
}
inline std::string* AlgorithmInfo::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:msg.AlgorithmInfo.camera)
  return _internal_mutable_camera();
}
inline const std::string& AlgorithmInfo::_internal_camera() const {
  return camera_.Get();
}
inline void AlgorithmInfo::_internal_set_camera(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlgorithmInfo::set_camera(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  camera_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AlgorithmInfo.camera)
}
inline void AlgorithmInfo::set_camera(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AlgorithmInfo.camera)
}
inline void AlgorithmInfo::set_camera(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AlgorithmInfo.camera)
}
inline std::string* AlgorithmInfo::_internal_mutable_camera() {
  _has_bits_[0] |= 0x00000002u;
  return camera_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlgorithmInfo::release_camera() {
  // @@protoc_insertion_point(field_release:msg.AlgorithmInfo.camera)
  if (!_internal_has_camera()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return camera_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlgorithmInfo::set_allocated_camera(std::string* camera) {
  if (camera != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  camera_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AlgorithmInfo.camera)
}

// required float dectect = 5;
inline bool AlgorithmInfo::_internal_has_dectect() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_dectect() const {
  return _internal_has_dectect();
}
inline void AlgorithmInfo::clear_dectect() {
  dectect_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float AlgorithmInfo::_internal_dectect() const {
  return dectect_;
}
inline float AlgorithmInfo::dectect() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.dectect)
  return _internal_dectect();
}
inline void AlgorithmInfo::_internal_set_dectect(float value) {
  _has_bits_[0] |= 0x00000008u;
  dectect_ = value;
}
inline void AlgorithmInfo::set_dectect(float value) {
  _internal_set_dectect(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.dectect)
}

// required float track = 6;
inline bool AlgorithmInfo::_internal_has_track() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_track() const {
  return _internal_has_track();
}
inline void AlgorithmInfo::clear_track() {
  track_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float AlgorithmInfo::_internal_track() const {
  return track_;
}
inline float AlgorithmInfo::track() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.track)
  return _internal_track();
}
inline void AlgorithmInfo::_internal_set_track(float value) {
  _has_bits_[0] |= 0x00000010u;
  track_ = value;
}
inline void AlgorithmInfo::set_track(float value) {
  _internal_set_track(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.track)
}

// optional float seconddetectforphone = 7;
inline bool AlgorithmInfo::_internal_has_seconddetectforphone() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_seconddetectforphone() const {
  return _internal_has_seconddetectforphone();
}
inline void AlgorithmInfo::clear_seconddetectforphone() {
  seconddetectforphone_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float AlgorithmInfo::_internal_seconddetectforphone() const {
  return seconddetectforphone_;
}
inline float AlgorithmInfo::seconddetectforphone() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.seconddetectforphone)
  return _internal_seconddetectforphone();
}
inline void AlgorithmInfo::_internal_set_seconddetectforphone(float value) {
  _has_bits_[0] |= 0x00000020u;
  seconddetectforphone_ = value;
}
inline void AlgorithmInfo::set_seconddetectforphone(float value) {
  _internal_set_seconddetectforphone(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.seconddetectforphone)
}

// optional float similarforface = 8;
inline bool AlgorithmInfo::_internal_has_similarforface() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_similarforface() const {
  return _internal_has_similarforface();
}
inline void AlgorithmInfo::clear_similarforface() {
  similarforface_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float AlgorithmInfo::_internal_similarforface() const {
  return similarforface_;
}
inline float AlgorithmInfo::similarforface() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.similarforface)
  return _internal_similarforface();
}
inline void AlgorithmInfo::_internal_set_similarforface(float value) {
  _has_bits_[0] |= 0x00000040u;
  similarforface_ = value;
}
inline void AlgorithmInfo::set_similarforface(float value) {
  _internal_set_similarforface(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.similarforface)
}

// optional bool inoutforface = 9;
inline bool AlgorithmInfo::_internal_has_inoutforface() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_inoutforface() const {
  return _internal_has_inoutforface();
}
inline void AlgorithmInfo::clear_inoutforface() {
  inoutforface_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool AlgorithmInfo::_internal_inoutforface() const {
  return inoutforface_;
}
inline bool AlgorithmInfo::inoutforface() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.inoutforface)
  return _internal_inoutforface();
}
inline void AlgorithmInfo::_internal_set_inoutforface(bool value) {
  _has_bits_[0] |= 0x00000080u;
  inoutforface_ = value;
}
inline void AlgorithmInfo::set_inoutforface(bool value) {
  _internal_set_inoutforface(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.inoutforface)
}

// optional int32 triggertime = 10;
inline bool AlgorithmInfo::_internal_has_triggertime() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AlgorithmInfo::has_triggertime() const {
  return _internal_has_triggertime();
}
inline void AlgorithmInfo::clear_triggertime() {
  triggertime_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmInfo::_internal_triggertime() const {
  return triggertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgorithmInfo::triggertime() const {
  // @@protoc_insertion_point(field_get:msg.AlgorithmInfo.triggertime)
  return _internal_triggertime();
}
inline void AlgorithmInfo::_internal_set_triggertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  triggertime_ = value;
}
inline void AlgorithmInfo::set_triggertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_triggertime(value);
  // @@protoc_insertion_point(field_set:msg.AlgorithmInfo.triggertime)
}

// -------------------------------------------------------------------

// CameraInfo

// required .msg.CameraInfo.CameraType type = 1;
inline bool CameraInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CameraInfo::has_type() const {
  return _internal_has_type();
}
inline void CameraInfo::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::msg::CameraInfo_CameraType CameraInfo::_internal_type() const {
  return static_cast< ::msg::CameraInfo_CameraType >(type_);
}
inline ::msg::CameraInfo_CameraType CameraInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.CameraInfo.type)
  return _internal_type();
}
inline void CameraInfo::_internal_set_type(::msg::CameraInfo_CameraType value) {
  assert(::msg::CameraInfo_CameraType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void CameraInfo::set_type(::msg::CameraInfo_CameraType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.CameraInfo.type)
}

// required bytes cid = 2;
inline bool CameraInfo::_internal_has_cid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraInfo::has_cid() const {
  return _internal_has_cid();
}
inline void CameraInfo::clear_cid() {
  cid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraInfo::cid() const {
  // @@protoc_insertion_point(field_get:msg.CameraInfo.cid)
  return _internal_cid();
}
inline void CameraInfo::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:msg.CameraInfo.cid)
}
inline std::string* CameraInfo::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:msg.CameraInfo.cid)
  return _internal_mutable_cid();
}
inline const std::string& CameraInfo::_internal_cid() const {
  return cid_.Get();
}
inline void CameraInfo::_internal_set_cid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CameraInfo::set_cid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CameraInfo.cid)
}
inline void CameraInfo::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CameraInfo.cid)
}
inline void CameraInfo::set_cid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CameraInfo.cid)
}
inline std::string* CameraInfo::_internal_mutable_cid() {
  _has_bits_[0] |= 0x00000001u;
  return cid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CameraInfo::release_cid() {
  // @@protoc_insertion_point(field_release:msg.CameraInfo.cid)
  if (!_internal_has_cid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraInfo::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CameraInfo.cid)
}

// required int32 index = 3;
inline bool CameraInfo::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CameraInfo::has_index() const {
  return _internal_has_index();
}
inline void CameraInfo::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraInfo::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraInfo::index() const {
  // @@protoc_insertion_point(field_get:msg.CameraInfo.index)
  return _internal_index();
}
inline void CameraInfo::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  index_ = value;
}
inline void CameraInfo::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:msg.CameraInfo.index)
}

// required bool enable = 4;
inline bool CameraInfo::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CameraInfo::has_enable() const {
  return _internal_has_enable();
}
inline void CameraInfo::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CameraInfo::_internal_enable() const {
  return enable_;
}
inline bool CameraInfo::enable() const {
  // @@protoc_insertion_point(field_get:msg.CameraInfo.enable)
  return _internal_enable();
}
inline void CameraInfo::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_ = value;
}
inline void CameraInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:msg.CameraInfo.enable)
}

// required bytes nickname = 5;
inline bool CameraInfo::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraInfo::has_nickname() const {
  return _internal_has_nickname();
}
inline void CameraInfo::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CameraInfo::nickname() const {
  // @@protoc_insertion_point(field_get:msg.CameraInfo.nickname)
  return _internal_nickname();
}
inline void CameraInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:msg.CameraInfo.nickname)
}
inline std::string* CameraInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:msg.CameraInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& CameraInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void CameraInfo::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CameraInfo::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CameraInfo.nickname)
}
inline void CameraInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CameraInfo.nickname)
}
inline void CameraInfo::set_nickname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CameraInfo.nickname)
}
inline std::string* CameraInfo::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000002u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CameraInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:msg.CameraInfo.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CameraInfo.nickname)
}

// required bytes ipv4 = 6;
inline bool CameraInfo::_internal_has_ipv4() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CameraInfo::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void CameraInfo::clear_ipv4() {
  ipv4_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CameraInfo::ipv4() const {
  // @@protoc_insertion_point(field_get:msg.CameraInfo.ipv4)
  return _internal_ipv4();
}
inline void CameraInfo::set_ipv4(const std::string& value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:msg.CameraInfo.ipv4)
}
inline std::string* CameraInfo::mutable_ipv4() {
  // @@protoc_insertion_point(field_mutable:msg.CameraInfo.ipv4)
  return _internal_mutable_ipv4();
}
inline const std::string& CameraInfo::_internal_ipv4() const {
  return ipv4_.Get();
}
inline void CameraInfo::_internal_set_ipv4(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CameraInfo::set_ipv4(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ipv4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CameraInfo.ipv4)
}
inline void CameraInfo::set_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CameraInfo.ipv4)
}
inline void CameraInfo::set_ipv4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CameraInfo.ipv4)
}
inline std::string* CameraInfo::_internal_mutable_ipv4() {
  _has_bits_[0] |= 0x00000004u;
  return ipv4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CameraInfo::release_ipv4() {
  // @@protoc_insertion_point(field_release:msg.CameraInfo.ipv4)
  if (!_internal_has_ipv4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ipv4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraInfo::set_allocated_ipv4(std::string* ipv4) {
  if (ipv4 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CameraInfo.ipv4)
}

// -------------------------------------------------------------------

// DeviceInfo

// required bytes did = 1;
inline bool DeviceInfo::_internal_has_did() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceInfo::has_did() const {
  return _internal_has_did();
}
inline void DeviceInfo::clear_did() {
  did_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceInfo::did() const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.did)
  return _internal_did();
}
inline void DeviceInfo::set_did(const std::string& value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:msg.DeviceInfo.did)
}
inline std::string* DeviceInfo::mutable_did() {
  // @@protoc_insertion_point(field_mutable:msg.DeviceInfo.did)
  return _internal_mutable_did();
}
inline const std::string& DeviceInfo::_internal_did() const {
  return did_.Get();
}
inline void DeviceInfo::_internal_set_did(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceInfo::set_did(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.DeviceInfo.did)
}
inline void DeviceInfo::set_did(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  did_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.DeviceInfo.did)
}
inline void DeviceInfo::set_did(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.DeviceInfo.did)
}
inline std::string* DeviceInfo::_internal_mutable_did() {
  _has_bits_[0] |= 0x00000001u;
  return did_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceInfo::release_did() {
  // @@protoc_insertion_point(field_release:msg.DeviceInfo.did)
  if (!_internal_has_did()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return did_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceInfo::set_allocated_did(std::string* did) {
  if (did != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  did_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), did,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.DeviceInfo.did)
}

// optional bool enable = 2;
inline bool DeviceInfo::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DeviceInfo::has_enable() const {
  return _internal_has_enable();
}
inline void DeviceInfo::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool DeviceInfo::_internal_enable() const {
  return enable_;
}
inline bool DeviceInfo::enable() const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.enable)
  return _internal_enable();
}
inline void DeviceInfo::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_ = value;
}
inline void DeviceInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:msg.DeviceInfo.enable)
}

// optional .msg.DeviceInfo.FactoryType type = 3;
inline bool DeviceInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DeviceInfo::has_type() const {
  return _internal_has_type();
}
inline void DeviceInfo::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::msg::DeviceInfo_FactoryType DeviceInfo::_internal_type() const {
  return static_cast< ::msg::DeviceInfo_FactoryType >(type_);
}
inline ::msg::DeviceInfo_FactoryType DeviceInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.type)
  return _internal_type();
}
inline void DeviceInfo::_internal_set_type(::msg::DeviceInfo_FactoryType value) {
  assert(::msg::DeviceInfo_FactoryType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void DeviceInfo::set_type(::msg::DeviceInfo_FactoryType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.DeviceInfo.type)
}

// optional .msg.DeviceInfo.DeviceMode mode = 4;
inline bool DeviceInfo::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DeviceInfo::has_mode() const {
  return _internal_has_mode();
}
inline void DeviceInfo::clear_mode() {
  mode_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::msg::DeviceInfo_DeviceMode DeviceInfo::_internal_mode() const {
  return static_cast< ::msg::DeviceInfo_DeviceMode >(mode_);
}
inline ::msg::DeviceInfo_DeviceMode DeviceInfo::mode() const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.mode)
  return _internal_mode();
}
inline void DeviceInfo::_internal_set_mode(::msg::DeviceInfo_DeviceMode value) {
  assert(::msg::DeviceInfo_DeviceMode_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  mode_ = value;
}
inline void DeviceInfo::set_mode(::msg::DeviceInfo_DeviceMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:msg.DeviceInfo.mode)
}

// optional bytes username = 5;
inline bool DeviceInfo::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceInfo::has_username() const {
  return _internal_has_username();
}
inline void DeviceInfo::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeviceInfo::username() const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.username)
  return _internal_username();
}
inline void DeviceInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:msg.DeviceInfo.username)
}
inline std::string* DeviceInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:msg.DeviceInfo.username)
  return _internal_mutable_username();
}
inline const std::string& DeviceInfo::_internal_username() const {
  return username_.Get();
}
inline void DeviceInfo::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceInfo::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.DeviceInfo.username)
}
inline void DeviceInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.DeviceInfo.username)
}
inline void DeviceInfo::set_username(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.DeviceInfo.username)
}
inline std::string* DeviceInfo::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000002u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceInfo::release_username() {
  // @@protoc_insertion_point(field_release:msg.DeviceInfo.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.DeviceInfo.username)
}

// optional bytes userpwd = 6;
inline bool DeviceInfo::_internal_has_userpwd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceInfo::has_userpwd() const {
  return _internal_has_userpwd();
}
inline void DeviceInfo::clear_userpwd() {
  userpwd_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DeviceInfo::userpwd() const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.userpwd)
  return _internal_userpwd();
}
inline void DeviceInfo::set_userpwd(const std::string& value) {
  _internal_set_userpwd(value);
  // @@protoc_insertion_point(field_set:msg.DeviceInfo.userpwd)
}
inline std::string* DeviceInfo::mutable_userpwd() {
  // @@protoc_insertion_point(field_mutable:msg.DeviceInfo.userpwd)
  return _internal_mutable_userpwd();
}
inline const std::string& DeviceInfo::_internal_userpwd() const {
  return userpwd_.Get();
}
inline void DeviceInfo::_internal_set_userpwd(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  userpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceInfo::set_userpwd(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  userpwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.DeviceInfo.userpwd)
}
inline void DeviceInfo::set_userpwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  userpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.DeviceInfo.userpwd)
}
inline void DeviceInfo::set_userpwd(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  userpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.DeviceInfo.userpwd)
}
inline std::string* DeviceInfo::_internal_mutable_userpwd() {
  _has_bits_[0] |= 0x00000004u;
  return userpwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceInfo::release_userpwd() {
  // @@protoc_insertion_point(field_release:msg.DeviceInfo.userpwd)
  if (!_internal_has_userpwd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return userpwd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceInfo::set_allocated_userpwd(std::string* userpwd) {
  if (userpwd != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  userpwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userpwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.DeviceInfo.userpwd)
}

// optional bytes ipv4 = 7;
inline bool DeviceInfo::_internal_has_ipv4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeviceInfo::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void DeviceInfo::clear_ipv4() {
  ipv4_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DeviceInfo::ipv4() const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.ipv4)
  return _internal_ipv4();
}
inline void DeviceInfo::set_ipv4(const std::string& value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:msg.DeviceInfo.ipv4)
}
inline std::string* DeviceInfo::mutable_ipv4() {
  // @@protoc_insertion_point(field_mutable:msg.DeviceInfo.ipv4)
  return _internal_mutable_ipv4();
}
inline const std::string& DeviceInfo::_internal_ipv4() const {
  return ipv4_.Get();
}
inline void DeviceInfo::_internal_set_ipv4(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceInfo::set_ipv4(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ipv4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.DeviceInfo.ipv4)
}
inline void DeviceInfo::set_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.DeviceInfo.ipv4)
}
inline void DeviceInfo::set_ipv4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.DeviceInfo.ipv4)
}
inline std::string* DeviceInfo::_internal_mutable_ipv4() {
  _has_bits_[0] |= 0x00000008u;
  return ipv4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceInfo::release_ipv4() {
  // @@protoc_insertion_point(field_release:msg.DeviceInfo.ipv4)
  if (!_internal_has_ipv4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ipv4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceInfo::set_allocated_ipv4(std::string* ipv4) {
  if (ipv4 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.DeviceInfo.ipv4)
}

// optional int32 port = 8;
inline bool DeviceInfo::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DeviceInfo::has_port() const {
  return _internal_has_port();
}
inline void DeviceInfo::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::port() const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.port)
  return _internal_port();
}
inline void DeviceInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  port_ = value;
}
inline void DeviceInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg.DeviceInfo.port)
}

// optional bytes nickname = 9;
inline bool DeviceInfo::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeviceInfo::has_nickname() const {
  return _internal_has_nickname();
}
inline void DeviceInfo::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DeviceInfo::nickname() const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.nickname)
  return _internal_nickname();
}
inline void DeviceInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:msg.DeviceInfo.nickname)
}
inline std::string* DeviceInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:msg.DeviceInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& DeviceInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void DeviceInfo::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceInfo::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.DeviceInfo.nickname)
}
inline void DeviceInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.DeviceInfo.nickname)
}
inline void DeviceInfo::set_nickname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.DeviceInfo.nickname)
}
inline std::string* DeviceInfo::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000010u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:msg.DeviceInfo.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.DeviceInfo.nickname)
}

// repeated .msg.CameraInfo infos = 10;
inline int DeviceInfo::_internal_infos_size() const {
  return infos_.size();
}
inline int DeviceInfo::infos_size() const {
  return _internal_infos_size();
}
inline void DeviceInfo::clear_infos() {
  infos_.Clear();
}
inline ::msg::CameraInfo* DeviceInfo::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:msg.DeviceInfo.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CameraInfo >*
DeviceInfo::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:msg.DeviceInfo.infos)
  return &infos_;
}
inline const ::msg::CameraInfo& DeviceInfo::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::msg::CameraInfo& DeviceInfo::infos(int index) const {
  // @@protoc_insertion_point(field_get:msg.DeviceInfo.infos)
  return _internal_infos(index);
}
inline ::msg::CameraInfo* DeviceInfo::_internal_add_infos() {
  return infos_.Add();
}
inline ::msg::CameraInfo* DeviceInfo::add_infos() {
  // @@protoc_insertion_point(field_add:msg.DeviceInfo.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CameraInfo >&
DeviceInfo::infos() const {
  // @@protoc_insertion_point(field_list:msg.DeviceInfo.infos)
  return infos_;
}

// -------------------------------------------------------------------

// CrewInfo

// required bytes id = 1;
inline bool CrewInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CrewInfo::has_id() const {
  return _internal_has_id();
}
inline void CrewInfo::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CrewInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CrewInfo.id)
  return _internal_id();
}
inline void CrewInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CrewInfo.id)
}
inline std::string* CrewInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:msg.CrewInfo.id)
  return _internal_mutable_id();
}
inline const std::string& CrewInfo::_internal_id() const {
  return id_.Get();
}
inline void CrewInfo::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CrewInfo::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CrewInfo.id)
}
inline void CrewInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CrewInfo.id)
}
inline void CrewInfo::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CrewInfo.id)
}
inline std::string* CrewInfo::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CrewInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.CrewInfo.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CrewInfo.id)
}

// optional bytes name = 2;
inline bool CrewInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CrewInfo::has_name() const {
  return _internal_has_name();
}
inline void CrewInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CrewInfo::name() const {
  // @@protoc_insertion_point(field_get:msg.CrewInfo.name)
  return _internal_name();
}
inline void CrewInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.CrewInfo.name)
}
inline std::string* CrewInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.CrewInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CrewInfo::_internal_name() const {
  return name_.Get();
}
inline void CrewInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CrewInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CrewInfo.name)
}
inline void CrewInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CrewInfo.name)
}
inline void CrewInfo::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CrewInfo.name)
}
inline std::string* CrewInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CrewInfo::release_name() {
  // @@protoc_insertion_point(field_release:msg.CrewInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CrewInfo.name)
}

// optional bytes job = 3;
inline bool CrewInfo::_internal_has_job() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CrewInfo::has_job() const {
  return _internal_has_job();
}
inline void CrewInfo::clear_job() {
  job_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CrewInfo::job() const {
  // @@protoc_insertion_point(field_get:msg.CrewInfo.job)
  return _internal_job();
}
inline void CrewInfo::set_job(const std::string& value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:msg.CrewInfo.job)
}
inline std::string* CrewInfo::mutable_job() {
  // @@protoc_insertion_point(field_mutable:msg.CrewInfo.job)
  return _internal_mutable_job();
}
inline const std::string& CrewInfo::_internal_job() const {
  return job_.Get();
}
inline void CrewInfo::_internal_set_job(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CrewInfo::set_job(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  job_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CrewInfo.job)
}
inline void CrewInfo::set_job(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CrewInfo.job)
}
inline void CrewInfo::set_job(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CrewInfo.job)
}
inline std::string* CrewInfo::_internal_mutable_job() {
  _has_bits_[0] |= 0x00000004u;
  return job_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CrewInfo::release_job() {
  // @@protoc_insertion_point(field_release:msg.CrewInfo.job)
  if (!_internal_has_job()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return job_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewInfo::set_allocated_job(std::string* job) {
  if (job != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  job_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CrewInfo.job)
}

// repeated bytes pictures = 4;
inline int CrewInfo::_internal_pictures_size() const {
  return pictures_.size();
}
inline int CrewInfo::pictures_size() const {
  return _internal_pictures_size();
}
inline void CrewInfo::clear_pictures() {
  pictures_.Clear();
}
inline std::string* CrewInfo::add_pictures() {
  // @@protoc_insertion_point(field_add_mutable:msg.CrewInfo.pictures)
  return _internal_add_pictures();
}
inline const std::string& CrewInfo::_internal_pictures(int index) const {
  return pictures_.Get(index);
}
inline const std::string& CrewInfo::pictures(int index) const {
  // @@protoc_insertion_point(field_get:msg.CrewInfo.pictures)
  return _internal_pictures(index);
}
inline std::string* CrewInfo::mutable_pictures(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CrewInfo.pictures)
  return pictures_.Mutable(index);
}
inline void CrewInfo::set_pictures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:msg.CrewInfo.pictures)
  pictures_.Mutable(index)->assign(value);
}
inline void CrewInfo::set_pictures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:msg.CrewInfo.pictures)
  pictures_.Mutable(index)->assign(std::move(value));
}
inline void CrewInfo::set_pictures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pictures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CrewInfo.pictures)
}
inline void CrewInfo::set_pictures(int index, const void* value, size_t size) {
  pictures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CrewInfo.pictures)
}
inline std::string* CrewInfo::_internal_add_pictures() {
  return pictures_.Add();
}
inline void CrewInfo::add_pictures(const std::string& value) {
  pictures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CrewInfo.pictures)
}
inline void CrewInfo::add_pictures(std::string&& value) {
  pictures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CrewInfo.pictures)
}
inline void CrewInfo::add_pictures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pictures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CrewInfo.pictures)
}
inline void CrewInfo::add_pictures(const void* value, size_t size) {
  pictures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CrewInfo.pictures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CrewInfo::pictures() const {
  // @@protoc_insertion_point(field_list:msg.CrewInfo.pictures)
  return pictures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CrewInfo::mutable_pictures() {
  // @@protoc_insertion_point(field_mutable_list:msg.CrewInfo.pictures)
  return &pictures_;
}

// -------------------------------------------------------------------

// ConfigureMessage

// required .msg.ConfigureMessage.CommandType type = 1;
inline bool ConfigureMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConfigureMessage::has_type() const {
  return _internal_has_type();
}
inline void ConfigureMessage::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::msg::ConfigureMessage_CommandType ConfigureMessage::_internal_type() const {
  return static_cast< ::msg::ConfigureMessage_CommandType >(type_);
}
inline ::msg::ConfigureMessage_CommandType ConfigureMessage::type() const {
  // @@protoc_insertion_point(field_get:msg.ConfigureMessage.type)
  return _internal_type();
}
inline void ConfigureMessage::_internal_set_type(::msg::ConfigureMessage_CommandType value) {
  assert(::msg::ConfigureMessage_CommandType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void ConfigureMessage::set_type(::msg::ConfigureMessage_CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.ConfigureMessage.type)
}

// optional .msg.AlgorithmInfo algorithm = 2;
inline bool ConfigureMessage::_internal_has_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || algorithm_ != nullptr);
  return value;
}
inline bool ConfigureMessage::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void ConfigureMessage::clear_algorithm() {
  if (algorithm_ != nullptr) algorithm_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::AlgorithmInfo& ConfigureMessage::_internal_algorithm() const {
  const ::msg::AlgorithmInfo* p = algorithm_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::AlgorithmInfo&>(
      ::msg::_AlgorithmInfo_default_instance_);
}
inline const ::msg::AlgorithmInfo& ConfigureMessage::algorithm() const {
  // @@protoc_insertion_point(field_get:msg.ConfigureMessage.algorithm)
  return _internal_algorithm();
}
inline void ConfigureMessage::unsafe_arena_set_allocated_algorithm(
    ::msg::AlgorithmInfo* algorithm) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algorithm_);
  }
  algorithm_ = algorithm;
  if (algorithm) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ConfigureMessage.algorithm)
}
inline ::msg::AlgorithmInfo* ConfigureMessage::release_algorithm() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlgorithmInfo* temp = algorithm_;
  algorithm_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::AlgorithmInfo* ConfigureMessage::unsafe_arena_release_algorithm() {
  // @@protoc_insertion_point(field_release:msg.ConfigureMessage.algorithm)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::AlgorithmInfo* temp = algorithm_;
  algorithm_ = nullptr;
  return temp;
}
inline ::msg::AlgorithmInfo* ConfigureMessage::_internal_mutable_algorithm() {
  _has_bits_[0] |= 0x00000001u;
  if (algorithm_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::AlgorithmInfo>(GetArena());
    algorithm_ = p;
  }
  return algorithm_;
}
inline ::msg::AlgorithmInfo* ConfigureMessage::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:msg.ConfigureMessage.algorithm)
  return _internal_mutable_algorithm();
}
inline void ConfigureMessage::set_allocated_algorithm(::msg::AlgorithmInfo* algorithm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete algorithm_;
  }
  if (algorithm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(algorithm);
    if (message_arena != submessage_arena) {
      algorithm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  algorithm_ = algorithm;
  // @@protoc_insertion_point(field_set_allocated:msg.ConfigureMessage.algorithm)
}

// optional .msg.DeviceInfo device = 3;
inline bool ConfigureMessage::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || device_ != nullptr);
  return value;
}
inline bool ConfigureMessage::has_device() const {
  return _internal_has_device();
}
inline void ConfigureMessage::clear_device() {
  if (device_ != nullptr) device_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::DeviceInfo& ConfigureMessage::_internal_device() const {
  const ::msg::DeviceInfo* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::DeviceInfo&>(
      ::msg::_DeviceInfo_default_instance_);
}
inline const ::msg::DeviceInfo& ConfigureMessage::device() const {
  // @@protoc_insertion_point(field_get:msg.ConfigureMessage.device)
  return _internal_device();
}
inline void ConfigureMessage::unsafe_arena_set_allocated_device(
    ::msg::DeviceInfo* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ConfigureMessage.device)
}
inline ::msg::DeviceInfo* ConfigureMessage::release_device() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::DeviceInfo* temp = device_;
  device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::DeviceInfo* ConfigureMessage::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:msg.ConfigureMessage.device)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::DeviceInfo* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::msg::DeviceInfo* ConfigureMessage::_internal_mutable_device() {
  _has_bits_[0] |= 0x00000002u;
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::DeviceInfo>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::msg::DeviceInfo* ConfigureMessage::mutable_device() {
  // @@protoc_insertion_point(field_mutable:msg.ConfigureMessage.device)
  return _internal_mutable_device();
}
inline void ConfigureMessage::set_allocated_device(::msg::DeviceInfo* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:msg.ConfigureMessage.device)
}

// optional .msg.CrewInfo crew = 4;
inline bool ConfigureMessage::_internal_has_crew() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || crew_ != nullptr);
  return value;
}
inline bool ConfigureMessage::has_crew() const {
  return _internal_has_crew();
}
inline void ConfigureMessage::clear_crew() {
  if (crew_ != nullptr) crew_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::msg::CrewInfo& ConfigureMessage::_internal_crew() const {
  const ::msg::CrewInfo* p = crew_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CrewInfo&>(
      ::msg::_CrewInfo_default_instance_);
}
inline const ::msg::CrewInfo& ConfigureMessage::crew() const {
  // @@protoc_insertion_point(field_get:msg.ConfigureMessage.crew)
  return _internal_crew();
}
inline void ConfigureMessage::unsafe_arena_set_allocated_crew(
    ::msg::CrewInfo* crew) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crew_);
  }
  crew_ = crew;
  if (crew) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ConfigureMessage.crew)
}
inline ::msg::CrewInfo* ConfigureMessage::release_crew() {
  _has_bits_[0] &= ~0x00000004u;
  ::msg::CrewInfo* temp = crew_;
  crew_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::CrewInfo* ConfigureMessage::unsafe_arena_release_crew() {
  // @@protoc_insertion_point(field_release:msg.ConfigureMessage.crew)
  _has_bits_[0] &= ~0x00000004u;
  ::msg::CrewInfo* temp = crew_;
  crew_ = nullptr;
  return temp;
}
inline ::msg::CrewInfo* ConfigureMessage::_internal_mutable_crew() {
  _has_bits_[0] |= 0x00000004u;
  if (crew_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CrewInfo>(GetArena());
    crew_ = p;
  }
  return crew_;
}
inline ::msg::CrewInfo* ConfigureMessage::mutable_crew() {
  // @@protoc_insertion_point(field_mutable:msg.ConfigureMessage.crew)
  return _internal_mutable_crew();
}
inline void ConfigureMessage::set_allocated_crew(::msg::CrewInfo* crew) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crew_;
  }
  if (crew) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crew);
    if (message_arena != submessage_arena) {
      crew = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crew, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  crew_ = crew;
  // @@protoc_insertion_point(field_set_allocated:msg.ConfigureMessage.crew)
}

// optional int32 status = 5;
inline bool ConfigureMessage::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConfigureMessage::has_status() const {
  return _internal_has_status();
}
inline void ConfigureMessage::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigureMessage::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigureMessage::status() const {
  // @@protoc_insertion_point(field_get:msg.ConfigureMessage.status)
  return _internal_status();
}
inline void ConfigureMessage::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void ConfigureMessage::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.ConfigureMessage.status)
}

// optional bool sail = 6;
inline bool ConfigureMessage::_internal_has_sail() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConfigureMessage::has_sail() const {
  return _internal_has_sail();
}
inline void ConfigureMessage::clear_sail() {
  sail_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ConfigureMessage::_internal_sail() const {
  return sail_;
}
inline bool ConfigureMessage::sail() const {
  // @@protoc_insertion_point(field_get:msg.ConfigureMessage.sail)
  return _internal_sail();
}
inline void ConfigureMessage::_internal_set_sail(bool value) {
  _has_bits_[0] |= 0x00000010u;
  sail_ = value;
}
inline void ConfigureMessage::set_sail(bool value) {
  _internal_set_sail(value);
  // @@protoc_insertion_point(field_set:msg.ConfigureMessage.sail)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::AlgorithmInfo_AlgorithmType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::AlgorithmInfo_AlgorithmType>() {
  return ::msg::AlgorithmInfo_AlgorithmType_descriptor();
}
template <> struct is_proto_enum< ::msg::CameraInfo_CameraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CameraInfo_CameraType>() {
  return ::msg::CameraInfo_CameraType_descriptor();
}
template <> struct is_proto_enum< ::msg::DeviceInfo_FactoryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::DeviceInfo_FactoryType>() {
  return ::msg::DeviceInfo_FactoryType_descriptor();
}
template <> struct is_proto_enum< ::msg::DeviceInfo_DeviceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::DeviceInfo_DeviceMode>() {
  return ::msg::DeviceInfo_DeviceMode_descriptor();
}
template <> struct is_proto_enum< ::msg::ConfigureMessage_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ConfigureMessage_CommandType>() {
  return ::msg::ConfigureMessage_CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
