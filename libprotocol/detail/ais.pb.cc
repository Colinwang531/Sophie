// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ais.proto

#include "ais.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace msg {
constexpr PositionA::PositionA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mmsi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , longitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repeatindicator_(0)
  , navigationalstatus_(0)
  , rot_(0)
  , sog_(0)
  , positionaccuracy_(0)
  , cog_(0)
  , trueheading_(0)
  , timestamp_(0)
  , specialindicator_(0)
  , spare_(0){}
struct PositionADefaultTypeInternal {
  constexpr PositionADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionADefaultTypeInternal() {}
  union {
    PositionA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionADefaultTypeInternal _PositionA_default_instance_;
constexpr ShipStatic::ShipStatic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mmsi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , callsign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dimensions_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repeatindicator_(0)
  , aisversion_(0)
  , imo_(0)
  , typeofshipcargo_(0)
  , epfd_(0)
  , month_(0)
  , day_(0)
  , hour_(0)
  , minute_(0)
  , draught_(0)
  , dte_(0)
  , spare_(0){}
struct ShipStaticDefaultTypeInternal {
  constexpr ShipStaticDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShipStaticDefaultTypeInternal() {}
  union {
    ShipStatic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShipStaticDefaultTypeInternal _ShipStatic_default_instance_;
constexpr StandardSAR::StandardSAR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mmsi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , longitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repeatindicator_(0)
  , altitude_(0)
  , sog_(0)
  , positionaccuracy_(0)
  , cog_(0)
  , timestamp_(0)
  , altitudesensor_(0)
  , spare_(0)
  , assignmodeflag_(0)
  , raimflag_(0)
  , commstateselectorflag_(0)
  , communicationstate_(0){}
struct StandardSARDefaultTypeInternal {
  constexpr StandardSARDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StandardSARDefaultTypeInternal() {}
  union {
    StandardSAR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StandardSARDefaultTypeInternal _StandardSAR_default_instance_;
constexpr PositionB::PositionB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mmsi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , longitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repeatindicator_(0)
  , spare1_(0)
  , sog_(0)
  , positionaccuracy_(0)
  , cog_(0)
  , trueheading_(0)
  , timestamp_(0)
  , spare2_(0)
  , bunitflag_(0)
  , bdisplayflag_(0)
  , bdscflag_(0)
  , bbandflag_(0)
  , bmessage22flag_(0)
  , modeflag_(0)
  , raimflag_(0)
  , commstateselectorflag_(0)
  , syncstate_(0)
  , slotincrement_(0)
  , numberofslots_(0)
  , keepflag_(0){}
struct PositionBDefaultTypeInternal {
  constexpr PositionBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionBDefaultTypeInternal() {}
  union {
    PositionB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionBDefaultTypeInternal _PositionB_default_instance_;
constexpr AidsToNavigation::AidsToNavigation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mmsi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , longitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dimensions_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extendname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repeatindicator_(0)
  , navigationtype_(0)
  , positionaccuracy_(0)
  , epfd_(0)
  , utctimestamp_(0)
  , onoffpositionindicator_(0)
  , atonflag_(0)
  , raimflag_(0)
  , virtualflag_(0)
  , modeindicator_(0)
  , spare_(0)
  , stufbits_(0){}
struct AidsToNavigationDefaultTypeInternal {
  constexpr AidsToNavigationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AidsToNavigationDefaultTypeInternal() {}
  union {
    AidsToNavigation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AidsToNavigationDefaultTypeInternal _AidsToNavigation_default_instance_;
constexpr AISMessage::AISMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , positiona_(nullptr)
  , shipstatic_(nullptr)
  , standardsar_(nullptr)
  , positionb_(nullptr)
  , aidstonavigation_(nullptr)
  , type_(1)
{}
struct AISMessageDefaultTypeInternal {
  constexpr AISMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AISMessageDefaultTypeInternal() {}
  union {
    AISMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AISMessageDefaultTypeInternal _AISMessage_default_instance_;
}  // namespace msg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ais_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ais_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ais_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ais_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, repeatindicator_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, mmsi_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, navigationalstatus_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, rot_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, sog_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, positionaccuracy_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, longitude_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, latitude_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, cog_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, trueheading_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, specialindicator_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionA, spare_),
  3,
  0,
  4,
  5,
  6,
  7,
  1,
  2,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, repeatindicator_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, mmsi_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, aisversion_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, imo_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, callsign_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, name_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, typeofshipcargo_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, dimensions_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, epfd_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, month_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, day_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, hour_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, minute_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, draught_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, destination_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, dte_),
  PROTOBUF_FIELD_OFFSET(::msg::ShipStatic, spare_),
  5,
  0,
  6,
  7,
  1,
  2,
  8,
  3,
  9,
  10,
  11,
  12,
  13,
  14,
  4,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, repeatindicator_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, mmsi_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, altitude_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, sog_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, positionaccuracy_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, longitude_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, latitude_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, cog_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, altitudesensor_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, spare_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, assignmodeflag_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, raimflag_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, commstateselectorflag_),
  PROTOBUF_FIELD_OFFSET(::msg::StandardSAR, communicationstate_),
  3,
  0,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, repeatindicator_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, mmsi_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, spare1_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, sog_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, positionaccuracy_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, longitude_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, latitude_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, cog_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, trueheading_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, spare2_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, bunitflag_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, bdisplayflag_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, bdscflag_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, bbandflag_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, bmessage22flag_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, modeflag_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, raimflag_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, commstateselectorflag_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, syncstate_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, slotincrement_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, numberofslots_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionB, keepflag_),
  3,
  0,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, repeatindicator_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, mmsi_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, navigationtype_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, name_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, positionaccuracy_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, longitude_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, latitude_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, dimensions_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, epfd_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, utctimestamp_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, onoffpositionindicator_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, atonflag_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, raimflag_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, virtualflag_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, modeindicator_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, spare_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, extendname_),
  PROTOBUF_FIELD_OFFSET(::msg::AidsToNavigation, stufbits_),
  6,
  0,
  7,
  1,
  8,
  2,
  3,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  5,
  17,
  PROTOBUF_FIELD_OFFSET(::msg::AISMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::AISMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::AISMessage, type_),
  PROTOBUF_FIELD_OFFSET(::msg::AISMessage, pid_),
  PROTOBUF_FIELD_OFFSET(::msg::AISMessage, positiona_),
  PROTOBUF_FIELD_OFFSET(::msg::AISMessage, shipstatic_),
  PROTOBUF_FIELD_OFFSET(::msg::AISMessage, standardsar_),
  PROTOBUF_FIELD_OFFSET(::msg::AISMessage, positionb_),
  PROTOBUF_FIELD_OFFSET(::msg::AISMessage, aidstonavigation_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::msg::PositionA)},
  { 31, 53, sizeof(::msg::ShipStatic)},
  { 70, 90, sizeof(::msg::StandardSAR)},
  { 105, 133, sizeof(::msg::PositionB)},
  { 156, 179, sizeof(::msg::AidsToNavigation)},
  { 197, 209, sizeof(::msg::AISMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_PositionA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_ShipStatic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_StandardSAR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_PositionB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_AidsToNavigation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_AISMessage_default_instance_),
};

const char descriptor_table_protodef_ais_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tais.proto\022\003msg\"\205\002\n\tPositionA\022\027\n\017repeat"
  "indicator\030\001 \002(\005\022\014\n\004mmsi\030\002 \002(\014\022\032\n\022navigat"
  "ionalstatus\030\003 \002(\005\022\013\n\003rot\030\004 \002(\002\022\013\n\003sog\030\005 "
  "\002(\002\022\030\n\020positionaccuracy\030\006 \002(\005\022\021\n\tlongitu"
  "de\030\007 \002(\014\022\020\n\010latitude\030\010 \002(\014\022\013\n\003cog\030\t \002(\002\022"
  "\023\n\013trueheading\030\n \002(\005\022\021\n\ttimestamp\030\013 \002(\005\022"
  "\030\n\020specialindicator\030\014 \002(\005\022\r\n\005spare\030\r \002(\005"
  "\"\253\002\n\nShipStatic\022\027\n\017repeatindicator\030\001 \002(\005"
  "\022\014\n\004mmsi\030\002 \002(\014\022\022\n\naisversion\030\003 \002(\005\022\013\n\003im"
  "o\030\004 \002(\005\022\020\n\010callsign\030\005 \002(\014\022\014\n\004name\030\006 \002(\014\022"
  "\027\n\017typeofshipcargo\030\007 \002(\005\022\022\n\ndimensions\030\010"
  " \002(\014\022\014\n\004epfd\030\t \002(\005\022\r\n\005month\030\n \002(\005\022\013\n\003day"
  "\030\013 \002(\005\022\014\n\004hour\030\014 \002(\005\022\016\n\006minute\030\r \002(\005\022\017\n\007"
  "draught\030\016 \002(\002\022\023\n\013destination\030\017 \002(\014\022\013\n\003dt"
  "e\030\020 \002(\005\022\r\n\005spare\030\021 \002(\005\"\276\002\n\013StandardSAR\022\027"
  "\n\017repeatindicator\030\001 \002(\005\022\014\n\004mmsi\030\002 \002(\014\022\020\n"
  "\010altitude\030\003 \002(\005\022\013\n\003sog\030\004 \002(\002\022\030\n\020position"
  "accuracy\030\005 \002(\005\022\021\n\tlongitude\030\006 \002(\014\022\020\n\010lat"
  "itude\030\007 \002(\014\022\013\n\003cog\030\010 \002(\002\022\021\n\ttimestamp\030\t "
  "\002(\005\022\026\n\016altitudesensor\030\n \002(\005\022\r\n\005spare\030\013 \002"
  "(\005\022\026\n\016assignmodeflag\030\014 \002(\005\022\020\n\010raimflag\030\r"
  " \002(\005\022\035\n\025commstateselectorflag\030\016 \002(\005\022\032\n\022c"
  "ommunicationstate\030\017 \002(\005\"\317\003\n\tPositionB\022\027\n"
  "\017repeatindicator\030\001 \002(\005\022\014\n\004mmsi\030\002 \002(\014\022\016\n\006"
  "spare1\030\003 \002(\005\022\013\n\003sog\030\004 \002(\002\022\030\n\020positionacc"
  "uracy\030\005 \002(\005\022\021\n\tlongitude\030\006 \002(\014\022\020\n\010latitu"
  "de\030\007 \002(\014\022\013\n\003cog\030\010 \002(\002\022\023\n\013trueheading\030\t \002"
  "(\005\022\021\n\ttimestamp\030\n \002(\005\022\016\n\006spare2\030\013 \002(\005\022\021\n"
  "\tbunitflag\030\014 \002(\005\022\024\n\014bdisplayflag\030\r \002(\005\022\020"
  "\n\010bdscflag\030\016 \002(\005\022\021\n\tbbandflag\030\017 \002(\005\022\026\n\016b"
  "message22flag\030\020 \002(\005\022\020\n\010modeflag\030\021 \002(\005\022\020\n"
  "\010raimflag\030\022 \002(\005\022\035\n\025commstateselectorflag"
  "\030\023 \002(\005\022\021\n\tsyncstate\030\024 \002(\005\022\025\n\rslotincreme"
  "nt\030\025 \002(\005\022\025\n\rnumberofslots\030\026 \002(\005\022\020\n\010keepf"
  "lag\030\027 \002(\005\"\373\002\n\020AidsToNavigation\022\027\n\017repeat"
  "indicator\030\001 \002(\005\022\014\n\004mmsi\030\002 \002(\014\022\026\n\016navigat"
  "iontype\030\003 \002(\005\022\014\n\004name\030\004 \002(\014\022\030\n\020positiona"
  "ccuracy\030\005 \002(\005\022\021\n\tlongitude\030\006 \002(\014\022\020\n\010lati"
  "tude\030\007 \002(\014\022\022\n\ndimensions\030\010 \002(\014\022\014\n\004epfd\030\t"
  " \002(\005\022\024\n\014utctimestamp\030\n \002(\005\022\036\n\026onoffposit"
  "ionindicator\030\013 \002(\005\022\020\n\010atonflag\030\014 \002(\005\022\020\n\010"
  "raimflag\030\r \002(\005\022\023\n\013virtualflag\030\016 \002(\005\022\025\n\rm"
  "odeindicator\030\017 \002(\005\022\r\n\005spare\030\020 \002(\005\022\022\n\next"
  "endname\030\021 \002(\014\022\020\n\010stufbits\030\022 \002(\005\"\343\002\n\nAISM"
  "essage\022\"\n\004type\030\001 \002(\0162\024.msg.AISMessage.Ty"
  "pe\022\013\n\003pid\030\002 \002(\014\022!\n\tpositiona\030\003 \001(\0132\016.msg"
  ".PositionA\022#\n\nshipstatic\030\004 \001(\0132\017.msg.Shi"
  "pStatic\022%\n\013standardsar\030\005 \001(\0132\020.msg.Stand"
  "ardSAR\022!\n\tpositionb\030\006 \001(\0132\016.msg.Position"
  "B\022/\n\020aidstonavigation\030\007 \001(\0132\025.msg.AidsTo"
  "Navigation\"a\n\004Type\022\016\n\nPOSITION_A\020\001\022\016\n\nPO"
  "SITION_B\020\002\022\017\n\013SHIP_STATIC\020\003\022\020\n\014STANDARD_"
  "SAR\020\004\022\026\n\022AIDS_TO_NAVIGATION\020\005"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ais_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ais_2eproto = {
  false, false, 2109, descriptor_table_protodef_ais_2eproto, "ais.proto", 
  &descriptor_table_ais_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_ais_2eproto::offsets,
  file_level_metadata_ais_2eproto, file_level_enum_descriptors_ais_2eproto, file_level_service_descriptors_ais_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_ais_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ais_2eproto);
  return descriptor_table_ais_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ais_2eproto(&descriptor_table_ais_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AISMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ais_2eproto);
  return file_level_enum_descriptors_ais_2eproto[0];
}
bool AISMessage_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AISMessage_Type AISMessage::POSITION_A;
constexpr AISMessage_Type AISMessage::POSITION_B;
constexpr AISMessage_Type AISMessage::SHIP_STATIC;
constexpr AISMessage_Type AISMessage::STANDARD_SAR;
constexpr AISMessage_Type AISMessage::AIDS_TO_NAVIGATION;
constexpr AISMessage_Type AISMessage::Type_MIN;
constexpr AISMessage_Type AISMessage::Type_MAX;
constexpr int AISMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PositionA::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionA>()._has_bits_);
  static void set_has_repeatindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mmsi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_navigationalstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sog(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_positionaccuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cog(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_trueheading(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_specialindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_spare(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001fff) ^ 0x00001fff) != 0;
  }
};

PositionA::PositionA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.PositionA)
}
PositionA::PositionA(const PositionA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mmsi()) {
    mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mmsi(), 
      GetArena());
  }
  longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_longitude()) {
    longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_longitude(), 
      GetArena());
  }
  latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_latitude()) {
    latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latitude(), 
      GetArena());
  }
  ::memcpy(&repeatindicator_, &from.repeatindicator_,
    static_cast<size_t>(reinterpret_cast<char*>(&spare_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(spare_));
  // @@protoc_insertion_point(copy_constructor:msg.PositionA)
}

void PositionA::SharedCtor() {
mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&repeatindicator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spare_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(spare_));
}

PositionA::~PositionA() {
  // @@protoc_insertion_point(destructor:msg.PositionA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mmsi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  longitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PositionA::ArenaDtor(void* object) {
  PositionA* _this = reinterpret_cast< PositionA* >(object);
  (void)_this;
}
void PositionA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionA::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PositionA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mmsi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      latitude_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&repeatindicator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&positionaccuracy_) -
        reinterpret_cast<char*>(&repeatindicator_)) + sizeof(positionaccuracy_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&cog_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spare_) -
        reinterpret_cast<char*>(&cog_)) + sizeof(spare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 repeatindicator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_repeatindicator(&has_bits);
          repeatindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes mmsi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mmsi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 navigationalstatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_navigationalstatus(&has_bits);
          navigationalstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float rot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_rot(&has_bits);
          rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float sog = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_sog(&has_bits);
          sog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 positionaccuracy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_positionaccuracy(&has_bits);
          positionaccuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_longitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes latitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_latitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float cog = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_cog(&has_bits);
          cog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 trueheading = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_trueheading(&has_bits);
          trueheading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 specialindicator = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_specialindicator(&has_bits);
          specialindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 spare = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_spare(&has_bits);
          spare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PositionA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 repeatindicator = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_repeatindicator(), target);
  }

  // required bytes mmsi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mmsi(), target);
  }

  // required int32 navigationalstatus = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_navigationalstatus(), target);
  }

  // required float rot = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rot(), target);
  }

  // required float sog = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_sog(), target);
  }

  // required int32 positionaccuracy = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_positionaccuracy(), target);
  }

  // required bytes longitude = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_longitude(), target);
  }

  // required bytes latitude = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_latitude(), target);
  }

  // required float cog = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_cog(), target);
  }

  // required int32 trueheading = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_trueheading(), target);
  }

  // required int32 timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_timestamp(), target);
  }

  // required int32 specialindicator = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_specialindicator(), target);
  }

  // required int32 spare = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_spare(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PositionA)
  return target;
}

size_t PositionA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg.PositionA)
  size_t total_size = 0;

  if (_internal_has_mmsi()) {
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());
  }

  if (_internal_has_longitude()) {
    // required bytes longitude = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_longitude());
  }

  if (_internal_has_latitude()) {
    // required bytes latitude = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latitude());
  }

  if (_internal_has_repeatindicator()) {
    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());
  }

  if (_internal_has_navigationalstatus()) {
    // required int32 navigationalstatus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_navigationalstatus());
  }

  if (_internal_has_rot()) {
    // required float rot = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_sog()) {
    // required float sog = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_positionaccuracy()) {
    // required int32 positionaccuracy = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());
  }

  if (_internal_has_cog()) {
    // required float cog = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_trueheading()) {
    // required int32 trueheading = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trueheading());
  }

  if (_internal_has_timestamp()) {
    // required int32 timestamp = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  if (_internal_has_specialindicator()) {
    // required int32 specialindicator = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_specialindicator());
  }

  if (_internal_has_spare()) {
    // required int32 spare = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare());
  }

  return total_size;
}
size_t PositionA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PositionA)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());

    // required bytes longitude = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_longitude());

    // required bytes latitude = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latitude());

    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());

    // required int32 navigationalstatus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_navigationalstatus());

    // required float rot = 4;
    total_size += 1 + 4;

    // required float sog = 5;
    total_size += 1 + 4;

    // required int32 positionaccuracy = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());

    // required float cog = 9;
    total_size += 1 + 4;

    // required int32 trueheading = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trueheading());

    // required int32 timestamp = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());

    // required int32 specialindicator = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_specialindicator());

    // required int32 spare = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.PositionA)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.PositionA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.PositionA)
    MergeFrom(*source);
  }
}

void PositionA::MergeFrom(const PositionA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PositionA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mmsi(from._internal_mmsi());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_longitude(from._internal_longitude());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_latitude(from._internal_latitude());
    }
    if (cached_has_bits & 0x00000008u) {
      repeatindicator_ = from.repeatindicator_;
    }
    if (cached_has_bits & 0x00000010u) {
      navigationalstatus_ = from.navigationalstatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      rot_ = from.rot_;
    }
    if (cached_has_bits & 0x00000040u) {
      sog_ = from.sog_;
    }
    if (cached_has_bits & 0x00000080u) {
      positionaccuracy_ = from.positionaccuracy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      cog_ = from.cog_;
    }
    if (cached_has_bits & 0x00000200u) {
      trueheading_ = from.trueheading_;
    }
    if (cached_has_bits & 0x00000400u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      specialindicator_ = from.specialindicator_;
    }
    if (cached_has_bits & 0x00001000u) {
      spare_ = from.spare_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PositionA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.PositionA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionA::CopyFrom(const PositionA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PositionA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PositionA::InternalSwap(PositionA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmsi_.Swap(&other->mmsi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  longitude_.Swap(&other->longitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latitude_.Swap(&other->latitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionA, spare_)
      + sizeof(PositionA::spare_)
      - PROTOBUF_FIELD_OFFSET(PositionA, repeatindicator_)>(
          reinterpret_cast<char*>(&repeatindicator_),
          reinterpret_cast<char*>(&other->repeatindicator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShipStatic::_Internal {
 public:
  using HasBits = decltype(std::declval<ShipStatic>()._has_bits_);
  static void set_has_repeatindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mmsi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aisversion(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_imo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_callsign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_typeofshipcargo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_epfd(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_draught(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dte(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_spare(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0001ffff) ^ 0x0001ffff) != 0;
  }
};

ShipStatic::ShipStatic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.ShipStatic)
}
ShipStatic::ShipStatic(const ShipStatic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mmsi()) {
    mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mmsi(), 
      GetArena());
  }
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_callsign()) {
    callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callsign(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  dimensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dimensions()) {
    dimensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dimensions(), 
      GetArena());
  }
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_destination()) {
    destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination(), 
      GetArena());
  }
  ::memcpy(&repeatindicator_, &from.repeatindicator_,
    static_cast<size_t>(reinterpret_cast<char*>(&spare_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(spare_));
  // @@protoc_insertion_point(copy_constructor:msg.ShipStatic)
}

void ShipStatic::SharedCtor() {
mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dimensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&repeatindicator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spare_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(spare_));
}

ShipStatic::~ShipStatic() {
  // @@protoc_insertion_point(destructor:msg.ShipStatic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShipStatic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mmsi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dimensions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShipStatic::ArenaDtor(void* object) {
  ShipStatic* _this = reinterpret_cast< ShipStatic* >(object);
  (void)_this;
}
void ShipStatic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShipStatic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShipStatic::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ShipStatic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mmsi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      callsign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      dimensions_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      destination_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&repeatindicator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imo_) -
        reinterpret_cast<char*>(&repeatindicator_)) + sizeof(imo_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&typeofshipcargo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dte_) -
        reinterpret_cast<char*>(&typeofshipcargo_)) + sizeof(dte_));
  }
  spare_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShipStatic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 repeatindicator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_repeatindicator(&has_bits);
          repeatindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes mmsi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mmsi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 aisversion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_aisversion(&has_bits);
          aisversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 imo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_imo(&has_bits);
          imo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes callsign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_callsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 typeofshipcargo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_typeofshipcargo(&has_bits);
          typeofshipcargo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes dimensions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_dimensions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 epfd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_epfd(&has_bits);
          epfd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 month = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 day = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_day(&has_bits);
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hour = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_hour(&has_bits);
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 minute = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_minute(&has_bits);
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float draught = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_draught(&has_bits);
          draught_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bytes destination = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 dte = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dte(&has_bits);
          dte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 spare = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_spare(&has_bits);
          spare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShipStatic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ShipStatic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 repeatindicator = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_repeatindicator(), target);
  }

  // required bytes mmsi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mmsi(), target);
  }

  // required int32 aisversion = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_aisversion(), target);
  }

  // required int32 imo = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_imo(), target);
  }

  // required bytes callsign = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_callsign(), target);
  }

  // required bytes name = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_name(), target);
  }

  // required int32 typeofshipcargo = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_typeofshipcargo(), target);
  }

  // required bytes dimensions = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_dimensions(), target);
  }

  // required int32 epfd = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_epfd(), target);
  }

  // required int32 month = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_month(), target);
  }

  // required int32 day = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_day(), target);
  }

  // required int32 hour = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_hour(), target);
  }

  // required int32 minute = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_minute(), target);
  }

  // required float draught = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_draught(), target);
  }

  // required bytes destination = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_destination(), target);
  }

  // required int32 dte = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_dte(), target);
  }

  // required int32 spare = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_spare(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ShipStatic)
  return target;
}

size_t ShipStatic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg.ShipStatic)
  size_t total_size = 0;

  if (_internal_has_mmsi()) {
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());
  }

  if (_internal_has_callsign()) {
    // required bytes callsign = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_callsign());
  }

  if (_internal_has_name()) {
    // required bytes name = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  if (_internal_has_dimensions()) {
    // required bytes dimensions = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dimensions());
  }

  if (_internal_has_destination()) {
    // required bytes destination = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destination());
  }

  if (_internal_has_repeatindicator()) {
    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());
  }

  if (_internal_has_aisversion()) {
    // required int32 aisversion = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aisversion());
  }

  if (_internal_has_imo()) {
    // required int32 imo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imo());
  }

  if (_internal_has_typeofshipcargo()) {
    // required int32 typeofshipcargo = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_typeofshipcargo());
  }

  if (_internal_has_epfd()) {
    // required int32 epfd = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epfd());
  }

  if (_internal_has_month()) {
    // required int32 month = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  if (_internal_has_day()) {
    // required int32 day = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  if (_internal_has_hour()) {
    // required int32 hour = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour());
  }

  if (_internal_has_minute()) {
    // required int32 minute = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minute());
  }

  if (_internal_has_draught()) {
    // required float draught = 14;
    total_size += 1 + 4;
  }

  if (_internal_has_dte()) {
    // required int32 dte = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dte());
  }

  if (_internal_has_spare()) {
    // required int32 spare = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare());
  }

  return total_size;
}
size_t ShipStatic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ShipStatic)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0001ffff) ^ 0x0001ffff) == 0) {  // All required fields are present.
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());

    // required bytes callsign = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_callsign());

    // required bytes name = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());

    // required bytes dimensions = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dimensions());

    // required bytes destination = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destination());

    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());

    // required int32 aisversion = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aisversion());

    // required int32 imo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imo());

    // required int32 typeofshipcargo = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_typeofshipcargo());

    // required int32 epfd = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epfd());

    // required int32 month = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());

    // required int32 day = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());

    // required int32 hour = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour());

    // required int32 minute = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minute());

    // required float draught = 14;
    total_size += 1 + 4;

    // required int32 dte = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dte());

    // required int32 spare = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShipStatic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.ShipStatic)
  GOOGLE_DCHECK_NE(&from, this);
  const ShipStatic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShipStatic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.ShipStatic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.ShipStatic)
    MergeFrom(*source);
  }
}

void ShipStatic::MergeFrom(const ShipStatic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ShipStatic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mmsi(from._internal_mmsi());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_callsign(from._internal_callsign());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_dimensions(from._internal_dimensions());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_destination(from._internal_destination());
    }
    if (cached_has_bits & 0x00000020u) {
      repeatindicator_ = from.repeatindicator_;
    }
    if (cached_has_bits & 0x00000040u) {
      aisversion_ = from.aisversion_;
    }
    if (cached_has_bits & 0x00000080u) {
      imo_ = from.imo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      typeofshipcargo_ = from.typeofshipcargo_;
    }
    if (cached_has_bits & 0x00000200u) {
      epfd_ = from.epfd_;
    }
    if (cached_has_bits & 0x00000400u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000800u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00001000u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00002000u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00004000u) {
      draught_ = from.draught_;
    }
    if (cached_has_bits & 0x00008000u) {
      dte_ = from.dte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_spare(from._internal_spare());
  }
}

void ShipStatic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.ShipStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipStatic::CopyFrom(const ShipStatic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ShipStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipStatic::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShipStatic::InternalSwap(ShipStatic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmsi_.Swap(&other->mmsi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  callsign_.Swap(&other->callsign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dimensions_.Swap(&other->dimensions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShipStatic, spare_)
      + sizeof(ShipStatic::spare_)
      - PROTOBUF_FIELD_OFFSET(ShipStatic, repeatindicator_)>(
          reinterpret_cast<char*>(&repeatindicator_),
          reinterpret_cast<char*>(&other->repeatindicator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShipStatic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StandardSAR::_Internal {
 public:
  using HasBits = decltype(std::declval<StandardSAR>()._has_bits_);
  static void set_has_repeatindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mmsi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sog(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_positionaccuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cog(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_altitudesensor(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spare(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_assignmodeflag(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_raimflag(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_commstateselectorflag(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_communicationstate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00007fff) ^ 0x00007fff) != 0;
  }
};

StandardSAR::StandardSAR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.StandardSAR)
}
StandardSAR::StandardSAR(const StandardSAR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mmsi()) {
    mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mmsi(), 
      GetArena());
  }
  longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_longitude()) {
    longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_longitude(), 
      GetArena());
  }
  latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_latitude()) {
    latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latitude(), 
      GetArena());
  }
  ::memcpy(&repeatindicator_, &from.repeatindicator_,
    static_cast<size_t>(reinterpret_cast<char*>(&communicationstate_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(communicationstate_));
  // @@protoc_insertion_point(copy_constructor:msg.StandardSAR)
}

void StandardSAR::SharedCtor() {
mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&repeatindicator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&communicationstate_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(communicationstate_));
}

StandardSAR::~StandardSAR() {
  // @@protoc_insertion_point(destructor:msg.StandardSAR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StandardSAR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mmsi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  longitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StandardSAR::ArenaDtor(void* object) {
  StandardSAR* _this = reinterpret_cast< StandardSAR* >(object);
  (void)_this;
}
void StandardSAR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StandardSAR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StandardSAR::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.StandardSAR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mmsi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      latitude_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&repeatindicator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cog_) -
        reinterpret_cast<char*>(&repeatindicator_)) + sizeof(cog_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&communicationstate_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(communicationstate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StandardSAR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 repeatindicator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_repeatindicator(&has_bits);
          repeatindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes mmsi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mmsi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float sog = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_sog(&has_bits);
          sog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 positionaccuracy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_positionaccuracy(&has_bits);
          positionaccuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_longitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes latitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_latitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float cog = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_cog(&has_bits);
          cog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 altitudesensor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_altitudesensor(&has_bits);
          altitudesensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 spare = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_spare(&has_bits);
          spare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 assignmodeflag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_assignmodeflag(&has_bits);
          assignmodeflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 raimflag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_raimflag(&has_bits);
          raimflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 commstateselectorflag = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_commstateselectorflag(&has_bits);
          commstateselectorflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 communicationstate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_communicationstate(&has_bits);
          communicationstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StandardSAR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.StandardSAR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 repeatindicator = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_repeatindicator(), target);
  }

  // required bytes mmsi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mmsi(), target);
  }

  // required int32 altitude = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_altitude(), target);
  }

  // required float sog = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_sog(), target);
  }

  // required int32 positionaccuracy = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_positionaccuracy(), target);
  }

  // required bytes longitude = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_longitude(), target);
  }

  // required bytes latitude = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_latitude(), target);
  }

  // required float cog = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_cog(), target);
  }

  // required int32 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_timestamp(), target);
  }

  // required int32 altitudesensor = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_altitudesensor(), target);
  }

  // required int32 spare = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_spare(), target);
  }

  // required int32 assignmodeflag = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_assignmodeflag(), target);
  }

  // required int32 raimflag = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_raimflag(), target);
  }

  // required int32 commstateselectorflag = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_commstateselectorflag(), target);
  }

  // required int32 communicationstate = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_communicationstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.StandardSAR)
  return target;
}

size_t StandardSAR::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg.StandardSAR)
  size_t total_size = 0;

  if (_internal_has_mmsi()) {
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());
  }

  if (_internal_has_longitude()) {
    // required bytes longitude = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_longitude());
  }

  if (_internal_has_latitude()) {
    // required bytes latitude = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latitude());
  }

  if (_internal_has_repeatindicator()) {
    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());
  }

  if (_internal_has_altitude()) {
    // required int32 altitude = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_altitude());
  }

  if (_internal_has_sog()) {
    // required float sog = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_positionaccuracy()) {
    // required int32 positionaccuracy = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());
  }

  if (_internal_has_cog()) {
    // required float cog = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_timestamp()) {
    // required int32 timestamp = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  if (_internal_has_altitudesensor()) {
    // required int32 altitudesensor = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_altitudesensor());
  }

  if (_internal_has_spare()) {
    // required int32 spare = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare());
  }

  if (_internal_has_assignmodeflag()) {
    // required int32 assignmodeflag = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_assignmodeflag());
  }

  if (_internal_has_raimflag()) {
    // required int32 raimflag = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raimflag());
  }

  if (_internal_has_commstateselectorflag()) {
    // required int32 commstateselectorflag = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commstateselectorflag());
  }

  if (_internal_has_communicationstate()) {
    // required int32 communicationstate = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_communicationstate());
  }

  return total_size;
}
size_t StandardSAR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.StandardSAR)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00007fff) ^ 0x00007fff) == 0) {  // All required fields are present.
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());

    // required bytes longitude = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_longitude());

    // required bytes latitude = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latitude());

    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());

    // required int32 altitude = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_altitude());

    // required float sog = 4;
    total_size += 1 + 4;

    // required int32 positionaccuracy = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());

    // required float cog = 8;
    total_size += 1 + 4;

    // required int32 timestamp = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());

    // required int32 altitudesensor = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_altitudesensor());

    // required int32 spare = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare());

    // required int32 assignmodeflag = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_assignmodeflag());

    // required int32 raimflag = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raimflag());

    // required int32 commstateselectorflag = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commstateselectorflag());

    // required int32 communicationstate = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_communicationstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StandardSAR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.StandardSAR)
  GOOGLE_DCHECK_NE(&from, this);
  const StandardSAR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StandardSAR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.StandardSAR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.StandardSAR)
    MergeFrom(*source);
  }
}

void StandardSAR::MergeFrom(const StandardSAR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.StandardSAR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mmsi(from._internal_mmsi());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_longitude(from._internal_longitude());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_latitude(from._internal_latitude());
    }
    if (cached_has_bits & 0x00000008u) {
      repeatindicator_ = from.repeatindicator_;
    }
    if (cached_has_bits & 0x00000010u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      sog_ = from.sog_;
    }
    if (cached_has_bits & 0x00000040u) {
      positionaccuracy_ = from.positionaccuracy_;
    }
    if (cached_has_bits & 0x00000080u) {
      cog_ = from.cog_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      altitudesensor_ = from.altitudesensor_;
    }
    if (cached_has_bits & 0x00000400u) {
      spare_ = from.spare_;
    }
    if (cached_has_bits & 0x00000800u) {
      assignmodeflag_ = from.assignmodeflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      raimflag_ = from.raimflag_;
    }
    if (cached_has_bits & 0x00002000u) {
      commstateselectorflag_ = from.commstateselectorflag_;
    }
    if (cached_has_bits & 0x00004000u) {
      communicationstate_ = from.communicationstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StandardSAR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.StandardSAR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandardSAR::CopyFrom(const StandardSAR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.StandardSAR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardSAR::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StandardSAR::InternalSwap(StandardSAR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmsi_.Swap(&other->mmsi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  longitude_.Swap(&other->longitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latitude_.Swap(&other->latitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StandardSAR, communicationstate_)
      + sizeof(StandardSAR::communicationstate_)
      - PROTOBUF_FIELD_OFFSET(StandardSAR, repeatindicator_)>(
          reinterpret_cast<char*>(&repeatindicator_),
          reinterpret_cast<char*>(&other->repeatindicator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StandardSAR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionB::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionB>()._has_bits_);
  static void set_has_repeatindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mmsi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spare1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sog(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_positionaccuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cog(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trueheading(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spare2(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bunitflag(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bdisplayflag(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bdscflag(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bbandflag(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bmessage22flag(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_modeflag(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_raimflag(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_commstateselectorflag(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_syncstate(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_slotincrement(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_numberofslots(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_keepflag(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x007fffff) ^ 0x007fffff) != 0;
  }
};

PositionB::PositionB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.PositionB)
}
PositionB::PositionB(const PositionB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mmsi()) {
    mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mmsi(), 
      GetArena());
  }
  longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_longitude()) {
    longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_longitude(), 
      GetArena());
  }
  latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_latitude()) {
    latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latitude(), 
      GetArena());
  }
  ::memcpy(&repeatindicator_, &from.repeatindicator_,
    static_cast<size_t>(reinterpret_cast<char*>(&keepflag_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(keepflag_));
  // @@protoc_insertion_point(copy_constructor:msg.PositionB)
}

void PositionB::SharedCtor() {
mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&repeatindicator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keepflag_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(keepflag_));
}

PositionB::~PositionB() {
  // @@protoc_insertion_point(destructor:msg.PositionB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mmsi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  longitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PositionB::ArenaDtor(void* object) {
  PositionB* _this = reinterpret_cast< PositionB* >(object);
  (void)_this;
}
void PositionB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionB::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PositionB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mmsi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      latitude_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&repeatindicator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cog_) -
        reinterpret_cast<char*>(&repeatindicator_)) + sizeof(cog_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&trueheading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bmessage22flag_) -
        reinterpret_cast<char*>(&trueheading_)) + sizeof(bmessage22flag_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&modeflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keepflag_) -
        reinterpret_cast<char*>(&modeflag_)) + sizeof(keepflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 repeatindicator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_repeatindicator(&has_bits);
          repeatindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes mmsi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mmsi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 spare1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_spare1(&has_bits);
          spare1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float sog = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_sog(&has_bits);
          sog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 positionaccuracy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_positionaccuracy(&has_bits);
          positionaccuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_longitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes latitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_latitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float cog = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_cog(&has_bits);
          cog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 trueheading = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_trueheading(&has_bits);
          trueheading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 spare2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_spare2(&has_bits);
          spare2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 bunitflag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_bunitflag(&has_bits);
          bunitflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 bdisplayflag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bdisplayflag(&has_bits);
          bdisplayflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 bdscflag = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_bdscflag(&has_bits);
          bdscflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 bbandflag = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_bbandflag(&has_bits);
          bbandflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 bmessage22flag = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_bmessage22flag(&has_bits);
          bmessage22flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 modeflag = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_modeflag(&has_bits);
          modeflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 raimflag = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_raimflag(&has_bits);
          raimflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 commstateselectorflag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_commstateselectorflag(&has_bits);
          commstateselectorflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 syncstate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_syncstate(&has_bits);
          syncstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 slotincrement = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_slotincrement(&has_bits);
          slotincrement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 numberofslots = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_numberofslots(&has_bits);
          numberofslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 keepflag = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_keepflag(&has_bits);
          keepflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PositionB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 repeatindicator = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_repeatindicator(), target);
  }

  // required bytes mmsi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mmsi(), target);
  }

  // required int32 spare1 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_spare1(), target);
  }

  // required float sog = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_sog(), target);
  }

  // required int32 positionaccuracy = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_positionaccuracy(), target);
  }

  // required bytes longitude = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_longitude(), target);
  }

  // required bytes latitude = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_latitude(), target);
  }

  // required float cog = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_cog(), target);
  }

  // required int32 trueheading = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_trueheading(), target);
  }

  // required int32 timestamp = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_timestamp(), target);
  }

  // required int32 spare2 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_spare2(), target);
  }

  // required int32 bunitflag = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_bunitflag(), target);
  }

  // required int32 bdisplayflag = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_bdisplayflag(), target);
  }

  // required int32 bdscflag = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_bdscflag(), target);
  }

  // required int32 bbandflag = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_bbandflag(), target);
  }

  // required int32 bmessage22flag = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_bmessage22flag(), target);
  }

  // required int32 modeflag = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_modeflag(), target);
  }

  // required int32 raimflag = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_raimflag(), target);
  }

  // required int32 commstateselectorflag = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_commstateselectorflag(), target);
  }

  // required int32 syncstate = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_syncstate(), target);
  }

  // required int32 slotincrement = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_slotincrement(), target);
  }

  // required int32 numberofslots = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_numberofslots(), target);
  }

  // required int32 keepflag = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_keepflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PositionB)
  return target;
}

size_t PositionB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg.PositionB)
  size_t total_size = 0;

  if (_internal_has_mmsi()) {
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());
  }

  if (_internal_has_longitude()) {
    // required bytes longitude = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_longitude());
  }

  if (_internal_has_latitude()) {
    // required bytes latitude = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latitude());
  }

  if (_internal_has_repeatindicator()) {
    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());
  }

  if (_internal_has_spare1()) {
    // required int32 spare1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare1());
  }

  if (_internal_has_sog()) {
    // required float sog = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_positionaccuracy()) {
    // required int32 positionaccuracy = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());
  }

  if (_internal_has_cog()) {
    // required float cog = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_trueheading()) {
    // required int32 trueheading = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trueheading());
  }

  if (_internal_has_timestamp()) {
    // required int32 timestamp = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  if (_internal_has_spare2()) {
    // required int32 spare2 = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare2());
  }

  if (_internal_has_bunitflag()) {
    // required int32 bunitflag = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bunitflag());
  }

  if (_internal_has_bdisplayflag()) {
    // required int32 bdisplayflag = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bdisplayflag());
  }

  if (_internal_has_bdscflag()) {
    // required int32 bdscflag = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bdscflag());
  }

  if (_internal_has_bbandflag()) {
    // required int32 bbandflag = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bbandflag());
  }

  if (_internal_has_bmessage22flag()) {
    // required int32 bmessage22flag = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bmessage22flag());
  }

  if (_internal_has_modeflag()) {
    // required int32 modeflag = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modeflag());
  }

  if (_internal_has_raimflag()) {
    // required int32 raimflag = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raimflag());
  }

  if (_internal_has_commstateselectorflag()) {
    // required int32 commstateselectorflag = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commstateselectorflag());
  }

  if (_internal_has_syncstate()) {
    // required int32 syncstate = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_syncstate());
  }

  if (_internal_has_slotincrement()) {
    // required int32 slotincrement = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slotincrement());
  }

  if (_internal_has_numberofslots()) {
    // required int32 numberofslots = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofslots());
  }

  if (_internal_has_keepflag()) {
    // required int32 keepflag = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keepflag());
  }

  return total_size;
}
size_t PositionB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PositionB)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x007fffff) ^ 0x007fffff) == 0) {  // All required fields are present.
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());

    // required bytes longitude = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_longitude());

    // required bytes latitude = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latitude());

    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());

    // required int32 spare1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare1());

    // required float sog = 4;
    total_size += 1 + 4;

    // required int32 positionaccuracy = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());

    // required float cog = 8;
    total_size += 1 + 4;

    // required int32 trueheading = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trueheading());

    // required int32 timestamp = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());

    // required int32 spare2 = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare2());

    // required int32 bunitflag = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bunitflag());

    // required int32 bdisplayflag = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bdisplayflag());

    // required int32 bdscflag = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bdscflag());

    // required int32 bbandflag = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bbandflag());

    // required int32 bmessage22flag = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bmessage22flag());

    // required int32 modeflag = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modeflag());

    // required int32 raimflag = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raimflag());

    // required int32 commstateselectorflag = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commstateselectorflag());

    // required int32 syncstate = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_syncstate());

    // required int32 slotincrement = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slotincrement());

    // required int32 numberofslots = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofslots());

    // required int32 keepflag = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keepflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.PositionB)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.PositionB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.PositionB)
    MergeFrom(*source);
  }
}

void PositionB::MergeFrom(const PositionB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PositionB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mmsi(from._internal_mmsi());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_longitude(from._internal_longitude());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_latitude(from._internal_latitude());
    }
    if (cached_has_bits & 0x00000008u) {
      repeatindicator_ = from.repeatindicator_;
    }
    if (cached_has_bits & 0x00000010u) {
      spare1_ = from.spare1_;
    }
    if (cached_has_bits & 0x00000020u) {
      sog_ = from.sog_;
    }
    if (cached_has_bits & 0x00000040u) {
      positionaccuracy_ = from.positionaccuracy_;
    }
    if (cached_has_bits & 0x00000080u) {
      cog_ = from.cog_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      trueheading_ = from.trueheading_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      spare2_ = from.spare2_;
    }
    if (cached_has_bits & 0x00000800u) {
      bunitflag_ = from.bunitflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      bdisplayflag_ = from.bdisplayflag_;
    }
    if (cached_has_bits & 0x00002000u) {
      bdscflag_ = from.bdscflag_;
    }
    if (cached_has_bits & 0x00004000u) {
      bbandflag_ = from.bbandflag_;
    }
    if (cached_has_bits & 0x00008000u) {
      bmessage22flag_ = from.bmessage22flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      modeflag_ = from.modeflag_;
    }
    if (cached_has_bits & 0x00020000u) {
      raimflag_ = from.raimflag_;
    }
    if (cached_has_bits & 0x00040000u) {
      commstateselectorflag_ = from.commstateselectorflag_;
    }
    if (cached_has_bits & 0x00080000u) {
      syncstate_ = from.syncstate_;
    }
    if (cached_has_bits & 0x00100000u) {
      slotincrement_ = from.slotincrement_;
    }
    if (cached_has_bits & 0x00200000u) {
      numberofslots_ = from.numberofslots_;
    }
    if (cached_has_bits & 0x00400000u) {
      keepflag_ = from.keepflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PositionB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.PositionB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionB::CopyFrom(const PositionB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PositionB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionB::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PositionB::InternalSwap(PositionB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmsi_.Swap(&other->mmsi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  longitude_.Swap(&other->longitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latitude_.Swap(&other->latitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionB, keepflag_)
      + sizeof(PositionB::keepflag_)
      - PROTOBUF_FIELD_OFFSET(PositionB, repeatindicator_)>(
          reinterpret_cast<char*>(&repeatindicator_),
          reinterpret_cast<char*>(&other->repeatindicator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AidsToNavigation::_Internal {
 public:
  using HasBits = decltype(std::declval<AidsToNavigation>()._has_bits_);
  static void set_has_repeatindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mmsi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_navigationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_positionaccuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_epfd(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_utctimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_onoffpositionindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_atonflag(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_raimflag(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_virtualflag(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_modeindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_spare(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_extendname(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stufbits(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0003ffff) ^ 0x0003ffff) != 0;
  }
};

AidsToNavigation::AidsToNavigation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.AidsToNavigation)
}
AidsToNavigation::AidsToNavigation(const AidsToNavigation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mmsi()) {
    mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mmsi(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_longitude()) {
    longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_longitude(), 
      GetArena());
  }
  latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_latitude()) {
    latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latitude(), 
      GetArena());
  }
  dimensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dimensions()) {
    dimensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dimensions(), 
      GetArena());
  }
  extendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extendname()) {
    extendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extendname(), 
      GetArena());
  }
  ::memcpy(&repeatindicator_, &from.repeatindicator_,
    static_cast<size_t>(reinterpret_cast<char*>(&stufbits_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(stufbits_));
  // @@protoc_insertion_point(copy_constructor:msg.AidsToNavigation)
}

void AidsToNavigation::SharedCtor() {
mmsi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dimensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&repeatindicator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stufbits_) -
    reinterpret_cast<char*>(&repeatindicator_)) + sizeof(stufbits_));
}

AidsToNavigation::~AidsToNavigation() {
  // @@protoc_insertion_point(destructor:msg.AidsToNavigation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AidsToNavigation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mmsi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  longitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dimensions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AidsToNavigation::ArenaDtor(void* object) {
  AidsToNavigation* _this = reinterpret_cast< AidsToNavigation* >(object);
  (void)_this;
}
void AidsToNavigation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AidsToNavigation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AidsToNavigation::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AidsToNavigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mmsi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      dimensions_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      extendname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&repeatindicator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&navigationtype_) -
        reinterpret_cast<char*>(&repeatindicator_)) + sizeof(navigationtype_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&positionaccuracy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modeindicator_) -
        reinterpret_cast<char*>(&positionaccuracy_)) + sizeof(modeindicator_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&spare_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stufbits_) -
        reinterpret_cast<char*>(&spare_)) + sizeof(stufbits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AidsToNavigation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 repeatindicator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_repeatindicator(&has_bits);
          repeatindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes mmsi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mmsi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 navigationtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_navigationtype(&has_bits);
          navigationtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 positionaccuracy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_positionaccuracy(&has_bits);
          positionaccuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_longitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes latitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_latitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes dimensions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_dimensions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 epfd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_epfd(&has_bits);
          epfd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 utctimestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_utctimestamp(&has_bits);
          utctimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 onoffpositionindicator = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_onoffpositionindicator(&has_bits);
          onoffpositionindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 atonflag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_atonflag(&has_bits);
          atonflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 raimflag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_raimflag(&has_bits);
          raimflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 virtualflag = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_virtualflag(&has_bits);
          virtualflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 modeindicator = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_modeindicator(&has_bits);
          modeindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 spare = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_spare(&has_bits);
          spare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes extendname = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_extendname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 stufbits = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_stufbits(&has_bits);
          stufbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AidsToNavigation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AidsToNavigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 repeatindicator = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_repeatindicator(), target);
  }

  // required bytes mmsi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mmsi(), target);
  }

  // required int32 navigationtype = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_navigationtype(), target);
  }

  // required bytes name = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  // required int32 positionaccuracy = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_positionaccuracy(), target);
  }

  // required bytes longitude = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_longitude(), target);
  }

  // required bytes latitude = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_latitude(), target);
  }

  // required bytes dimensions = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_dimensions(), target);
  }

  // required int32 epfd = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_epfd(), target);
  }

  // required int32 utctimestamp = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_utctimestamp(), target);
  }

  // required int32 onoffpositionindicator = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_onoffpositionindicator(), target);
  }

  // required int32 atonflag = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_atonflag(), target);
  }

  // required int32 raimflag = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_raimflag(), target);
  }

  // required int32 virtualflag = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_virtualflag(), target);
  }

  // required int32 modeindicator = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_modeindicator(), target);
  }

  // required int32 spare = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_spare(), target);
  }

  // required bytes extendname = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_extendname(), target);
  }

  // required int32 stufbits = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_stufbits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AidsToNavigation)
  return target;
}

size_t AidsToNavigation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg.AidsToNavigation)
  size_t total_size = 0;

  if (_internal_has_mmsi()) {
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());
  }

  if (_internal_has_name()) {
    // required bytes name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  if (_internal_has_longitude()) {
    // required bytes longitude = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_longitude());
  }

  if (_internal_has_latitude()) {
    // required bytes latitude = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latitude());
  }

  if (_internal_has_dimensions()) {
    // required bytes dimensions = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dimensions());
  }

  if (_internal_has_extendname()) {
    // required bytes extendname = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extendname());
  }

  if (_internal_has_repeatindicator()) {
    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());
  }

  if (_internal_has_navigationtype()) {
    // required int32 navigationtype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_navigationtype());
  }

  if (_internal_has_positionaccuracy()) {
    // required int32 positionaccuracy = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());
  }

  if (_internal_has_epfd()) {
    // required int32 epfd = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epfd());
  }

  if (_internal_has_utctimestamp()) {
    // required int32 utctimestamp = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_utctimestamp());
  }

  if (_internal_has_onoffpositionindicator()) {
    // required int32 onoffpositionindicator = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onoffpositionindicator());
  }

  if (_internal_has_atonflag()) {
    // required int32 atonflag = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_atonflag());
  }

  if (_internal_has_raimflag()) {
    // required int32 raimflag = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raimflag());
  }

  if (_internal_has_virtualflag()) {
    // required int32 virtualflag = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_virtualflag());
  }

  if (_internal_has_modeindicator()) {
    // required int32 modeindicator = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modeindicator());
  }

  if (_internal_has_spare()) {
    // required int32 spare = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare());
  }

  if (_internal_has_stufbits()) {
    // required int32 stufbits = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stufbits());
  }

  return total_size;
}
size_t AidsToNavigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AidsToNavigation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required bytes mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mmsi());

    // required bytes name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());

    // required bytes longitude = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_longitude());

    // required bytes latitude = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latitude());

    // required bytes dimensions = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dimensions());

    // required bytes extendname = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extendname());

    // required int32 repeatindicator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());

    // required int32 navigationtype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_navigationtype());

    // required int32 positionaccuracy = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());

    // required int32 epfd = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epfd());

    // required int32 utctimestamp = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_utctimestamp());

    // required int32 onoffpositionindicator = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onoffpositionindicator());

    // required int32 atonflag = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_atonflag());

    // required int32 raimflag = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raimflag());

    // required int32 virtualflag = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_virtualflag());

    // required int32 modeindicator = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modeindicator());

    // required int32 spare = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spare());

    // required int32 stufbits = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stufbits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AidsToNavigation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.AidsToNavigation)
  GOOGLE_DCHECK_NE(&from, this);
  const AidsToNavigation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AidsToNavigation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.AidsToNavigation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.AidsToNavigation)
    MergeFrom(*source);
  }
}

void AidsToNavigation::MergeFrom(const AidsToNavigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.AidsToNavigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mmsi(from._internal_mmsi());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_longitude(from._internal_longitude());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_latitude(from._internal_latitude());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_dimensions(from._internal_dimensions());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_extendname(from._internal_extendname());
    }
    if (cached_has_bits & 0x00000040u) {
      repeatindicator_ = from.repeatindicator_;
    }
    if (cached_has_bits & 0x00000080u) {
      navigationtype_ = from.navigationtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      positionaccuracy_ = from.positionaccuracy_;
    }
    if (cached_has_bits & 0x00000200u) {
      epfd_ = from.epfd_;
    }
    if (cached_has_bits & 0x00000400u) {
      utctimestamp_ = from.utctimestamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      onoffpositionindicator_ = from.onoffpositionindicator_;
    }
    if (cached_has_bits & 0x00001000u) {
      atonflag_ = from.atonflag_;
    }
    if (cached_has_bits & 0x00002000u) {
      raimflag_ = from.raimflag_;
    }
    if (cached_has_bits & 0x00004000u) {
      virtualflag_ = from.virtualflag_;
    }
    if (cached_has_bits & 0x00008000u) {
      modeindicator_ = from.modeindicator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      spare_ = from.spare_;
    }
    if (cached_has_bits & 0x00020000u) {
      stufbits_ = from.stufbits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AidsToNavigation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.AidsToNavigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AidsToNavigation::CopyFrom(const AidsToNavigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AidsToNavigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AidsToNavigation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AidsToNavigation::InternalSwap(AidsToNavigation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmsi_.Swap(&other->mmsi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  longitude_.Swap(&other->longitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latitude_.Swap(&other->latitude_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dimensions_.Swap(&other->dimensions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  extendname_.Swap(&other->extendname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AidsToNavigation, stufbits_)
      + sizeof(AidsToNavigation::stufbits_)
      - PROTOBUF_FIELD_OFFSET(AidsToNavigation, repeatindicator_)>(
          reinterpret_cast<char*>(&repeatindicator_),
          reinterpret_cast<char*>(&other->repeatindicator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AidsToNavigation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AISMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AISMessage>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msg::PositionA& positiona(const AISMessage* msg);
  static void set_has_positiona(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::msg::ShipStatic& shipstatic(const AISMessage* msg);
  static void set_has_shipstatic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::msg::StandardSAR& standardsar(const AISMessage* msg);
  static void set_has_standardsar(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::msg::PositionB& positionb(const AISMessage* msg);
  static void set_has_positionb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::msg::AidsToNavigation& aidstonavigation(const AISMessage* msg);
  static void set_has_aidstonavigation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000041) ^ 0x00000041) != 0;
  }
};

const ::msg::PositionA&
AISMessage::_Internal::positiona(const AISMessage* msg) {
  return *msg->positiona_;
}
const ::msg::ShipStatic&
AISMessage::_Internal::shipstatic(const AISMessage* msg) {
  return *msg->shipstatic_;
}
const ::msg::StandardSAR&
AISMessage::_Internal::standardsar(const AISMessage* msg) {
  return *msg->standardsar_;
}
const ::msg::PositionB&
AISMessage::_Internal::positionb(const AISMessage* msg) {
  return *msg->positionb_;
}
const ::msg::AidsToNavigation&
AISMessage::_Internal::aidstonavigation(const AISMessage* msg) {
  return *msg->aidstonavigation_;
}
AISMessage::AISMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.AISMessage)
}
AISMessage::AISMessage(const AISMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pid()) {
    pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pid(), 
      GetArena());
  }
  if (from._internal_has_positiona()) {
    positiona_ = new ::msg::PositionA(*from.positiona_);
  } else {
    positiona_ = nullptr;
  }
  if (from._internal_has_shipstatic()) {
    shipstatic_ = new ::msg::ShipStatic(*from.shipstatic_);
  } else {
    shipstatic_ = nullptr;
  }
  if (from._internal_has_standardsar()) {
    standardsar_ = new ::msg::StandardSAR(*from.standardsar_);
  } else {
    standardsar_ = nullptr;
  }
  if (from._internal_has_positionb()) {
    positionb_ = new ::msg::PositionB(*from.positionb_);
  } else {
    positionb_ = nullptr;
  }
  if (from._internal_has_aidstonavigation()) {
    aidstonavigation_ = new ::msg::AidsToNavigation(*from.aidstonavigation_);
  } else {
    aidstonavigation_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:msg.AISMessage)
}

void AISMessage::SharedCtor() {
pid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&positiona_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aidstonavigation_) -
    reinterpret_cast<char*>(&positiona_)) + sizeof(aidstonavigation_));
type_ = 1;
}

AISMessage::~AISMessage() {
  // @@protoc_insertion_point(destructor:msg.AISMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AISMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete positiona_;
  if (this != internal_default_instance()) delete shipstatic_;
  if (this != internal_default_instance()) delete standardsar_;
  if (this != internal_default_instance()) delete positionb_;
  if (this != internal_default_instance()) delete aidstonavigation_;
}

void AISMessage::ArenaDtor(void* object) {
  AISMessage* _this = reinterpret_cast< AISMessage* >(object);
  (void)_this;
}
void AISMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AISMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AISMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AISMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      pid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(positiona_ != nullptr);
      positiona_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(shipstatic_ != nullptr);
      shipstatic_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(standardsar_ != nullptr);
      standardsar_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(positionb_ != nullptr);
      positionb_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(aidstonavigation_ != nullptr);
      aidstonavigation_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AISMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.AISMessage.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::AISMessage_Type_IsValid(val))) {
            _internal_set_type(static_cast<::msg::AISMessage_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.PositionA positiona = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiona(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.ShipStatic shipstatic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shipstatic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.StandardSAR standardsar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_standardsar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.PositionB positionb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.AidsToNavigation aidstonavigation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_aidstonavigation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AISMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AISMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.AISMessage.Type type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required bytes pid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pid(), target);
  }

  // optional .msg.PositionA positiona = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::positiona(this), target, stream);
  }

  // optional .msg.ShipStatic shipstatic = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::shipstatic(this), target, stream);
  }

  // optional .msg.StandardSAR standardsar = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::standardsar(this), target, stream);
  }

  // optional .msg.PositionB positionb = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::positionb(this), target, stream);
  }

  // optional .msg.AidsToNavigation aidstonavigation = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::aidstonavigation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AISMessage)
  return target;
}

size_t AISMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg.AISMessage)
  size_t total_size = 0;

  if (_internal_has_pid()) {
    // required bytes pid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pid());
  }

  if (_internal_has_type()) {
    // required .msg.AISMessage.Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t AISMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AISMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000041) ^ 0x00000041) == 0) {  // All required fields are present.
    // required bytes pid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pid());

    // required .msg.AISMessage.Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .msg.PositionA positiona = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *positiona_);
    }

    // optional .msg.ShipStatic shipstatic = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shipstatic_);
    }

    // optional .msg.StandardSAR standardsar = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *standardsar_);
    }

    // optional .msg.PositionB positionb = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *positionb_);
    }

    // optional .msg.AidsToNavigation aidstonavigation = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aidstonavigation_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AISMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.AISMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AISMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AISMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.AISMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.AISMessage)
    MergeFrom(*source);
  }
}

void AISMessage::MergeFrom(const AISMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.AISMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pid(from._internal_pid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_positiona()->::msg::PositionA::MergeFrom(from._internal_positiona());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_shipstatic()->::msg::ShipStatic::MergeFrom(from._internal_shipstatic());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_standardsar()->::msg::StandardSAR::MergeFrom(from._internal_standardsar());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_positionb()->::msg::PositionB::MergeFrom(from._internal_positionb());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_aidstonavigation()->::msg::AidsToNavigation::MergeFrom(from._internal_aidstonavigation());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AISMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.AISMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISMessage::CopyFrom(const AISMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AISMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_positiona()) {
    if (!positiona_->IsInitialized()) return false;
  }
  if (_internal_has_shipstatic()) {
    if (!shipstatic_->IsInitialized()) return false;
  }
  if (_internal_has_standardsar()) {
    if (!standardsar_->IsInitialized()) return false;
  }
  if (_internal_has_positionb()) {
    if (!positionb_->IsInitialized()) return false;
  }
  if (_internal_has_aidstonavigation()) {
    if (!aidstonavigation_->IsInitialized()) return false;
  }
  return true;
}

void AISMessage::InternalSwap(AISMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pid_.Swap(&other->pid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AISMessage, aidstonavigation_)
      + sizeof(AISMessage::aidstonavigation_)
      - PROTOBUF_FIELD_OFFSET(AISMessage, positiona_)>(
          reinterpret_cast<char*>(&positiona_),
          reinterpret_cast<char*>(&other->positiona_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AISMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::PositionA* Arena::CreateMaybeMessage< ::msg::PositionA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PositionA >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ShipStatic* Arena::CreateMaybeMessage< ::msg::ShipStatic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ShipStatic >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::StandardSAR* Arena::CreateMaybeMessage< ::msg::StandardSAR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::StandardSAR >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PositionB* Arena::CreateMaybeMessage< ::msg::PositionB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PositionB >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::AidsToNavigation* Arena::CreateMaybeMessage< ::msg::AidsToNavigation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::AidsToNavigation >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::AISMessage* Arena::CreateMaybeMessage< ::msg::AISMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::AISMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
