// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register_query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_register_5fquery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_register_5fquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_register_5fquery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_register_5fquery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_register_5fquery_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_register_5fquery_2eproto_metadata_getter(int index);
namespace msg {
class ApplicationInfo;
struct ApplicationInfoDefaultTypeInternal;
extern ApplicationInfoDefaultTypeInternal _ApplicationInfo_default_instance_;
class ApplicationMessage;
struct ApplicationMessageDefaultTypeInternal;
extern ApplicationMessageDefaultTypeInternal _ApplicationMessage_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::ApplicationInfo* Arena::CreateMaybeMessage<::msg::ApplicationInfo>(Arena*);
template<> ::msg::ApplicationMessage* Arena::CreateMaybeMessage<::msg::ApplicationMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum ApplicationInfo_ApplicationType : int {
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_XMQ = 1,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_CMS = 2,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_WEB = 3,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_DHSLB = 4,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_DHS = 5,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_XMSLB = 6,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_XMS = 7,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_RTSP = 8,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_RTMP = 9,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_HLS = 10,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_GBS = 11,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_GBXMS = 12,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_DSS = 13,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_DBE = 14,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_AIS = 15,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_TSS = 16,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_ALARM = 17,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_HELMET = 18,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_PHONE = 19,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_SLEEP = 20,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_FACE = 21,
  ApplicationInfo_ApplicationType_APPLICATION_TYPE_FIGHT = 22
};
bool ApplicationInfo_ApplicationType_IsValid(int value);
constexpr ApplicationInfo_ApplicationType ApplicationInfo_ApplicationType_ApplicationType_MIN = ApplicationInfo_ApplicationType_APPLICATION_TYPE_XMQ;
constexpr ApplicationInfo_ApplicationType ApplicationInfo_ApplicationType_ApplicationType_MAX = ApplicationInfo_ApplicationType_APPLICATION_TYPE_FIGHT;
constexpr int ApplicationInfo_ApplicationType_ApplicationType_ARRAYSIZE = ApplicationInfo_ApplicationType_ApplicationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplicationInfo_ApplicationType_descriptor();
template<typename T>
inline const std::string& ApplicationInfo_ApplicationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApplicationInfo_ApplicationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApplicationInfo_ApplicationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApplicationInfo_ApplicationType_descriptor(), enum_t_value);
}
inline bool ApplicationInfo_ApplicationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApplicationInfo_ApplicationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApplicationInfo_ApplicationType>(
    ApplicationInfo_ApplicationType_descriptor(), name, value);
}
enum ApplicationMessage_CommandType : int {
  ApplicationMessage_CommandType_COMMAND_TYPE_REGISTER_REQ = 1,
  ApplicationMessage_CommandType_COMMAND_TYPE_REGISTER_REP = 2,
  ApplicationMessage_CommandType_COMMAND_TYPE_QUERY_REQ = 3,
  ApplicationMessage_CommandType_COMMAND_TYPE_QUERY_REP = 4
};
bool ApplicationMessage_CommandType_IsValid(int value);
constexpr ApplicationMessage_CommandType ApplicationMessage_CommandType_CommandType_MIN = ApplicationMessage_CommandType_COMMAND_TYPE_REGISTER_REQ;
constexpr ApplicationMessage_CommandType ApplicationMessage_CommandType_CommandType_MAX = ApplicationMessage_CommandType_COMMAND_TYPE_QUERY_REP;
constexpr int ApplicationMessage_CommandType_CommandType_ARRAYSIZE = ApplicationMessage_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplicationMessage_CommandType_descriptor();
template<typename T>
inline const std::string& ApplicationMessage_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApplicationMessage_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApplicationMessage_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApplicationMessage_CommandType_descriptor(), enum_t_value);
}
inline bool ApplicationMessage_CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApplicationMessage_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApplicationMessage_CommandType>(
    ApplicationMessage_CommandType_descriptor(), name, value);
}
// ===================================================================

class ApplicationInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ApplicationInfo) */ {
 public:
  inline ApplicationInfo() : ApplicationInfo(nullptr) {}
  virtual ~ApplicationInfo();
  explicit constexpr ApplicationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplicationInfo(const ApplicationInfo& from);
  ApplicationInfo(ApplicationInfo&& from) noexcept
    : ApplicationInfo() {
    *this = ::std::move(from);
  }

  inline ApplicationInfo& operator=(const ApplicationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationInfo& operator=(ApplicationInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplicationInfo* internal_default_instance() {
    return reinterpret_cast<const ApplicationInfo*>(
               &_ApplicationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApplicationInfo& a, ApplicationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplicationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationInfo* New() const final {
    return CreateMaybeMessage<ApplicationInfo>(nullptr);
  }

  ApplicationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationInfo& from);
  void MergeFrom(const ApplicationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ApplicationInfo";
  }
  protected:
  explicit ApplicationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_register_5fquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ApplicationInfo_ApplicationType ApplicationType;
  static constexpr ApplicationType APPLICATION_TYPE_XMQ =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_XMQ;
  static constexpr ApplicationType APPLICATION_TYPE_CMS =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_CMS;
  static constexpr ApplicationType APPLICATION_TYPE_WEB =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_WEB;
  static constexpr ApplicationType APPLICATION_TYPE_DHSLB =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_DHSLB;
  static constexpr ApplicationType APPLICATION_TYPE_DHS =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_DHS;
  static constexpr ApplicationType APPLICATION_TYPE_XMSLB =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_XMSLB;
  static constexpr ApplicationType APPLICATION_TYPE_XMS =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_XMS;
  static constexpr ApplicationType APPLICATION_TYPE_RTSP =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_RTSP;
  static constexpr ApplicationType APPLICATION_TYPE_RTMP =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_RTMP;
  static constexpr ApplicationType APPLICATION_TYPE_HLS =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_HLS;
  static constexpr ApplicationType APPLICATION_TYPE_GBS =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_GBS;
  static constexpr ApplicationType APPLICATION_TYPE_GBXMS =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_GBXMS;
  static constexpr ApplicationType APPLICATION_TYPE_DSS =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_DSS;
  static constexpr ApplicationType APPLICATION_TYPE_DBE =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_DBE;
  static constexpr ApplicationType APPLICATION_TYPE_AIS =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_AIS;
  static constexpr ApplicationType APPLICATION_TYPE_TSS =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_TSS;
  static constexpr ApplicationType APPLICATION_TYPE_ALARM =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_ALARM;
  static constexpr ApplicationType APPLICATION_TYPE_HELMET =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_HELMET;
  static constexpr ApplicationType APPLICATION_TYPE_PHONE =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_PHONE;
  static constexpr ApplicationType APPLICATION_TYPE_SLEEP =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_SLEEP;
  static constexpr ApplicationType APPLICATION_TYPE_FACE =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_FACE;
  static constexpr ApplicationType APPLICATION_TYPE_FIGHT =
    ApplicationInfo_ApplicationType_APPLICATION_TYPE_FIGHT;
  static inline bool ApplicationType_IsValid(int value) {
    return ApplicationInfo_ApplicationType_IsValid(value);
  }
  static constexpr ApplicationType ApplicationType_MIN =
    ApplicationInfo_ApplicationType_ApplicationType_MIN;
  static constexpr ApplicationType ApplicationType_MAX =
    ApplicationInfo_ApplicationType_ApplicationType_MAX;
  static constexpr int ApplicationType_ARRAYSIZE =
    ApplicationInfo_ApplicationType_ApplicationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ApplicationType_descriptor() {
    return ApplicationInfo_ApplicationType_descriptor();
  }
  template<typename T>
  static inline const std::string& ApplicationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ApplicationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ApplicationType_Name.");
    return ApplicationInfo_ApplicationType_Name(enum_t_value);
  }
  static inline bool ApplicationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ApplicationType* value) {
    return ApplicationInfo_ApplicationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIpv4FieldNumber = 3,
    kIdFieldNumber = 4,
    kNicknameFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // required bytes name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required bytes ipv4 = 3;
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  const std::string& ipv4() const;
  void set_ipv4(const std::string& value);
  void set_ipv4(std::string&& value);
  void set_ipv4(const char* value);
  void set_ipv4(const void* value, size_t size);
  std::string* mutable_ipv4();
  std::string* release_ipv4();
  void set_allocated_ipv4(std::string* ipv4);
  private:
  const std::string& _internal_ipv4() const;
  void _internal_set_ipv4(const std::string& value);
  std::string* _internal_mutable_ipv4();
  public:

  // optional bytes id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes nickname = 5;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // required .msg.ApplicationInfo.ApplicationType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::ApplicationInfo_ApplicationType type() const;
  void set_type(::msg::ApplicationInfo_ApplicationType value);
  private:
  ::msg::ApplicationInfo_ApplicationType _internal_type() const;
  void _internal_set_type(::msg::ApplicationInfo_ApplicationType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ApplicationInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  int type_;
  friend struct ::TableStruct_register_5fquery_2eproto;
};
// -------------------------------------------------------------------

class ApplicationMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ApplicationMessage) */ {
 public:
  inline ApplicationMessage() : ApplicationMessage(nullptr) {}
  virtual ~ApplicationMessage();
  explicit constexpr ApplicationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplicationMessage(const ApplicationMessage& from);
  ApplicationMessage(ApplicationMessage&& from) noexcept
    : ApplicationMessage() {
    *this = ::std::move(from);
  }

  inline ApplicationMessage& operator=(const ApplicationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationMessage& operator=(ApplicationMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplicationMessage* internal_default_instance() {
    return reinterpret_cast<const ApplicationMessage*>(
               &_ApplicationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApplicationMessage& a, ApplicationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplicationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationMessage* New() const final {
    return CreateMaybeMessage<ApplicationMessage>(nullptr);
  }

  ApplicationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationMessage& from);
  void MergeFrom(const ApplicationMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ApplicationMessage";
  }
  protected:
  explicit ApplicationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_register_5fquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ApplicationMessage_CommandType CommandType;
  static constexpr CommandType COMMAND_TYPE_REGISTER_REQ =
    ApplicationMessage_CommandType_COMMAND_TYPE_REGISTER_REQ;
  static constexpr CommandType COMMAND_TYPE_REGISTER_REP =
    ApplicationMessage_CommandType_COMMAND_TYPE_REGISTER_REP;
  static constexpr CommandType COMMAND_TYPE_QUERY_REQ =
    ApplicationMessage_CommandType_COMMAND_TYPE_QUERY_REQ;
  static constexpr CommandType COMMAND_TYPE_QUERY_REP =
    ApplicationMessage_CommandType_COMMAND_TYPE_QUERY_REP;
  static inline bool CommandType_IsValid(int value) {
    return ApplicationMessage_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    ApplicationMessage_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    ApplicationMessage_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    ApplicationMessage_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return ApplicationMessage_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return ApplicationMessage_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandType* value) {
    return ApplicationMessage_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kStatusFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated .msg.ApplicationInfo infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::msg::ApplicationInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ApplicationInfo >*
      mutable_infos();
  private:
  const ::msg::ApplicationInfo& _internal_infos(int index) const;
  ::msg::ApplicationInfo* _internal_add_infos();
  public:
  const ::msg::ApplicationInfo& infos(int index) const;
  ::msg::ApplicationInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ApplicationInfo >&
      infos() const;

  // optional int32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.ApplicationMessage.CommandType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::ApplicationMessage_CommandType type() const;
  void set_type(::msg::ApplicationMessage_CommandType value);
  private:
  ::msg::ApplicationMessage_CommandType _internal_type() const;
  void _internal_set_type(::msg::ApplicationMessage_CommandType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ApplicationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ApplicationInfo > infos_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  int type_;
  friend struct ::TableStruct_register_5fquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApplicationInfo

// required .msg.ApplicationInfo.ApplicationType type = 1;
inline bool ApplicationInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ApplicationInfo::has_type() const {
  return _internal_has_type();
}
inline void ApplicationInfo::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::msg::ApplicationInfo_ApplicationType ApplicationInfo::_internal_type() const {
  return static_cast< ::msg::ApplicationInfo_ApplicationType >(type_);
}
inline ::msg::ApplicationInfo_ApplicationType ApplicationInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.ApplicationInfo.type)
  return _internal_type();
}
inline void ApplicationInfo::_internal_set_type(::msg::ApplicationInfo_ApplicationType value) {
  assert(::msg::ApplicationInfo_ApplicationType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void ApplicationInfo::set_type(::msg::ApplicationInfo_ApplicationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.ApplicationInfo.type)
}

// required bytes name = 2;
inline bool ApplicationInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ApplicationInfo::has_name() const {
  return _internal_has_name();
}
inline void ApplicationInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ApplicationInfo::name() const {
  // @@protoc_insertion_point(field_get:msg.ApplicationInfo.name)
  return _internal_name();
}
inline void ApplicationInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.ApplicationInfo.name)
}
inline std::string* ApplicationInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.ApplicationInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ApplicationInfo::_internal_name() const {
  return name_.Get();
}
inline void ApplicationInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplicationInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ApplicationInfo.name)
}
inline void ApplicationInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ApplicationInfo.name)
}
inline void ApplicationInfo::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ApplicationInfo.name)
}
inline std::string* ApplicationInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplicationInfo::release_name() {
  // @@protoc_insertion_point(field_release:msg.ApplicationInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ApplicationInfo.name)
}

// required bytes ipv4 = 3;
inline bool ApplicationInfo::_internal_has_ipv4() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ApplicationInfo::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void ApplicationInfo::clear_ipv4() {
  ipv4_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ApplicationInfo::ipv4() const {
  // @@protoc_insertion_point(field_get:msg.ApplicationInfo.ipv4)
  return _internal_ipv4();
}
inline void ApplicationInfo::set_ipv4(const std::string& value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:msg.ApplicationInfo.ipv4)
}
inline std::string* ApplicationInfo::mutable_ipv4() {
  // @@protoc_insertion_point(field_mutable:msg.ApplicationInfo.ipv4)
  return _internal_mutable_ipv4();
}
inline const std::string& ApplicationInfo::_internal_ipv4() const {
  return ipv4_.Get();
}
inline void ApplicationInfo::_internal_set_ipv4(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplicationInfo::set_ipv4(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ipv4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ApplicationInfo.ipv4)
}
inline void ApplicationInfo::set_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ApplicationInfo.ipv4)
}
inline void ApplicationInfo::set_ipv4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ApplicationInfo.ipv4)
}
inline std::string* ApplicationInfo::_internal_mutable_ipv4() {
  _has_bits_[0] |= 0x00000002u;
  return ipv4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplicationInfo::release_ipv4() {
  // @@protoc_insertion_point(field_release:msg.ApplicationInfo.ipv4)
  if (!_internal_has_ipv4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ipv4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationInfo::set_allocated_ipv4(std::string* ipv4) {
  if (ipv4 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ApplicationInfo.ipv4)
}

// optional bytes id = 4;
inline bool ApplicationInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ApplicationInfo::has_id() const {
  return _internal_has_id();
}
inline void ApplicationInfo::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ApplicationInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.ApplicationInfo.id)
  return _internal_id();
}
inline void ApplicationInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.ApplicationInfo.id)
}
inline std::string* ApplicationInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:msg.ApplicationInfo.id)
  return _internal_mutable_id();
}
inline const std::string& ApplicationInfo::_internal_id() const {
  return id_.Get();
}
inline void ApplicationInfo::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplicationInfo::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ApplicationInfo.id)
}
inline void ApplicationInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ApplicationInfo.id)
}
inline void ApplicationInfo::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ApplicationInfo.id)
}
inline std::string* ApplicationInfo::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000004u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplicationInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.ApplicationInfo.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ApplicationInfo.id)
}

// optional bytes nickname = 5;
inline bool ApplicationInfo::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ApplicationInfo::has_nickname() const {
  return _internal_has_nickname();
}
inline void ApplicationInfo::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ApplicationInfo::nickname() const {
  // @@protoc_insertion_point(field_get:msg.ApplicationInfo.nickname)
  return _internal_nickname();
}
inline void ApplicationInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:msg.ApplicationInfo.nickname)
}
inline std::string* ApplicationInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:msg.ApplicationInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& ApplicationInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void ApplicationInfo::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplicationInfo::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ApplicationInfo.nickname)
}
inline void ApplicationInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ApplicationInfo.nickname)
}
inline void ApplicationInfo::set_nickname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ApplicationInfo.nickname)
}
inline std::string* ApplicationInfo::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000008u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplicationInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:msg.ApplicationInfo.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplicationInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ApplicationInfo.nickname)
}

// -------------------------------------------------------------------

// ApplicationMessage

// required .msg.ApplicationMessage.CommandType type = 1;
inline bool ApplicationMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ApplicationMessage::has_type() const {
  return _internal_has_type();
}
inline void ApplicationMessage::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::msg::ApplicationMessage_CommandType ApplicationMessage::_internal_type() const {
  return static_cast< ::msg::ApplicationMessage_CommandType >(type_);
}
inline ::msg::ApplicationMessage_CommandType ApplicationMessage::type() const {
  // @@protoc_insertion_point(field_get:msg.ApplicationMessage.type)
  return _internal_type();
}
inline void ApplicationMessage::_internal_set_type(::msg::ApplicationMessage_CommandType value) {
  assert(::msg::ApplicationMessage_CommandType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void ApplicationMessage::set_type(::msg::ApplicationMessage_CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.ApplicationMessage.type)
}

// repeated .msg.ApplicationInfo infos = 2;
inline int ApplicationMessage::_internal_infos_size() const {
  return infos_.size();
}
inline int ApplicationMessage::infos_size() const {
  return _internal_infos_size();
}
inline void ApplicationMessage::clear_infos() {
  infos_.Clear();
}
inline ::msg::ApplicationInfo* ApplicationMessage::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ApplicationMessage.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ApplicationInfo >*
ApplicationMessage::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:msg.ApplicationMessage.infos)
  return &infos_;
}
inline const ::msg::ApplicationInfo& ApplicationMessage::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::msg::ApplicationInfo& ApplicationMessage::infos(int index) const {
  // @@protoc_insertion_point(field_get:msg.ApplicationMessage.infos)
  return _internal_infos(index);
}
inline ::msg::ApplicationInfo* ApplicationMessage::_internal_add_infos() {
  return infos_.Add();
}
inline ::msg::ApplicationInfo* ApplicationMessage::add_infos() {
  // @@protoc_insertion_point(field_add:msg.ApplicationMessage.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ApplicationInfo >&
ApplicationMessage::infos() const {
  // @@protoc_insertion_point(field_list:msg.ApplicationMessage.infos)
  return infos_;
}

// optional int32 status = 3;
inline bool ApplicationMessage::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ApplicationMessage::has_status() const {
  return _internal_has_status();
}
inline void ApplicationMessage::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationMessage::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationMessage::status() const {
  // @@protoc_insertion_point(field_get:msg.ApplicationMessage.status)
  return _internal_status();
}
inline void ApplicationMessage::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void ApplicationMessage::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.ApplicationMessage.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::ApplicationInfo_ApplicationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ApplicationInfo_ApplicationType>() {
  return ::msg::ApplicationInfo_ApplicationType_descriptor();
}
template <> struct is_proto_enum< ::msg::ApplicationMessage_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ApplicationMessage_CommandType>() {
  return ::msg::ApplicationMessage_CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_register_5fquery_2eproto
