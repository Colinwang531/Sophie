// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crew.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crew_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crew_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crew_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crew_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crew_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_crew_2eproto_metadata_getter(int index);
namespace msg {
class Crew;
struct CrewDefaultTypeInternal;
extern CrewDefaultTypeInternal _Crew_default_instance_;
class CrewMessage;
struct CrewMessageDefaultTypeInternal;
extern CrewMessageDefaultTypeInternal _CrewMessage_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Crew* Arena::CreateMaybeMessage<::msg::Crew>(Arena*);
template<> ::msg::CrewMessage* Arena::CreateMaybeMessage<::msg::CrewMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum CrewMessage_Command : int {
  CrewMessage_Command_NEW_REQ = 1,
  CrewMessage_Command_NEW_REP = 2,
  CrewMessage_Command_DELETE_REQ = 3,
  CrewMessage_Command_DELETE_REP = 4,
  CrewMessage_Command_QUERY_REQ = 5,
  CrewMessage_Command_QUERY_REP = 6
};
bool CrewMessage_Command_IsValid(int value);
constexpr CrewMessage_Command CrewMessage_Command_Command_MIN = CrewMessage_Command_NEW_REQ;
constexpr CrewMessage_Command CrewMessage_Command_Command_MAX = CrewMessage_Command_QUERY_REP;
constexpr int CrewMessage_Command_Command_ARRAYSIZE = CrewMessage_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CrewMessage_Command_descriptor();
template<typename T>
inline const std::string& CrewMessage_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CrewMessage_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CrewMessage_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CrewMessage_Command_descriptor(), enum_t_value);
}
inline bool CrewMessage_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CrewMessage_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CrewMessage_Command>(
    CrewMessage_Command_descriptor(), name, value);
}
// ===================================================================

class Crew PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Crew) */ {
 public:
  inline Crew() : Crew(nullptr) {}
  virtual ~Crew();
  explicit constexpr Crew(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Crew(const Crew& from);
  Crew(Crew&& from) noexcept
    : Crew() {
    *this = ::std::move(from);
  }

  inline Crew& operator=(const Crew& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crew& operator=(Crew&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Crew& default_instance() {
    return *internal_default_instance();
  }
  static inline const Crew* internal_default_instance() {
    return reinterpret_cast<const Crew*>(
               &_Crew_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Crew& a, Crew& b) {
    a.Swap(&b);
  }
  inline void Swap(Crew* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crew* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Crew* New() const final {
    return CreateMaybeMessage<Crew>(nullptr);
  }

  Crew* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Crew>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Crew& from);
  void MergeFrom(const Crew& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crew* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Crew";
  }
  protected:
  explicit Crew(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_crew_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicturesFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kJobFieldNumber = 3,
  };
  // repeated bytes pictures = 4;
  int pictures_size() const;
  private:
  int _internal_pictures_size() const;
  public:
  void clear_pictures();
  const std::string& pictures(int index) const;
  std::string* mutable_pictures(int index);
  void set_pictures(int index, const std::string& value);
  void set_pictures(int index, std::string&& value);
  void set_pictures(int index, const char* value);
  void set_pictures(int index, const void* value, size_t size);
  std::string* add_pictures();
  void add_pictures(const std::string& value);
  void add_pictures(std::string&& value);
  void add_pictures(const char* value);
  void add_pictures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pictures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pictures();
  private:
  const std::string& _internal_pictures(int index) const;
  std::string* _internal_add_pictures();
  public:

  // required bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes job = 3;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const std::string& job() const;
  void set_job(const std::string& value);
  void set_job(std::string&& value);
  void set_job(const char* value);
  void set_job(const void* value, size_t size);
  std::string* mutable_job();
  std::string* release_job();
  void set_allocated_job(std::string* job);
  private:
  const std::string& _internal_job() const;
  void _internal_set_job(const std::string& value);
  std::string* _internal_mutable_job();
  public:

  // @@protoc_insertion_point(class_scope:msg.Crew)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pictures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_;
  friend struct ::TableStruct_crew_2eproto;
};
// -------------------------------------------------------------------

class CrewMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CrewMessage) */ {
 public:
  inline CrewMessage() : CrewMessage(nullptr) {}
  virtual ~CrewMessage();
  explicit constexpr CrewMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrewMessage(const CrewMessage& from);
  CrewMessage(CrewMessage&& from) noexcept
    : CrewMessage() {
    *this = ::std::move(from);
  }

  inline CrewMessage& operator=(const CrewMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewMessage& operator=(CrewMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrewMessage* internal_default_instance() {
    return reinterpret_cast<const CrewMessage*>(
               &_CrewMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CrewMessage& a, CrewMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewMessage* New() const final {
    return CreateMaybeMessage<CrewMessage>(nullptr);
  }

  CrewMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewMessage& from);
  void MergeFrom(const CrewMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CrewMessage";
  }
  protected:
  explicit CrewMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_crew_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CrewMessage_Command Command;
  static constexpr Command NEW_REQ =
    CrewMessage_Command_NEW_REQ;
  static constexpr Command NEW_REP =
    CrewMessage_Command_NEW_REP;
  static constexpr Command DELETE_REQ =
    CrewMessage_Command_DELETE_REQ;
  static constexpr Command DELETE_REP =
    CrewMessage_Command_DELETE_REP;
  static constexpr Command QUERY_REQ =
    CrewMessage_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    CrewMessage_Command_QUERY_REP;
  static inline bool Command_IsValid(int value) {
    return CrewMessage_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    CrewMessage_Command_Command_MIN;
  static constexpr Command Command_MAX =
    CrewMessage_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    CrewMessage_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return CrewMessage_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return CrewMessage_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return CrewMessage_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCrewsFieldNumber = 2,
    kPidFieldNumber = 4,
    kStatusFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // repeated .msg.Crew crews = 2;
  int crews_size() const;
  private:
  int _internal_crews_size() const;
  public:
  void clear_crews();
  ::msg::Crew* mutable_crews(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Crew >*
      mutable_crews();
  private:
  const ::msg::Crew& _internal_crews(int index) const;
  ::msg::Crew* _internal_add_crews();
  public:
  const ::msg::Crew& crews(int index) const;
  ::msg::Crew* add_crews();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Crew >&
      crews() const;

  // optional bytes pid = 4;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  void set_pid(const std::string& value);
  void set_pid(std::string&& value);
  void set_pid(const char* value);
  void set_pid(const void* value, size_t size);
  std::string* mutable_pid();
  std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional int32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.CrewMessage.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::CrewMessage_Command command() const;
  void set_command(::msg::CrewMessage_Command value);
  private:
  ::msg::CrewMessage_Command _internal_command() const;
  void _internal_set_command(::msg::CrewMessage_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CrewMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Crew > crews_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  int command_;
  friend struct ::TableStruct_crew_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Crew

// required bytes id = 1;
inline bool Crew::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Crew::has_id() const {
  return _internal_has_id();
}
inline void Crew::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Crew::id() const {
  // @@protoc_insertion_point(field_get:msg.Crew.id)
  return _internal_id();
}
inline void Crew::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.Crew.id)
}
inline std::string* Crew::mutable_id() {
  // @@protoc_insertion_point(field_mutable:msg.Crew.id)
  return _internal_mutable_id();
}
inline const std::string& Crew::_internal_id() const {
  return id_.Get();
}
inline void Crew::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Crew::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Crew.id)
}
inline void Crew::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Crew.id)
}
inline void Crew::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Crew.id)
}
inline std::string* Crew::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Crew::release_id() {
  // @@protoc_insertion_point(field_release:msg.Crew.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Crew::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Crew.id)
}

// optional bytes name = 2;
inline bool Crew::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Crew::has_name() const {
  return _internal_has_name();
}
inline void Crew::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Crew::name() const {
  // @@protoc_insertion_point(field_get:msg.Crew.name)
  return _internal_name();
}
inline void Crew::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.Crew.name)
}
inline std::string* Crew::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.Crew.name)
  return _internal_mutable_name();
}
inline const std::string& Crew::_internal_name() const {
  return name_.Get();
}
inline void Crew::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Crew::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Crew.name)
}
inline void Crew::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Crew.name)
}
inline void Crew::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Crew.name)
}
inline std::string* Crew::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Crew::release_name() {
  // @@protoc_insertion_point(field_release:msg.Crew.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Crew::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Crew.name)
}

// optional bytes job = 3;
inline bool Crew::_internal_has_job() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Crew::has_job() const {
  return _internal_has_job();
}
inline void Crew::clear_job() {
  job_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Crew::job() const {
  // @@protoc_insertion_point(field_get:msg.Crew.job)
  return _internal_job();
}
inline void Crew::set_job(const std::string& value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:msg.Crew.job)
}
inline std::string* Crew::mutable_job() {
  // @@protoc_insertion_point(field_mutable:msg.Crew.job)
  return _internal_mutable_job();
}
inline const std::string& Crew::_internal_job() const {
  return job_.Get();
}
inline void Crew::_internal_set_job(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Crew::set_job(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  job_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Crew.job)
}
inline void Crew::set_job(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Crew.job)
}
inline void Crew::set_job(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Crew.job)
}
inline std::string* Crew::_internal_mutable_job() {
  _has_bits_[0] |= 0x00000004u;
  return job_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Crew::release_job() {
  // @@protoc_insertion_point(field_release:msg.Crew.job)
  if (!_internal_has_job()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return job_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Crew::set_allocated_job(std::string* job) {
  if (job != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  job_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Crew.job)
}

// repeated bytes pictures = 4;
inline int Crew::_internal_pictures_size() const {
  return pictures_.size();
}
inline int Crew::pictures_size() const {
  return _internal_pictures_size();
}
inline void Crew::clear_pictures() {
  pictures_.Clear();
}
inline std::string* Crew::add_pictures() {
  // @@protoc_insertion_point(field_add_mutable:msg.Crew.pictures)
  return _internal_add_pictures();
}
inline const std::string& Crew::_internal_pictures(int index) const {
  return pictures_.Get(index);
}
inline const std::string& Crew::pictures(int index) const {
  // @@protoc_insertion_point(field_get:msg.Crew.pictures)
  return _internal_pictures(index);
}
inline std::string* Crew::mutable_pictures(int index) {
  // @@protoc_insertion_point(field_mutable:msg.Crew.pictures)
  return pictures_.Mutable(index);
}
inline void Crew::set_pictures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:msg.Crew.pictures)
  pictures_.Mutable(index)->assign(value);
}
inline void Crew::set_pictures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:msg.Crew.pictures)
  pictures_.Mutable(index)->assign(std::move(value));
}
inline void Crew::set_pictures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pictures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.Crew.pictures)
}
inline void Crew::set_pictures(int index, const void* value, size_t size) {
  pictures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.Crew.pictures)
}
inline std::string* Crew::_internal_add_pictures() {
  return pictures_.Add();
}
inline void Crew::add_pictures(const std::string& value) {
  pictures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.Crew.pictures)
}
inline void Crew::add_pictures(std::string&& value) {
  pictures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.Crew.pictures)
}
inline void Crew::add_pictures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pictures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.Crew.pictures)
}
inline void Crew::add_pictures(const void* value, size_t size) {
  pictures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.Crew.pictures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Crew::pictures() const {
  // @@protoc_insertion_point(field_list:msg.Crew.pictures)
  return pictures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Crew::mutable_pictures() {
  // @@protoc_insertion_point(field_mutable_list:msg.Crew.pictures)
  return &pictures_;
}

// -------------------------------------------------------------------

// CrewMessage

// required .msg.CrewMessage.Command command = 1;
inline bool CrewMessage::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CrewMessage::has_command() const {
  return _internal_has_command();
}
inline void CrewMessage::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::CrewMessage_Command CrewMessage::_internal_command() const {
  return static_cast< ::msg::CrewMessage_Command >(command_);
}
inline ::msg::CrewMessage_Command CrewMessage::command() const {
  // @@protoc_insertion_point(field_get:msg.CrewMessage.command)
  return _internal_command();
}
inline void CrewMessage::_internal_set_command(::msg::CrewMessage_Command value) {
  assert(::msg::CrewMessage_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void CrewMessage::set_command(::msg::CrewMessage_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.CrewMessage.command)
}

// repeated .msg.Crew crews = 2;
inline int CrewMessage::_internal_crews_size() const {
  return crews_.size();
}
inline int CrewMessage::crews_size() const {
  return _internal_crews_size();
}
inline void CrewMessage::clear_crews() {
  crews_.Clear();
}
inline ::msg::Crew* CrewMessage::mutable_crews(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CrewMessage.crews)
  return crews_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Crew >*
CrewMessage::mutable_crews() {
  // @@protoc_insertion_point(field_mutable_list:msg.CrewMessage.crews)
  return &crews_;
}
inline const ::msg::Crew& CrewMessage::_internal_crews(int index) const {
  return crews_.Get(index);
}
inline const ::msg::Crew& CrewMessage::crews(int index) const {
  // @@protoc_insertion_point(field_get:msg.CrewMessage.crews)
  return _internal_crews(index);
}
inline ::msg::Crew* CrewMessage::_internal_add_crews() {
  return crews_.Add();
}
inline ::msg::Crew* CrewMessage::add_crews() {
  // @@protoc_insertion_point(field_add:msg.CrewMessage.crews)
  return _internal_add_crews();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Crew >&
CrewMessage::crews() const {
  // @@protoc_insertion_point(field_list:msg.CrewMessage.crews)
  return crews_;
}

// optional int32 status = 3;
inline bool CrewMessage::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CrewMessage::has_status() const {
  return _internal_has_status();
}
inline void CrewMessage::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrewMessage::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrewMessage::status() const {
  // @@protoc_insertion_point(field_get:msg.CrewMessage.status)
  return _internal_status();
}
inline void CrewMessage::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void CrewMessage::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.CrewMessage.status)
}

// optional bytes pid = 4;
inline bool CrewMessage::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CrewMessage::has_pid() const {
  return _internal_has_pid();
}
inline void CrewMessage::clear_pid() {
  pid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CrewMessage::pid() const {
  // @@protoc_insertion_point(field_get:msg.CrewMessage.pid)
  return _internal_pid();
}
inline void CrewMessage::set_pid(const std::string& value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:msg.CrewMessage.pid)
}
inline std::string* CrewMessage::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:msg.CrewMessage.pid)
  return _internal_mutable_pid();
}
inline const std::string& CrewMessage::_internal_pid() const {
  return pid_.Get();
}
inline void CrewMessage::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CrewMessage::set_pid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CrewMessage.pid)
}
inline void CrewMessage::set_pid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CrewMessage.pid)
}
inline void CrewMessage::set_pid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CrewMessage.pid)
}
inline std::string* CrewMessage::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CrewMessage::release_pid() {
  // @@protoc_insertion_point(field_release:msg.CrewMessage.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewMessage::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CrewMessage.pid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::CrewMessage_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CrewMessage_Command>() {
  return ::msg::CrewMessage_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crew_2eproto
