// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_device_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_device_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_device_2eproto_metadata_getter(int index);
namespace msg {
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceMessage;
struct DeviceMessageDefaultTypeInternal;
extern DeviceMessageDefaultTypeInternal _DeviceMessage_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Camera* Arena::CreateMaybeMessage<::msg::Camera>(Arena*);
template<> ::msg::Device* Arena::CreateMaybeMessage<::msg::Device>(Arena*);
template<> ::msg::DeviceMessage* Arena::CreateMaybeMessage<::msg::DeviceMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum Camera_Type : int {
  Camera_Type_ANALOG = 1,
  Camera_Type_DIGIST = 2
};
bool Camera_Type_IsValid(int value);
constexpr Camera_Type Camera_Type_Type_MIN = Camera_Type_ANALOG;
constexpr Camera_Type Camera_Type_Type_MAX = Camera_Type_DIGIST;
constexpr int Camera_Type_Type_ARRAYSIZE = Camera_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Camera_Type_descriptor();
template<typename T>
inline const std::string& Camera_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Camera_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Camera_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Camera_Type_descriptor(), enum_t_value);
}
inline bool Camera_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Camera_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Camera_Type>(
    Camera_Type_descriptor(), name, value);
}
enum Device_Factory : int {
  Device_Factory_HIKVISION = 1,
  Device_Factory_DAHUA = 2,
  Device_Factory_EATON = 3
};
bool Device_Factory_IsValid(int value);
constexpr Device_Factory Device_Factory_Factory_MIN = Device_Factory_HIKVISION;
constexpr Device_Factory Device_Factory_Factory_MAX = Device_Factory_EATON;
constexpr int Device_Factory_Factory_ARRAYSIZE = Device_Factory_Factory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Factory_descriptor();
template<typename T>
inline const std::string& Device_Factory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_Factory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_Factory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_Factory_descriptor(), enum_t_value);
}
inline bool Device_Factory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Device_Factory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_Factory>(
    Device_Factory_descriptor(), name, value);
}
enum Device_Type : int {
  Device_Type_DVR = 1,
  Device_Type_NVR = 2,
  Device_Type_IPC = 3
};
bool Device_Type_IsValid(int value);
constexpr Device_Type Device_Type_Type_MIN = Device_Type_DVR;
constexpr Device_Type Device_Type_Type_MAX = Device_Type_IPC;
constexpr int Device_Type_Type_ARRAYSIZE = Device_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Type_descriptor();
template<typename T>
inline const std::string& Device_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_Type_descriptor(), enum_t_value);
}
inline bool Device_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Device_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_Type>(
    Device_Type_descriptor(), name, value);
}
enum DeviceMessage_Command : int {
  DeviceMessage_Command_NEW_REQ = 1,
  DeviceMessage_Command_NEW_REP = 2,
  DeviceMessage_Command_DELETE_REQ = 3,
  DeviceMessage_Command_DELETE_REP = 4,
  DeviceMessage_Command_QUERY_REQ = 5,
  DeviceMessage_Command_QUERY_REP = 6
};
bool DeviceMessage_Command_IsValid(int value);
constexpr DeviceMessage_Command DeviceMessage_Command_Command_MIN = DeviceMessage_Command_NEW_REQ;
constexpr DeviceMessage_Command DeviceMessage_Command_Command_MAX = DeviceMessage_Command_QUERY_REP;
constexpr int DeviceMessage_Command_Command_ARRAYSIZE = DeviceMessage_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceMessage_Command_descriptor();
template<typename T>
inline const std::string& DeviceMessage_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceMessage_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceMessage_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceMessage_Command_descriptor(), enum_t_value);
}
inline bool DeviceMessage_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceMessage_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceMessage_Command>(
    DeviceMessage_Command_descriptor(), name, value);
}
// ===================================================================

class Camera PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  virtual ~Camera();
  explicit constexpr Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return CreateMaybeMessage<Camera>(nullptr);
  }

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_device_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Camera_Type Type;
  static constexpr Type ANALOG =
    Camera_Type_ANALOG;
  static constexpr Type DIGIST =
    Camera_Type_DIGIST;
  static inline bool Type_IsValid(int value) {
    return Camera_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Camera_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Camera_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Camera_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Camera_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Camera_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Camera_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kNicknameFieldNumber = 5,
    kIpFieldNumber = 6,
    kIndexFieldNumber = 3,
    kEnableFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // required bytes id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required bytes nickname = 5;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // required bytes ip = 6;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // required int32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool enable = 4;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // required .msg.Camera.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::Camera_Type type() const;
  void set_type(::msg::Camera_Type value);
  private:
  ::msg::Camera_Type _internal_type() const;
  void _internal_set_type(::msg::Camera_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Camera)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  bool enable_;
  int type_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  virtual ~Device();
  explicit constexpr Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_device_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Device_Factory Factory;
  static constexpr Factory HIKVISION =
    Device_Factory_HIKVISION;
  static constexpr Factory DAHUA =
    Device_Factory_DAHUA;
  static constexpr Factory EATON =
    Device_Factory_EATON;
  static inline bool Factory_IsValid(int value) {
    return Device_Factory_IsValid(value);
  }
  static constexpr Factory Factory_MIN =
    Device_Factory_Factory_MIN;
  static constexpr Factory Factory_MAX =
    Device_Factory_Factory_MAX;
  static constexpr int Factory_ARRAYSIZE =
    Device_Factory_Factory_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Factory_descriptor() {
    return Device_Factory_descriptor();
  }
  template<typename T>
  static inline const std::string& Factory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Factory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Factory_Name.");
    return Device_Factory_Name(enum_t_value);
  }
  static inline bool Factory_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Factory* value) {
    return Device_Factory_Parse(name, value);
  }

  typedef Device_Type Type;
  static constexpr Type DVR =
    Device_Type_DVR;
  static constexpr Type NVR =
    Device_Type_NVR;
  static constexpr Type IPC =
    Device_Type_IPC;
  static inline bool Type_IsValid(int value) {
    return Device_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Device_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Device_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Device_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Device_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Device_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Device_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCamerasFieldNumber = 10,
    kDidFieldNumber = 1,
    kUsernameFieldNumber = 5,
    kUserpwdFieldNumber = 6,
    kIpFieldNumber = 7,
    kNicknameFieldNumber = 9,
    kEnableFieldNumber = 2,
    kPortFieldNumber = 8,
    kFactoryFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // repeated .msg.Camera cameras = 10;
  int cameras_size() const;
  private:
  int _internal_cameras_size() const;
  public:
  void clear_cameras();
  ::msg::Camera* mutable_cameras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera >*
      mutable_cameras();
  private:
  const ::msg::Camera& _internal_cameras(int index) const;
  ::msg::Camera* _internal_add_cameras();
  public:
  const ::msg::Camera& cameras(int index) const;
  ::msg::Camera* add_cameras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera >&
      cameras() const;

  // required bytes did = 1;
  bool has_did() const;
  private:
  bool _internal_has_did() const;
  public:
  void clear_did();
  const std::string& did() const;
  void set_did(const std::string& value);
  void set_did(std::string&& value);
  void set_did(const char* value);
  void set_did(const void* value, size_t size);
  std::string* mutable_did();
  std::string* release_did();
  void set_allocated_did(std::string* did);
  private:
  const std::string& _internal_did() const;
  void _internal_set_did(const std::string& value);
  std::string* _internal_mutable_did();
  public:

  // optional bytes username = 5;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional bytes userpwd = 6;
  bool has_userpwd() const;
  private:
  bool _internal_has_userpwd() const;
  public:
  void clear_userpwd();
  const std::string& userpwd() const;
  void set_userpwd(const std::string& value);
  void set_userpwd(std::string&& value);
  void set_userpwd(const char* value);
  void set_userpwd(const void* value, size_t size);
  std::string* mutable_userpwd();
  std::string* release_userpwd();
  void set_allocated_userpwd(std::string* userpwd);
  private:
  const std::string& _internal_userpwd() const;
  void _internal_set_userpwd(const std::string& value);
  std::string* _internal_mutable_userpwd();
  public:

  // optional bytes ip = 7;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional bytes nickname = 9;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional int32 port = 8;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .msg.Device.Factory factory = 3;
  bool has_factory() const;
  private:
  bool _internal_has_factory() const;
  public:
  void clear_factory();
  ::msg::Device_Factory factory() const;
  void set_factory(::msg::Device_Factory value);
  private:
  ::msg::Device_Factory _internal_factory() const;
  void _internal_set_factory(::msg::Device_Factory value);
  public:

  // optional .msg.Device.Type type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::Device_Type type() const;
  void set_type(::msg::Device_Type value);
  private:
  ::msg::Device_Type _internal_type() const;
  void _internal_set_type(::msg::Device_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera > cameras_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr did_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int factory_;
  int type_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class DeviceMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DeviceMessage) */ {
 public:
  inline DeviceMessage() : DeviceMessage(nullptr) {}
  virtual ~DeviceMessage();
  explicit constexpr DeviceMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceMessage(const DeviceMessage& from);
  DeviceMessage(DeviceMessage&& from) noexcept
    : DeviceMessage() {
    *this = ::std::move(from);
  }

  inline DeviceMessage& operator=(const DeviceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMessage& operator=(DeviceMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMessage* internal_default_instance() {
    return reinterpret_cast<const DeviceMessage*>(
               &_DeviceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceMessage& a, DeviceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceMessage* New() const final {
    return CreateMaybeMessage<DeviceMessage>(nullptr);
  }

  DeviceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceMessage& from);
  void MergeFrom(const DeviceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DeviceMessage";
  }
  protected:
  explicit DeviceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_device_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeviceMessage_Command Command;
  static constexpr Command NEW_REQ =
    DeviceMessage_Command_NEW_REQ;
  static constexpr Command NEW_REP =
    DeviceMessage_Command_NEW_REP;
  static constexpr Command DELETE_REQ =
    DeviceMessage_Command_DELETE_REQ;
  static constexpr Command DELETE_REP =
    DeviceMessage_Command_DELETE_REP;
  static constexpr Command QUERY_REQ =
    DeviceMessage_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    DeviceMessage_Command_QUERY_REP;
  static inline bool Command_IsValid(int value) {
    return DeviceMessage_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    DeviceMessage_Command_Command_MIN;
  static constexpr Command Command_MAX =
    DeviceMessage_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    DeviceMessage_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return DeviceMessage_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return DeviceMessage_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return DeviceMessage_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 2,
    kPidFieldNumber = 4,
    kStatusFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // repeated .msg.Device devices = 2;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::msg::Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Device >*
      mutable_devices();
  private:
  const ::msg::Device& _internal_devices(int index) const;
  ::msg::Device* _internal_add_devices();
  public:
  const ::msg::Device& devices(int index) const;
  ::msg::Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Device >&
      devices() const;

  // optional bytes pid = 4;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  void set_pid(const std::string& value);
  void set_pid(std::string&& value);
  void set_pid(const char* value);
  void set_pid(const void* value, size_t size);
  std::string* mutable_pid();
  std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional int32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.DeviceMessage.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::DeviceMessage_Command command() const;
  void set_command(::msg::DeviceMessage_Command value);
  private:
  ::msg::DeviceMessage_Command _internal_command() const;
  void _internal_set_command(::msg::DeviceMessage_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.DeviceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Device > devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  int command_;
  friend struct ::TableStruct_device_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Camera

// required .msg.Camera.Type type = 1;
inline bool Camera::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Camera::has_type() const {
  return _internal_has_type();
}
inline void Camera::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::msg::Camera_Type Camera::_internal_type() const {
  return static_cast< ::msg::Camera_Type >(type_);
}
inline ::msg::Camera_Type Camera::type() const {
  // @@protoc_insertion_point(field_get:msg.Camera.type)
  return _internal_type();
}
inline void Camera::_internal_set_type(::msg::Camera_Type value) {
  assert(::msg::Camera_Type_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void Camera::set_type(::msg::Camera_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.Camera.type)
}

// required bytes id = 2;
inline bool Camera::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Camera::has_id() const {
  return _internal_has_id();
}
inline void Camera::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Camera::id() const {
  // @@protoc_insertion_point(field_get:msg.Camera.id)
  return _internal_id();
}
inline void Camera::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.Camera.id)
}
inline std::string* Camera::mutable_id() {
  // @@protoc_insertion_point(field_mutable:msg.Camera.id)
  return _internal_mutable_id();
}
inline const std::string& Camera::_internal_id() const {
  return id_.Get();
}
inline void Camera::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Camera::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Camera.id)
}
inline void Camera::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Camera.id)
}
inline void Camera::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Camera.id)
}
inline std::string* Camera::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Camera::release_id() {
  // @@protoc_insertion_point(field_release:msg.Camera.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Camera::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Camera.id)
}

// required int32 index = 3;
inline bool Camera::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Camera::has_index() const {
  return _internal_has_index();
}
inline void Camera::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Camera::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Camera::index() const {
  // @@protoc_insertion_point(field_get:msg.Camera.index)
  return _internal_index();
}
inline void Camera::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  index_ = value;
}
inline void Camera::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:msg.Camera.index)
}

// required bool enable = 4;
inline bool Camera::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Camera::has_enable() const {
  return _internal_has_enable();
}
inline void Camera::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Camera::_internal_enable() const {
  return enable_;
}
inline bool Camera::enable() const {
  // @@protoc_insertion_point(field_get:msg.Camera.enable)
  return _internal_enable();
}
inline void Camera::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_ = value;
}
inline void Camera::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:msg.Camera.enable)
}

// required bytes nickname = 5;
inline bool Camera::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Camera::has_nickname() const {
  return _internal_has_nickname();
}
inline void Camera::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Camera::nickname() const {
  // @@protoc_insertion_point(field_get:msg.Camera.nickname)
  return _internal_nickname();
}
inline void Camera::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:msg.Camera.nickname)
}
inline std::string* Camera::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:msg.Camera.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Camera::_internal_nickname() const {
  return nickname_.Get();
}
inline void Camera::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Camera::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Camera.nickname)
}
inline void Camera::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Camera.nickname)
}
inline void Camera::set_nickname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Camera.nickname)
}
inline std::string* Camera::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000002u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Camera::release_nickname() {
  // @@protoc_insertion_point(field_release:msg.Camera.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Camera::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Camera.nickname)
}

// required bytes ip = 6;
inline bool Camera::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Camera::has_ip() const {
  return _internal_has_ip();
}
inline void Camera::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Camera::ip() const {
  // @@protoc_insertion_point(field_get:msg.Camera.ip)
  return _internal_ip();
}
inline void Camera::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:msg.Camera.ip)
}
inline std::string* Camera::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:msg.Camera.ip)
  return _internal_mutable_ip();
}
inline const std::string& Camera::_internal_ip() const {
  return ip_.Get();
}
inline void Camera::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Camera::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Camera.ip)
}
inline void Camera::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Camera.ip)
}
inline void Camera::set_ip(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Camera.ip)
}
inline std::string* Camera::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000004u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Camera::release_ip() {
  // @@protoc_insertion_point(field_release:msg.Camera.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Camera::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Camera.ip)
}

// -------------------------------------------------------------------

// Device

// required bytes did = 1;
inline bool Device::_internal_has_did() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Device::has_did() const {
  return _internal_has_did();
}
inline void Device::clear_did() {
  did_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Device::did() const {
  // @@protoc_insertion_point(field_get:msg.Device.did)
  return _internal_did();
}
inline void Device::set_did(const std::string& value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:msg.Device.did)
}
inline std::string* Device::mutable_did() {
  // @@protoc_insertion_point(field_mutable:msg.Device.did)
  return _internal_mutable_did();
}
inline const std::string& Device::_internal_did() const {
  return did_.Get();
}
inline void Device::_internal_set_did(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_did(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Device.did)
}
inline void Device::set_did(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  did_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Device.did)
}
inline void Device::set_did(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  did_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Device.did)
}
inline std::string* Device::_internal_mutable_did() {
  _has_bits_[0] |= 0x00000001u;
  return did_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_did() {
  // @@protoc_insertion_point(field_release:msg.Device.did)
  if (!_internal_has_did()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return did_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_did(std::string* did) {
  if (did != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  did_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), did,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Device.did)
}

// optional bool enable = 2;
inline bool Device::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Device::has_enable() const {
  return _internal_has_enable();
}
inline void Device::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Device::_internal_enable() const {
  return enable_;
}
inline bool Device::enable() const {
  // @@protoc_insertion_point(field_get:msg.Device.enable)
  return _internal_enable();
}
inline void Device::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_ = value;
}
inline void Device::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:msg.Device.enable)
}

// optional .msg.Device.Factory factory = 3;
inline bool Device::_internal_has_factory() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Device::has_factory() const {
  return _internal_has_factory();
}
inline void Device::clear_factory() {
  factory_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::msg::Device_Factory Device::_internal_factory() const {
  return static_cast< ::msg::Device_Factory >(factory_);
}
inline ::msg::Device_Factory Device::factory() const {
  // @@protoc_insertion_point(field_get:msg.Device.factory)
  return _internal_factory();
}
inline void Device::_internal_set_factory(::msg::Device_Factory value) {
  assert(::msg::Device_Factory_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  factory_ = value;
}
inline void Device::set_factory(::msg::Device_Factory value) {
  _internal_set_factory(value);
  // @@protoc_insertion_point(field_set:msg.Device.factory)
}

// optional .msg.Device.Type type = 4;
inline bool Device::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Device::has_type() const {
  return _internal_has_type();
}
inline void Device::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::msg::Device_Type Device::_internal_type() const {
  return static_cast< ::msg::Device_Type >(type_);
}
inline ::msg::Device_Type Device::type() const {
  // @@protoc_insertion_point(field_get:msg.Device.type)
  return _internal_type();
}
inline void Device::_internal_set_type(::msg::Device_Type value) {
  assert(::msg::Device_Type_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  type_ = value;
}
inline void Device::set_type(::msg::Device_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.Device.type)
}

// optional bytes username = 5;
inline bool Device::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Device::has_username() const {
  return _internal_has_username();
}
inline void Device::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Device::username() const {
  // @@protoc_insertion_point(field_get:msg.Device.username)
  return _internal_username();
}
inline void Device::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:msg.Device.username)
}
inline std::string* Device::mutable_username() {
  // @@protoc_insertion_point(field_mutable:msg.Device.username)
  return _internal_mutable_username();
}
inline const std::string& Device::_internal_username() const {
  return username_.Get();
}
inline void Device::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Device.username)
}
inline void Device::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Device.username)
}
inline void Device::set_username(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Device.username)
}
inline std::string* Device::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000002u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_username() {
  // @@protoc_insertion_point(field_release:msg.Device.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Device.username)
}

// optional bytes userpwd = 6;
inline bool Device::_internal_has_userpwd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Device::has_userpwd() const {
  return _internal_has_userpwd();
}
inline void Device::clear_userpwd() {
  userpwd_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Device::userpwd() const {
  // @@protoc_insertion_point(field_get:msg.Device.userpwd)
  return _internal_userpwd();
}
inline void Device::set_userpwd(const std::string& value) {
  _internal_set_userpwd(value);
  // @@protoc_insertion_point(field_set:msg.Device.userpwd)
}
inline std::string* Device::mutable_userpwd() {
  // @@protoc_insertion_point(field_mutable:msg.Device.userpwd)
  return _internal_mutable_userpwd();
}
inline const std::string& Device::_internal_userpwd() const {
  return userpwd_.Get();
}
inline void Device::_internal_set_userpwd(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  userpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_userpwd(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  userpwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Device.userpwd)
}
inline void Device::set_userpwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  userpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Device.userpwd)
}
inline void Device::set_userpwd(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  userpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Device.userpwd)
}
inline std::string* Device::_internal_mutable_userpwd() {
  _has_bits_[0] |= 0x00000004u;
  return userpwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_userpwd() {
  // @@protoc_insertion_point(field_release:msg.Device.userpwd)
  if (!_internal_has_userpwd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return userpwd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_userpwd(std::string* userpwd) {
  if (userpwd != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  userpwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userpwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Device.userpwd)
}

// optional bytes ip = 7;
inline bool Device::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Device::has_ip() const {
  return _internal_has_ip();
}
inline void Device::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Device::ip() const {
  // @@protoc_insertion_point(field_get:msg.Device.ip)
  return _internal_ip();
}
inline void Device::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:msg.Device.ip)
}
inline std::string* Device::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:msg.Device.ip)
  return _internal_mutable_ip();
}
inline const std::string& Device::_internal_ip() const {
  return ip_.Get();
}
inline void Device::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Device.ip)
}
inline void Device::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Device.ip)
}
inline void Device::set_ip(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Device.ip)
}
inline std::string* Device::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000008u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_ip() {
  // @@protoc_insertion_point(field_release:msg.Device.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Device.ip)
}

// optional int32 port = 8;
inline bool Device::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Device::has_port() const {
  return _internal_has_port();
}
inline void Device::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Device::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Device::port() const {
  // @@protoc_insertion_point(field_get:msg.Device.port)
  return _internal_port();
}
inline void Device::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  port_ = value;
}
inline void Device::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg.Device.port)
}

// optional bytes nickname = 9;
inline bool Device::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Device::has_nickname() const {
  return _internal_has_nickname();
}
inline void Device::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Device::nickname() const {
  // @@protoc_insertion_point(field_get:msg.Device.nickname)
  return _internal_nickname();
}
inline void Device::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:msg.Device.nickname)
}
inline std::string* Device::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:msg.Device.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Device::_internal_nickname() const {
  return nickname_.Get();
}
inline void Device::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Device.nickname)
}
inline void Device::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Device.nickname)
}
inline void Device::set_nickname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Device.nickname)
}
inline std::string* Device::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000010u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_nickname() {
  // @@protoc_insertion_point(field_release:msg.Device.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Device.nickname)
}

// repeated .msg.Camera cameras = 10;
inline int Device::_internal_cameras_size() const {
  return cameras_.size();
}
inline int Device::cameras_size() const {
  return _internal_cameras_size();
}
inline void Device::clear_cameras() {
  cameras_.Clear();
}
inline ::msg::Camera* Device::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:msg.Device.cameras)
  return cameras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera >*
Device::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:msg.Device.cameras)
  return &cameras_;
}
inline const ::msg::Camera& Device::_internal_cameras(int index) const {
  return cameras_.Get(index);
}
inline const ::msg::Camera& Device::cameras(int index) const {
  // @@protoc_insertion_point(field_get:msg.Device.cameras)
  return _internal_cameras(index);
}
inline ::msg::Camera* Device::_internal_add_cameras() {
  return cameras_.Add();
}
inline ::msg::Camera* Device::add_cameras() {
  // @@protoc_insertion_point(field_add:msg.Device.cameras)
  return _internal_add_cameras();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Camera >&
Device::cameras() const {
  // @@protoc_insertion_point(field_list:msg.Device.cameras)
  return cameras_;
}

// -------------------------------------------------------------------

// DeviceMessage

// required .msg.DeviceMessage.Command command = 1;
inline bool DeviceMessage::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceMessage::has_command() const {
  return _internal_has_command();
}
inline void DeviceMessage::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::DeviceMessage_Command DeviceMessage::_internal_command() const {
  return static_cast< ::msg::DeviceMessage_Command >(command_);
}
inline ::msg::DeviceMessage_Command DeviceMessage::command() const {
  // @@protoc_insertion_point(field_get:msg.DeviceMessage.command)
  return _internal_command();
}
inline void DeviceMessage::_internal_set_command(::msg::DeviceMessage_Command value) {
  assert(::msg::DeviceMessage_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void DeviceMessage::set_command(::msg::DeviceMessage_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.DeviceMessage.command)
}

// repeated .msg.Device devices = 2;
inline int DeviceMessage::_internal_devices_size() const {
  return devices_.size();
}
inline int DeviceMessage::devices_size() const {
  return _internal_devices_size();
}
inline void DeviceMessage::clear_devices() {
  devices_.Clear();
}
inline ::msg::Device* DeviceMessage::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:msg.DeviceMessage.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Device >*
DeviceMessage::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:msg.DeviceMessage.devices)
  return &devices_;
}
inline const ::msg::Device& DeviceMessage::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::msg::Device& DeviceMessage::devices(int index) const {
  // @@protoc_insertion_point(field_get:msg.DeviceMessage.devices)
  return _internal_devices(index);
}
inline ::msg::Device* DeviceMessage::_internal_add_devices() {
  return devices_.Add();
}
inline ::msg::Device* DeviceMessage::add_devices() {
  // @@protoc_insertion_point(field_add:msg.DeviceMessage.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Device >&
DeviceMessage::devices() const {
  // @@protoc_insertion_point(field_list:msg.DeviceMessage.devices)
  return devices_;
}

// optional int32 status = 3;
inline bool DeviceMessage::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceMessage::has_status() const {
  return _internal_has_status();
}
inline void DeviceMessage::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceMessage::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceMessage::status() const {
  // @@protoc_insertion_point(field_get:msg.DeviceMessage.status)
  return _internal_status();
}
inline void DeviceMessage::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void DeviceMessage::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.DeviceMessage.status)
}

// optional bytes pid = 4;
inline bool DeviceMessage::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceMessage::has_pid() const {
  return _internal_has_pid();
}
inline void DeviceMessage::clear_pid() {
  pid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceMessage::pid() const {
  // @@protoc_insertion_point(field_get:msg.DeviceMessage.pid)
  return _internal_pid();
}
inline void DeviceMessage::set_pid(const std::string& value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:msg.DeviceMessage.pid)
}
inline std::string* DeviceMessage::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:msg.DeviceMessage.pid)
  return _internal_mutable_pid();
}
inline const std::string& DeviceMessage::_internal_pid() const {
  return pid_.Get();
}
inline void DeviceMessage::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceMessage::set_pid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.DeviceMessage.pid)
}
inline void DeviceMessage::set_pid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.DeviceMessage.pid)
}
inline void DeviceMessage::set_pid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.DeviceMessage.pid)
}
inline std::string* DeviceMessage::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceMessage::release_pid() {
  // @@protoc_insertion_point(field_release:msg.DeviceMessage.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceMessage::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.DeviceMessage.pid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::Camera_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Camera_Type>() {
  return ::msg::Camera_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::Device_Factory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Device_Factory>() {
  return ::msg::Device_Factory_descriptor();
}
template <> struct is_proto_enum< ::msg::Device_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Device_Type>() {
  return ::msg::Device_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::DeviceMessage_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::DeviceMessage_Command>() {
  return ::msg::DeviceMessage_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_device_2eproto
