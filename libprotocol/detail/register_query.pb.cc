// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register_query.proto

#include "register_query.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace msg {
constexpr ApplicationInfo::ApplicationInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipv4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(1)
{}
struct ApplicationInfoDefaultTypeInternal {
  constexpr ApplicationInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationInfoDefaultTypeInternal() {}
  union {
    ApplicationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationInfoDefaultTypeInternal _ApplicationInfo_default_instance_;
constexpr ApplicationMessage::ApplicationMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , status_(0)
  , type_(1)
{}
struct ApplicationMessageDefaultTypeInternal {
  constexpr ApplicationMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationMessageDefaultTypeInternal() {}
  union {
    ApplicationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationMessageDefaultTypeInternal _ApplicationMessage_default_instance_;
}  // namespace msg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_register_5fquery_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_register_5fquery_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_register_5fquery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_register_5fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationInfo, type_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationInfo, name_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationInfo, ipv4_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationInfo, id_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationInfo, parentid_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationInfo, nickname_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationMessage, type_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationMessage, infos_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplicationMessage, status_),
  1,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::msg::ApplicationInfo)},
  { 17, 25, sizeof(::msg::ApplicationMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_ApplicationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_ApplicationMessage_default_instance_),
};

const char descriptor_table_protodef_register_5fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024register_query.proto\022\003msg\"\220\006\n\017Applicat"
  "ionInfo\0222\n\004type\030\001 \002(\0162$.msg.ApplicationI"
  "nfo.ApplicationType\022\014\n\004name\030\002 \002(\014\022\014\n\004ipv"
  "4\030\003 \002(\014\022\n\n\002id\030\004 \001(\014\022\020\n\010parentid\030\005 \001(\014\022\020\n"
  "\010nickname\030\006 \001(\014\"\374\004\n\017ApplicationType\022\030\n\024A"
  "PPLICATION_TYPE_XMQ\020\001\022\030\n\024APPLICATION_TYP"
  "E_CMS\020\002\022\030\n\024APPLICATION_TYPE_WEB\020\003\022\032\n\026APP"
  "LICATION_TYPE_DHSLB\020\004\022\030\n\024APPLICATION_TYP"
  "E_DHS\020\005\022\032\n\026APPLICATION_TYPE_XMSLB\020\006\022\030\n\024A"
  "PPLICATION_TYPE_XMS\020\007\022\031\n\025APPLICATION_TYP"
  "E_RTSP\020\010\022\031\n\025APPLICATION_TYPE_RTMP\020\t\022\030\n\024A"
  "PPLICATION_TYPE_HLS\020\n\022\030\n\024APPLICATION_TYP"
  "E_GBS\020\013\022\032\n\026APPLICATION_TYPE_GBXMS\020\014\022\030\n\024A"
  "PPLICATION_TYPE_DSS\020\r\022\030\n\024APPLICATION_TYP"
  "E_DBE\020\016\022\030\n\024APPLICATION_TYPE_AIS\020\017\022\030\n\024APP"
  "LICATION_TYPE_TSS\020\020\022\032\n\026APPLICATION_TYPE_"
  "ALARM\020\021\022\033\n\027APPLICATION_TYPE_HELMET\020\022\022\032\n\026"
  "APPLICATION_TYPE_PHONE\020\023\022\032\n\026APPLICATION_"
  "TYPE_SLEEP\020\024\022\031\n\025APPLICATION_TYPE_FACE\020\025\022"
  "\032\n\026APPLICATION_TYPE_FIGHT\020\026\022\031\n\025APPLICATI"
  "ON_TYPE_FIRE\020\027\"\202\002\n\022ApplicationMessage\0221\n"
  "\004type\030\001 \002(\0162#.msg.ApplicationMessage.Com"
  "mandType\022#\n\005infos\030\002 \003(\0132\024.msg.Applicatio"
  "nInfo\022\016\n\006status\030\003 \001(\005\"\203\001\n\013CommandType\022\035\n"
  "\031COMMAND_TYPE_REGISTER_REQ\020\001\022\035\n\031COMMAND_"
  "TYPE_REGISTER_REP\020\002\022\032\n\026COMMAND_TYPE_QUER"
  "Y_REQ\020\003\022\032\n\026COMMAND_TYPE_QUERY_REP\020\004"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_register_5fquery_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_register_5fquery_2eproto = {
  false, false, 1075, descriptor_table_protodef_register_5fquery_2eproto, "register_query.proto", 
  &descriptor_table_register_5fquery_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_register_5fquery_2eproto::offsets,
  file_level_metadata_register_5fquery_2eproto, file_level_enum_descriptors_register_5fquery_2eproto, file_level_service_descriptors_register_5fquery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_register_5fquery_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_register_5fquery_2eproto);
  return descriptor_table_register_5fquery_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_register_5fquery_2eproto(&descriptor_table_register_5fquery_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplicationInfo_ApplicationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_register_5fquery_2eproto);
  return file_level_enum_descriptors_register_5fquery_2eproto[0];
}
bool ApplicationInfo_ApplicationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_XMQ;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_CMS;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_WEB;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_DHSLB;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_DHS;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_XMSLB;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_XMS;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_RTSP;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_RTMP;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_HLS;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_GBS;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_GBXMS;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_DSS;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_DBE;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_AIS;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_TSS;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_ALARM;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_HELMET;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_PHONE;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_SLEEP;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_FACE;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_FIGHT;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::APPLICATION_TYPE_FIRE;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::ApplicationType_MIN;
constexpr ApplicationInfo_ApplicationType ApplicationInfo::ApplicationType_MAX;
constexpr int ApplicationInfo::ApplicationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplicationMessage_CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_register_5fquery_2eproto);
  return file_level_enum_descriptors_register_5fquery_2eproto[1];
}
bool ApplicationMessage_CommandType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ApplicationMessage_CommandType ApplicationMessage::COMMAND_TYPE_REGISTER_REQ;
constexpr ApplicationMessage_CommandType ApplicationMessage::COMMAND_TYPE_REGISTER_REP;
constexpr ApplicationMessage_CommandType ApplicationMessage::COMMAND_TYPE_QUERY_REQ;
constexpr ApplicationMessage_CommandType ApplicationMessage::COMMAND_TYPE_QUERY_REP;
constexpr ApplicationMessage_CommandType ApplicationMessage::CommandType_MIN;
constexpr ApplicationMessage_CommandType ApplicationMessage::CommandType_MAX;
constexpr int ApplicationMessage::CommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ApplicationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplicationInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ipv4(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parentid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000023) ^ 0x00000023) != 0;
  }
};

ApplicationInfo::ApplicationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.ApplicationInfo)
}
ApplicationInfo::ApplicationInfo(const ApplicationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipv4()) {
    ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv4(), 
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  parentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parentid()) {
    parentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parentid(), 
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nickname()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:msg.ApplicationInfo)
}

void ApplicationInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 1;
}

ApplicationInfo::~ApplicationInfo() {
  // @@protoc_insertion_point(destructor:msg.ApplicationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplicationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApplicationInfo::ArenaDtor(void* object) {
  ApplicationInfo* _this = reinterpret_cast< ApplicationInfo* >(object);
  (void)_this;
}
void ApplicationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplicationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ApplicationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ipv4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      parentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      nickname_.ClearNonDefaultToEmpty();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.ApplicationInfo.ApplicationType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::ApplicationInfo_ApplicationType_IsValid(val))) {
            _internal_set_type(static_cast<::msg::ApplicationInfo_ApplicationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes ipv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ipv4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes parentid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_parentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes nickname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ApplicationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.ApplicationInfo.ApplicationType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required bytes ipv4 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ipv4(), target);
  }

  // optional bytes id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_id(), target);
  }

  // optional bytes parentid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_parentid(), target);
  }

  // optional bytes nickname = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ApplicationInfo)
  return target;
}

size_t ApplicationInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg.ApplicationInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  if (_internal_has_ipv4()) {
    // required bytes ipv4 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv4());
  }

  if (_internal_has_type()) {
    // required .msg.ApplicationInfo.ApplicationType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t ApplicationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ApplicationInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());

    // required bytes ipv4 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv4());

    // required .msg.ApplicationInfo.ApplicationType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional bytes id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional bytes parentid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_parentid());
    }

    // optional bytes nickname = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_nickname());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.ApplicationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.ApplicationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.ApplicationInfo)
    MergeFrom(*source);
  }
}

void ApplicationInfo::MergeFrom(const ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ApplicationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ipv4(from._internal_ipv4());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_parentid(from._internal_parentid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplicationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationInfo::CopyFrom(const ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ApplicationInfo::InternalSwap(ApplicationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv4_.Swap(&other->ipv4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parentid_.Swap(&other->parentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ApplicationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplicationMessage>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

ApplicationMessage::ApplicationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.ApplicationMessage)
}
ApplicationMessage::ApplicationMessage(const ApplicationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:msg.ApplicationMessage)
}

void ApplicationMessage::SharedCtor() {
status_ = 0;
type_ = 1;
}

ApplicationMessage::~ApplicationMessage() {
  // @@protoc_insertion_point(destructor:msg.ApplicationMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplicationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApplicationMessage::ArenaDtor(void* object) {
  ApplicationMessage* _this = reinterpret_cast< ApplicationMessage* >(object);
  (void)_this;
}
void ApplicationMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplicationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ApplicationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    status_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.ApplicationMessage.CommandType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::ApplicationMessage_CommandType_IsValid(val))) {
            _internal_set_type(static_cast<::msg::ApplicationMessage_CommandType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .msg.ApplicationInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ApplicationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.ApplicationMessage.CommandType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .msg.ApplicationInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  // optional int32 status = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ApplicationMessage)
  return target;
}

size_t ApplicationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ApplicationMessage)
  size_t total_size = 0;

  // required .msg.ApplicationMessage.CommandType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ApplicationInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 status = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.ApplicationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.ApplicationMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.ApplicationMessage)
    MergeFrom(*source);
  }
}

void ApplicationMessage::MergeFrom(const ApplicationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ApplicationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplicationMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.ApplicationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationMessage::CopyFrom(const ApplicationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ApplicationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(infos_)) return false;
  return true;
}

void ApplicationMessage::InternalSwap(ApplicationMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
  swap(status_, other->status_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::ApplicationInfo* Arena::CreateMaybeMessage< ::msg::ApplicationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ApplicationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ApplicationMessage* Arena::CreateMaybeMessage< ::msg::ApplicationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ApplicationMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
