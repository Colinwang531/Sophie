// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_component_2eproto_metadata_getter(int index);
namespace msg {
class Component;
struct ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class ComponentMessage;
struct ComponentMessageDefaultTypeInternal;
extern ComponentMessageDefaultTypeInternal _ComponentMessage_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Component* Arena::CreateMaybeMessage<::msg::Component>(Arena*);
template<> ::msg::ComponentMessage* Arena::CreateMaybeMessage<::msg::ComponentMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum Component_Type : int {
  Component_Type_XMQ = 1,
  Component_Type_CMS = 2,
  Component_Type_WEB = 3,
  Component_Type_DHSLB = 4,
  Component_Type_DHS = 5,
  Component_Type_XMSLB = 6,
  Component_Type_XMS = 7,
  Component_Type_RTSP = 8,
  Component_Type_RTMP = 9,
  Component_Type_HLS = 10,
  Component_Type_GBS = 11,
  Component_Type_GBXMS = 12,
  Component_Type_DSS = 13,
  Component_Type_DBE = 14,
  Component_Type_AIS = 15,
  Component_Type_TSS = 16,
  Component_Type_ALM = 17,
  Component_Type_HELMET = 18,
  Component_Type_PHONE = 19,
  Component_Type_SLEEP = 20,
  Component_Type_FACE = 21,
  Component_Type_FIGHT = 22
};
bool Component_Type_IsValid(int value);
constexpr Component_Type Component_Type_Type_MIN = Component_Type_XMQ;
constexpr Component_Type Component_Type_Type_MAX = Component_Type_FIGHT;
constexpr int Component_Type_Type_ARRAYSIZE = Component_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_Type_descriptor();
template<typename T>
inline const std::string& Component_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Component_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Component_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Component_Type_descriptor(), enum_t_value);
}
inline bool Component_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Component_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Component_Type>(
    Component_Type_descriptor(), name, value);
}
enum ComponentMessage_Command : int {
  ComponentMessage_Command_SIGNIN_REQ = 1,
  ComponentMessage_Command_SIGNIN_REP = 2,
  ComponentMessage_Command_SIGNOUT_REQ = 3,
  ComponentMessage_Command_SIGNOUT_REP = 4,
  ComponentMessage_Command_QUERY_REQ = 5,
  ComponentMessage_Command_QUERY_REP = 6
};
bool ComponentMessage_Command_IsValid(int value);
constexpr ComponentMessage_Command ComponentMessage_Command_Command_MIN = ComponentMessage_Command_SIGNIN_REQ;
constexpr ComponentMessage_Command ComponentMessage_Command_Command_MAX = ComponentMessage_Command_QUERY_REP;
constexpr int ComponentMessage_Command_Command_ARRAYSIZE = ComponentMessage_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentMessage_Command_descriptor();
template<typename T>
inline const std::string& ComponentMessage_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentMessage_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentMessage_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentMessage_Command_descriptor(), enum_t_value);
}
inline bool ComponentMessage_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComponentMessage_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentMessage_Command>(
    ComponentMessage_Command_descriptor(), name, value);
}
// ===================================================================

class Component PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Component) */ {
 public:
  inline Component() : Component(nullptr) {}
  virtual ~Component();
  explicit constexpr Component(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component& default_instance() {
    return *internal_default_instance();
  }
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component* New() const final {
    return CreateMaybeMessage<Component>(nullptr);
  }

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Component";
  }
  protected:
  explicit Component(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_component_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Component_Type Type;
  static constexpr Type XMQ =
    Component_Type_XMQ;
  static constexpr Type CMS =
    Component_Type_CMS;
  static constexpr Type WEB =
    Component_Type_WEB;
  static constexpr Type DHSLB =
    Component_Type_DHSLB;
  static constexpr Type DHS =
    Component_Type_DHS;
  static constexpr Type XMSLB =
    Component_Type_XMSLB;
  static constexpr Type XMS =
    Component_Type_XMS;
  static constexpr Type RTSP =
    Component_Type_RTSP;
  static constexpr Type RTMP =
    Component_Type_RTMP;
  static constexpr Type HLS =
    Component_Type_HLS;
  static constexpr Type GBS =
    Component_Type_GBS;
  static constexpr Type GBXMS =
    Component_Type_GBXMS;
  static constexpr Type DSS =
    Component_Type_DSS;
  static constexpr Type DBE =
    Component_Type_DBE;
  static constexpr Type AIS =
    Component_Type_AIS;
  static constexpr Type TSS =
    Component_Type_TSS;
  static constexpr Type ALM =
    Component_Type_ALM;
  static constexpr Type HELMET =
    Component_Type_HELMET;
  static constexpr Type PHONE =
    Component_Type_PHONE;
  static constexpr Type SLEEP =
    Component_Type_SLEEP;
  static constexpr Type FACE =
    Component_Type_FACE;
  static constexpr Type FIGHT =
    Component_Type_FIGHT;
  static inline bool Type_IsValid(int value) {
    return Component_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Component_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Component_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Component_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Component_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Component_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Component_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIpv4FieldNumber = 3,
    kIdFieldNumber = 4,
    kNicknameFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // required bytes name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required bytes ipv4 = 3;
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  const std::string& ipv4() const;
  void set_ipv4(const std::string& value);
  void set_ipv4(std::string&& value);
  void set_ipv4(const char* value);
  void set_ipv4(const void* value, size_t size);
  std::string* mutable_ipv4();
  std::string* release_ipv4();
  void set_allocated_ipv4(std::string* ipv4);
  private:
  const std::string& _internal_ipv4() const;
  void _internal_set_ipv4(const std::string& value);
  std::string* _internal_mutable_ipv4();
  public:

  // optional bytes id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes nickname = 5;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // required .msg.Component.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::Component_Type type() const;
  void set_type(::msg::Component_Type value);
  private:
  ::msg::Component_Type _internal_type() const;
  void _internal_set_type(::msg::Component_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Component)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  int type_;
  friend struct ::TableStruct_component_2eproto;
};
// -------------------------------------------------------------------

class ComponentMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ComponentMessage) */ {
 public:
  inline ComponentMessage() : ComponentMessage(nullptr) {}
  virtual ~ComponentMessage();
  explicit constexpr ComponentMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentMessage(const ComponentMessage& from);
  ComponentMessage(ComponentMessage&& from) noexcept
    : ComponentMessage() {
    *this = ::std::move(from);
  }

  inline ComponentMessage& operator=(const ComponentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentMessage& operator=(ComponentMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentMessage* internal_default_instance() {
    return reinterpret_cast<const ComponentMessage*>(
               &_ComponentMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComponentMessage& a, ComponentMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentMessage* New() const final {
    return CreateMaybeMessage<ComponentMessage>(nullptr);
  }

  ComponentMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentMessage& from);
  void MergeFrom(const ComponentMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ComponentMessage";
  }
  protected:
  explicit ComponentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_component_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ComponentMessage_Command Command;
  static constexpr Command SIGNIN_REQ =
    ComponentMessage_Command_SIGNIN_REQ;
  static constexpr Command SIGNIN_REP =
    ComponentMessage_Command_SIGNIN_REP;
  static constexpr Command SIGNOUT_REQ =
    ComponentMessage_Command_SIGNOUT_REQ;
  static constexpr Command SIGNOUT_REP =
    ComponentMessage_Command_SIGNOUT_REP;
  static constexpr Command QUERY_REQ =
    ComponentMessage_Command_QUERY_REQ;
  static constexpr Command QUERY_REP =
    ComponentMessage_Command_QUERY_REP;
  static inline bool Command_IsValid(int value) {
    return ComponentMessage_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    ComponentMessage_Command_Command_MIN;
  static constexpr Command Command_MAX =
    ComponentMessage_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    ComponentMessage_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return ComponentMessage_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return ComponentMessage_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return ComponentMessage_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 2,
    kPidFieldNumber = 4,
    kStatusFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // repeated .msg.Component components = 2;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::msg::Component* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Component >*
      mutable_components();
  private:
  const ::msg::Component& _internal_components(int index) const;
  ::msg::Component* _internal_add_components();
  public:
  const ::msg::Component& components(int index) const;
  ::msg::Component* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Component >&
      components() const;

  // optional bytes pid = 4;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  void set_pid(const std::string& value);
  void set_pid(std::string&& value);
  void set_pid(const char* value);
  void set_pid(const void* value, size_t size);
  std::string* mutable_pid();
  std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional int32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .msg.ComponentMessage.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::ComponentMessage_Command command() const;
  void set_command(::msg::ComponentMessage_Command value);
  private:
  ::msg::ComponentMessage_Command _internal_command() const;
  void _internal_set_command(::msg::ComponentMessage_Command value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ComponentMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Component > components_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  int command_;
  friend struct ::TableStruct_component_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Component

// required .msg.Component.Type type = 1;
inline bool Component::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Component::has_type() const {
  return _internal_has_type();
}
inline void Component::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::msg::Component_Type Component::_internal_type() const {
  return static_cast< ::msg::Component_Type >(type_);
}
inline ::msg::Component_Type Component::type() const {
  // @@protoc_insertion_point(field_get:msg.Component.type)
  return _internal_type();
}
inline void Component::_internal_set_type(::msg::Component_Type value) {
  assert(::msg::Component_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void Component::set_type(::msg::Component_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.Component.type)
}

// required bytes name = 2;
inline bool Component::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Component::has_name() const {
  return _internal_has_name();
}
inline void Component::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Component::name() const {
  // @@protoc_insertion_point(field_get:msg.Component.name)
  return _internal_name();
}
inline void Component::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.Component.name)
}
inline std::string* Component::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.Component.name)
  return _internal_mutable_name();
}
inline const std::string& Component::_internal_name() const {
  return name_.Get();
}
inline void Component::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Component::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Component.name)
}
inline void Component::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Component.name)
}
inline void Component::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Component.name)
}
inline std::string* Component::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Component::release_name() {
  // @@protoc_insertion_point(field_release:msg.Component.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Component::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Component.name)
}

// required bytes ipv4 = 3;
inline bool Component::_internal_has_ipv4() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Component::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void Component::clear_ipv4() {
  ipv4_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Component::ipv4() const {
  // @@protoc_insertion_point(field_get:msg.Component.ipv4)
  return _internal_ipv4();
}
inline void Component::set_ipv4(const std::string& value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:msg.Component.ipv4)
}
inline std::string* Component::mutable_ipv4() {
  // @@protoc_insertion_point(field_mutable:msg.Component.ipv4)
  return _internal_mutable_ipv4();
}
inline const std::string& Component::_internal_ipv4() const {
  return ipv4_.Get();
}
inline void Component::_internal_set_ipv4(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Component::set_ipv4(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ipv4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Component.ipv4)
}
inline void Component::set_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Component.ipv4)
}
inline void Component::set_ipv4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ipv4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Component.ipv4)
}
inline std::string* Component::_internal_mutable_ipv4() {
  _has_bits_[0] |= 0x00000002u;
  return ipv4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Component::release_ipv4() {
  // @@protoc_insertion_point(field_release:msg.Component.ipv4)
  if (!_internal_has_ipv4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ipv4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Component::set_allocated_ipv4(std::string* ipv4) {
  if (ipv4 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ipv4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Component.ipv4)
}

// optional bytes id = 4;
inline bool Component::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Component::has_id() const {
  return _internal_has_id();
}
inline void Component::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Component::id() const {
  // @@protoc_insertion_point(field_get:msg.Component.id)
  return _internal_id();
}
inline void Component::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.Component.id)
}
inline std::string* Component::mutable_id() {
  // @@protoc_insertion_point(field_mutable:msg.Component.id)
  return _internal_mutable_id();
}
inline const std::string& Component::_internal_id() const {
  return id_.Get();
}
inline void Component::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Component::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Component.id)
}
inline void Component::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Component.id)
}
inline void Component::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Component.id)
}
inline std::string* Component::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000004u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Component::release_id() {
  // @@protoc_insertion_point(field_release:msg.Component.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Component::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Component.id)
}

// optional bytes nickname = 5;
inline bool Component::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Component::has_nickname() const {
  return _internal_has_nickname();
}
inline void Component::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Component::nickname() const {
  // @@protoc_insertion_point(field_get:msg.Component.nickname)
  return _internal_nickname();
}
inline void Component::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:msg.Component.nickname)
}
inline std::string* Component::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:msg.Component.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Component::_internal_nickname() const {
  return nickname_.Get();
}
inline void Component::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Component::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Component.nickname)
}
inline void Component::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Component.nickname)
}
inline void Component::set_nickname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Component.nickname)
}
inline std::string* Component::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000008u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Component::release_nickname() {
  // @@protoc_insertion_point(field_release:msg.Component.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Component::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Component.nickname)
}

// -------------------------------------------------------------------

// ComponentMessage

// required .msg.ComponentMessage.Command command = 1;
inline bool ComponentMessage::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentMessage::has_command() const {
  return _internal_has_command();
}
inline void ComponentMessage::clear_command() {
  command_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::ComponentMessage_Command ComponentMessage::_internal_command() const {
  return static_cast< ::msg::ComponentMessage_Command >(command_);
}
inline ::msg::ComponentMessage_Command ComponentMessage::command() const {
  // @@protoc_insertion_point(field_get:msg.ComponentMessage.command)
  return _internal_command();
}
inline void ComponentMessage::_internal_set_command(::msg::ComponentMessage_Command value) {
  assert(::msg::ComponentMessage_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void ComponentMessage::set_command(::msg::ComponentMessage_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.ComponentMessage.command)
}

// repeated .msg.Component components = 2;
inline int ComponentMessage::_internal_components_size() const {
  return components_.size();
}
inline int ComponentMessage::components_size() const {
  return _internal_components_size();
}
inline void ComponentMessage::clear_components() {
  components_.Clear();
}
inline ::msg::Component* ComponentMessage::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ComponentMessage.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Component >*
ComponentMessage::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:msg.ComponentMessage.components)
  return &components_;
}
inline const ::msg::Component& ComponentMessage::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::msg::Component& ComponentMessage::components(int index) const {
  // @@protoc_insertion_point(field_get:msg.ComponentMessage.components)
  return _internal_components(index);
}
inline ::msg::Component* ComponentMessage::_internal_add_components() {
  return components_.Add();
}
inline ::msg::Component* ComponentMessage::add_components() {
  // @@protoc_insertion_point(field_add:msg.ComponentMessage.components)
  return _internal_add_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Component >&
ComponentMessage::components() const {
  // @@protoc_insertion_point(field_list:msg.ComponentMessage.components)
  return components_;
}

// optional int32 status = 3;
inline bool ComponentMessage::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentMessage::has_status() const {
  return _internal_has_status();
}
inline void ComponentMessage::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComponentMessage::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComponentMessage::status() const {
  // @@protoc_insertion_point(field_get:msg.ComponentMessage.status)
  return _internal_status();
}
inline void ComponentMessage::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void ComponentMessage::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.ComponentMessage.status)
}

// optional bytes pid = 4;
inline bool ComponentMessage::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentMessage::has_pid() const {
  return _internal_has_pid();
}
inline void ComponentMessage::clear_pid() {
  pid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentMessage::pid() const {
  // @@protoc_insertion_point(field_get:msg.ComponentMessage.pid)
  return _internal_pid();
}
inline void ComponentMessage::set_pid(const std::string& value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:msg.ComponentMessage.pid)
}
inline std::string* ComponentMessage::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:msg.ComponentMessage.pid)
  return _internal_mutable_pid();
}
inline const std::string& ComponentMessage::_internal_pid() const {
  return pid_.Get();
}
inline void ComponentMessage::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ComponentMessage::set_pid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ComponentMessage.pid)
}
inline void ComponentMessage::set_pid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ComponentMessage.pid)
}
inline void ComponentMessage::set_pid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ComponentMessage.pid)
}
inline std::string* ComponentMessage::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ComponentMessage::release_pid() {
  // @@protoc_insertion_point(field_release:msg.ComponentMessage.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComponentMessage::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ComponentMessage.pid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::Component_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Component_Type>() {
  return ::msg::Component_Type_descriptor();
}
template <> struct is_proto_enum< ::msg::ComponentMessage_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ComponentMessage_Command>() {
  return ::msg::ComponentMessage_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2eproto
