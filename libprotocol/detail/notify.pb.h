// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notify.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notify_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notify_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notify_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notify_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_notify_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_notify_2eproto_metadata_getter(int index);
namespace msg {
class AidsToNavigation;
struct AidsToNavigationDefaultTypeInternal;
extern AidsToNavigationDefaultTypeInternal _AidsToNavigation_default_instance_;
class ClockSyc;
struct ClockSycDefaultTypeInternal;
extern ClockSycDefaultTypeInternal _ClockSyc_default_instance_;
class NotificationMessage;
struct NotificationMessageDefaultTypeInternal;
extern NotificationMessageDefaultTypeInternal _NotificationMessage_default_instance_;
class PositionA;
struct PositionADefaultTypeInternal;
extern PositionADefaultTypeInternal _PositionA_default_instance_;
class PositionB;
struct PositionBDefaultTypeInternal;
extern PositionBDefaultTypeInternal _PositionB_default_instance_;
class ShipStatic;
struct ShipStaticDefaultTypeInternal;
extern ShipStaticDefaultTypeInternal _ShipStatic_default_instance_;
class StandardSAR;
struct StandardSARDefaultTypeInternal;
extern StandardSARDefaultTypeInternal _StandardSAR_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::AidsToNavigation* Arena::CreateMaybeMessage<::msg::AidsToNavigation>(Arena*);
template<> ::msg::ClockSyc* Arena::CreateMaybeMessage<::msg::ClockSyc>(Arena*);
template<> ::msg::NotificationMessage* Arena::CreateMaybeMessage<::msg::NotificationMessage>(Arena*);
template<> ::msg::PositionA* Arena::CreateMaybeMessage<::msg::PositionA>(Arena*);
template<> ::msg::PositionB* Arena::CreateMaybeMessage<::msg::PositionB>(Arena*);
template<> ::msg::ShipStatic* Arena::CreateMaybeMessage<::msg::ShipStatic>(Arena*);
template<> ::msg::StandardSAR* Arena::CreateMaybeMessage<::msg::StandardSAR>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum NotificationMessage_CommandType : int {
  NotificationMessage_CommandType_COMMAND_TYPE_AIS_POSITION_A = 1,
  NotificationMessage_CommandType_COMMAND_TYPE_AIS_POSITION_B = 2,
  NotificationMessage_CommandType_COMMAND_TYPE_AIS_SHIP_STATIC = 3,
  NotificationMessage_CommandType_COMMAND_TYPE_AIS_STANDARD_SAR = 4,
  NotificationMessage_CommandType_COMMAND_TYPE_AIS_AIDS_TO_NAVIGATION = 5,
  NotificationMessage_CommandType_COMMAND_TYPE_CLOCK_SYC = 6
};
bool NotificationMessage_CommandType_IsValid(int value);
constexpr NotificationMessage_CommandType NotificationMessage_CommandType_CommandType_MIN = NotificationMessage_CommandType_COMMAND_TYPE_AIS_POSITION_A;
constexpr NotificationMessage_CommandType NotificationMessage_CommandType_CommandType_MAX = NotificationMessage_CommandType_COMMAND_TYPE_CLOCK_SYC;
constexpr int NotificationMessage_CommandType_CommandType_ARRAYSIZE = NotificationMessage_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationMessage_CommandType_descriptor();
template<typename T>
inline const std::string& NotificationMessage_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationMessage_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationMessage_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NotificationMessage_CommandType_descriptor(), enum_t_value);
}
inline bool NotificationMessage_CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotificationMessage_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NotificationMessage_CommandType>(
    NotificationMessage_CommandType_descriptor(), name, value);
}
// ===================================================================

class PositionA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PositionA) */ {
 public:
  inline PositionA() : PositionA(nullptr) {}
  virtual ~PositionA();
  explicit constexpr PositionA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionA(const PositionA& from);
  PositionA(PositionA&& from) noexcept
    : PositionA() {
    *this = ::std::move(from);
  }

  inline PositionA& operator=(const PositionA& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionA& operator=(PositionA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionA& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionA* internal_default_instance() {
    return reinterpret_cast<const PositionA*>(
               &_PositionA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PositionA& a, PositionA& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionA* New() const final {
    return CreateMaybeMessage<PositionA>(nullptr);
  }

  PositionA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionA& from);
  void MergeFrom(const PositionA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PositionA";
  }
  protected:
  explicit PositionA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_notify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmsiFieldNumber = 2,
    kLongitudeFieldNumber = 7,
    kLatitudeFieldNumber = 8,
    kRepeatindicatorFieldNumber = 1,
    kNavigationalstatusFieldNumber = 3,
    kRotFieldNumber = 4,
    kSogFieldNumber = 5,
    kPositionaccuracyFieldNumber = 6,
    kCogFieldNumber = 9,
    kTrueheadingFieldNumber = 10,
    kTimestampFieldNumber = 11,
    kSpecialindicatorFieldNumber = 12,
    kSpareFieldNumber = 13,
  };
  // required bytes mmsi = 2;
  bool has_mmsi() const;
  private:
  bool _internal_has_mmsi() const;
  public:
  void clear_mmsi();
  const std::string& mmsi() const;
  void set_mmsi(const std::string& value);
  void set_mmsi(std::string&& value);
  void set_mmsi(const char* value);
  void set_mmsi(const void* value, size_t size);
  std::string* mutable_mmsi();
  std::string* release_mmsi();
  void set_allocated_mmsi(std::string* mmsi);
  private:
  const std::string& _internal_mmsi() const;
  void _internal_set_mmsi(const std::string& value);
  std::string* _internal_mutable_mmsi();
  public:

  // required bytes longitude = 7;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  const std::string& longitude() const;
  void set_longitude(const std::string& value);
  void set_longitude(std::string&& value);
  void set_longitude(const char* value);
  void set_longitude(const void* value, size_t size);
  std::string* mutable_longitude();
  std::string* release_longitude();
  void set_allocated_longitude(std::string* longitude);
  private:
  const std::string& _internal_longitude() const;
  void _internal_set_longitude(const std::string& value);
  std::string* _internal_mutable_longitude();
  public:

  // required bytes latitude = 8;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  const std::string& latitude() const;
  void set_latitude(const std::string& value);
  void set_latitude(std::string&& value);
  void set_latitude(const char* value);
  void set_latitude(const void* value, size_t size);
  std::string* mutable_latitude();
  std::string* release_latitude();
  void set_allocated_latitude(std::string* latitude);
  private:
  const std::string& _internal_latitude() const;
  void _internal_set_latitude(const std::string& value);
  std::string* _internal_mutable_latitude();
  public:

  // required int32 repeatindicator = 1;
  bool has_repeatindicator() const;
  private:
  bool _internal_has_repeatindicator() const;
  public:
  void clear_repeatindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator() const;
  void set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeatindicator() const;
  void _internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 navigationalstatus = 3;
  bool has_navigationalstatus() const;
  private:
  bool _internal_has_navigationalstatus() const;
  public:
  void clear_navigationalstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 navigationalstatus() const;
  void set_navigationalstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_navigationalstatus() const;
  void _internal_set_navigationalstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float rot = 4;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  float rot() const;
  void set_rot(float value);
  private:
  float _internal_rot() const;
  void _internal_set_rot(float value);
  public:

  // required float sog = 5;
  bool has_sog() const;
  private:
  bool _internal_has_sog() const;
  public:
  void clear_sog();
  float sog() const;
  void set_sog(float value);
  private:
  float _internal_sog() const;
  void _internal_set_sog(float value);
  public:

  // required int32 positionaccuracy = 6;
  bool has_positionaccuracy() const;
  private:
  bool _internal_has_positionaccuracy() const;
  public:
  void clear_positionaccuracy();
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy() const;
  void set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionaccuracy() const;
  void _internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float cog = 9;
  bool has_cog() const;
  private:
  bool _internal_has_cog() const;
  public:
  void clear_cog();
  float cog() const;
  void set_cog(float value);
  private:
  float _internal_cog() const;
  void _internal_set_cog(float value);
  public:

  // required int32 trueheading = 10;
  bool has_trueheading() const;
  private:
  bool _internal_has_trueheading() const;
  public:
  void clear_trueheading();
  ::PROTOBUF_NAMESPACE_ID::int32 trueheading() const;
  void set_trueheading(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trueheading() const;
  void _internal_set_trueheading(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 timestamp = 11;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 specialindicator = 12;
  bool has_specialindicator() const;
  private:
  bool _internal_has_specialindicator() const;
  public:
  void clear_specialindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 specialindicator() const;
  void set_specialindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_specialindicator() const;
  void _internal_set_specialindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 spare = 13;
  bool has_spare() const;
  private:
  bool _internal_has_spare() const;
  public:
  void clear_spare();
  ::PROTOBUF_NAMESPACE_ID::int32 spare() const;
  void set_spare(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spare() const;
  void _internal_set_spare(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PositionA)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mmsi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 navigationalstatus_;
  float rot_;
  float sog_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy_;
  float cog_;
  ::PROTOBUF_NAMESPACE_ID::int32 trueheading_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 specialindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 spare_;
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class ShipStatic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ShipStatic) */ {
 public:
  inline ShipStatic() : ShipStatic(nullptr) {}
  virtual ~ShipStatic();
  explicit constexpr ShipStatic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShipStatic(const ShipStatic& from);
  ShipStatic(ShipStatic&& from) noexcept
    : ShipStatic() {
    *this = ::std::move(from);
  }

  inline ShipStatic& operator=(const ShipStatic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShipStatic& operator=(ShipStatic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShipStatic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShipStatic* internal_default_instance() {
    return reinterpret_cast<const ShipStatic*>(
               &_ShipStatic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShipStatic& a, ShipStatic& b) {
    a.Swap(&b);
  }
  inline void Swap(ShipStatic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShipStatic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShipStatic* New() const final {
    return CreateMaybeMessage<ShipStatic>(nullptr);
  }

  ShipStatic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShipStatic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShipStatic& from);
  void MergeFrom(const ShipStatic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipStatic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ShipStatic";
  }
  protected:
  explicit ShipStatic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_notify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmsiFieldNumber = 2,
    kCallsignFieldNumber = 5,
    kNameFieldNumber = 6,
    kDimensionsFieldNumber = 8,
    kDestinationFieldNumber = 15,
    kRepeatindicatorFieldNumber = 1,
    kAisversionFieldNumber = 3,
    kImoFieldNumber = 4,
    kTypeofshipcargoFieldNumber = 7,
    kEpfdFieldNumber = 9,
    kMonthFieldNumber = 10,
    kDayFieldNumber = 11,
    kHourFieldNumber = 12,
    kMinuteFieldNumber = 13,
    kDraughtFieldNumber = 14,
    kDteFieldNumber = 16,
    kSpareFieldNumber = 17,
  };
  // required bytes mmsi = 2;
  bool has_mmsi() const;
  private:
  bool _internal_has_mmsi() const;
  public:
  void clear_mmsi();
  const std::string& mmsi() const;
  void set_mmsi(const std::string& value);
  void set_mmsi(std::string&& value);
  void set_mmsi(const char* value);
  void set_mmsi(const void* value, size_t size);
  std::string* mutable_mmsi();
  std::string* release_mmsi();
  void set_allocated_mmsi(std::string* mmsi);
  private:
  const std::string& _internal_mmsi() const;
  void _internal_set_mmsi(const std::string& value);
  std::string* _internal_mutable_mmsi();
  public:

  // required bytes callsign = 5;
  bool has_callsign() const;
  private:
  bool _internal_has_callsign() const;
  public:
  void clear_callsign();
  const std::string& callsign() const;
  void set_callsign(const std::string& value);
  void set_callsign(std::string&& value);
  void set_callsign(const char* value);
  void set_callsign(const void* value, size_t size);
  std::string* mutable_callsign();
  std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // required bytes name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required bytes dimensions = 8;
  bool has_dimensions() const;
  private:
  bool _internal_has_dimensions() const;
  public:
  void clear_dimensions();
  const std::string& dimensions() const;
  void set_dimensions(const std::string& value);
  void set_dimensions(std::string&& value);
  void set_dimensions(const char* value);
  void set_dimensions(const void* value, size_t size);
  std::string* mutable_dimensions();
  std::string* release_dimensions();
  void set_allocated_dimensions(std::string* dimensions);
  private:
  const std::string& _internal_dimensions() const;
  void _internal_set_dimensions(const std::string& value);
  std::string* _internal_mutable_dimensions();
  public:

  // required bytes destination = 15;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const void* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // required int32 repeatindicator = 1;
  bool has_repeatindicator() const;
  private:
  bool _internal_has_repeatindicator() const;
  public:
  void clear_repeatindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator() const;
  void set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeatindicator() const;
  void _internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 aisversion = 3;
  bool has_aisversion() const;
  private:
  bool _internal_has_aisversion() const;
  public:
  void clear_aisversion();
  ::PROTOBUF_NAMESPACE_ID::int32 aisversion() const;
  void set_aisversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aisversion() const;
  void _internal_set_aisversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 imo = 4;
  bool has_imo() const;
  private:
  bool _internal_has_imo() const;
  public:
  void clear_imo();
  ::PROTOBUF_NAMESPACE_ID::int32 imo() const;
  void set_imo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_imo() const;
  void _internal_set_imo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 typeofshipcargo = 7;
  bool has_typeofshipcargo() const;
  private:
  bool _internal_has_typeofshipcargo() const;
  public:
  void clear_typeofshipcargo();
  ::PROTOBUF_NAMESPACE_ID::int32 typeofshipcargo() const;
  void set_typeofshipcargo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_typeofshipcargo() const;
  void _internal_set_typeofshipcargo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 epfd = 9;
  bool has_epfd() const;
  private:
  bool _internal_has_epfd() const;
  public:
  void clear_epfd();
  ::PROTOBUF_NAMESPACE_ID::int32 epfd() const;
  void set_epfd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epfd() const;
  void _internal_set_epfd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 month = 10;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 day = 11;
  bool has_day() const;
  private:
  bool _internal_has_day() const;
  public:
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 hour = 12;
  bool has_hour() const;
  private:
  bool _internal_has_hour() const;
  public:
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour() const;
  void _internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 minute = 13;
  bool has_minute() const;
  private:
  bool _internal_has_minute() const;
  public:
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::int32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minute() const;
  void _internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float draught = 14;
  bool has_draught() const;
  private:
  bool _internal_has_draught() const;
  public:
  void clear_draught();
  float draught() const;
  void set_draught(float value);
  private:
  float _internal_draught() const;
  void _internal_set_draught(float value);
  public:

  // required int32 dte = 16;
  bool has_dte() const;
  private:
  bool _internal_has_dte() const;
  public:
  void clear_dte();
  ::PROTOBUF_NAMESPACE_ID::int32 dte() const;
  void set_dte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dte() const;
  void _internal_set_dte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 spare = 17;
  bool has_spare() const;
  private:
  bool _internal_has_spare() const;
  public:
  void clear_spare();
  ::PROTOBUF_NAMESPACE_ID::int32 spare() const;
  void set_spare(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spare() const;
  void _internal_set_spare(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ShipStatic)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mmsi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dimensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 aisversion_;
  ::PROTOBUF_NAMESPACE_ID::int32 imo_;
  ::PROTOBUF_NAMESPACE_ID::int32 typeofshipcargo_;
  ::PROTOBUF_NAMESPACE_ID::int32 epfd_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 minute_;
  float draught_;
  ::PROTOBUF_NAMESPACE_ID::int32 dte_;
  ::PROTOBUF_NAMESPACE_ID::int32 spare_;
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class StandardSAR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.StandardSAR) */ {
 public:
  inline StandardSAR() : StandardSAR(nullptr) {}
  virtual ~StandardSAR();
  explicit constexpr StandardSAR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StandardSAR(const StandardSAR& from);
  StandardSAR(StandardSAR&& from) noexcept
    : StandardSAR() {
    *this = ::std::move(from);
  }

  inline StandardSAR& operator=(const StandardSAR& from) {
    CopyFrom(from);
    return *this;
  }
  inline StandardSAR& operator=(StandardSAR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StandardSAR& default_instance() {
    return *internal_default_instance();
  }
  static inline const StandardSAR* internal_default_instance() {
    return reinterpret_cast<const StandardSAR*>(
               &_StandardSAR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StandardSAR& a, StandardSAR& b) {
    a.Swap(&b);
  }
  inline void Swap(StandardSAR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StandardSAR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StandardSAR* New() const final {
    return CreateMaybeMessage<StandardSAR>(nullptr);
  }

  StandardSAR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StandardSAR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StandardSAR& from);
  void MergeFrom(const StandardSAR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StandardSAR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.StandardSAR";
  }
  protected:
  explicit StandardSAR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_notify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmsiFieldNumber = 2,
    kLongitudeFieldNumber = 6,
    kLatitudeFieldNumber = 7,
    kRepeatindicatorFieldNumber = 1,
    kAltitudeFieldNumber = 3,
    kSogFieldNumber = 4,
    kPositionaccuracyFieldNumber = 5,
    kCogFieldNumber = 8,
    kTimestampFieldNumber = 9,
    kAltitudesensorFieldNumber = 10,
    kSpareFieldNumber = 11,
    kAssignmodeflagFieldNumber = 12,
    kRaimflagFieldNumber = 13,
    kCommstateselectorflagFieldNumber = 14,
    kCommunicationstateFieldNumber = 15,
  };
  // required bytes mmsi = 2;
  bool has_mmsi() const;
  private:
  bool _internal_has_mmsi() const;
  public:
  void clear_mmsi();
  const std::string& mmsi() const;
  void set_mmsi(const std::string& value);
  void set_mmsi(std::string&& value);
  void set_mmsi(const char* value);
  void set_mmsi(const void* value, size_t size);
  std::string* mutable_mmsi();
  std::string* release_mmsi();
  void set_allocated_mmsi(std::string* mmsi);
  private:
  const std::string& _internal_mmsi() const;
  void _internal_set_mmsi(const std::string& value);
  std::string* _internal_mutable_mmsi();
  public:

  // required bytes longitude = 6;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  const std::string& longitude() const;
  void set_longitude(const std::string& value);
  void set_longitude(std::string&& value);
  void set_longitude(const char* value);
  void set_longitude(const void* value, size_t size);
  std::string* mutable_longitude();
  std::string* release_longitude();
  void set_allocated_longitude(std::string* longitude);
  private:
  const std::string& _internal_longitude() const;
  void _internal_set_longitude(const std::string& value);
  std::string* _internal_mutable_longitude();
  public:

  // required bytes latitude = 7;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  const std::string& latitude() const;
  void set_latitude(const std::string& value);
  void set_latitude(std::string&& value);
  void set_latitude(const char* value);
  void set_latitude(const void* value, size_t size);
  std::string* mutable_latitude();
  std::string* release_latitude();
  void set_allocated_latitude(std::string* latitude);
  private:
  const std::string& _internal_latitude() const;
  void _internal_set_latitude(const std::string& value);
  std::string* _internal_mutable_latitude();
  public:

  // required int32 repeatindicator = 1;
  bool has_repeatindicator() const;
  private:
  bool _internal_has_repeatindicator() const;
  public:
  void clear_repeatindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator() const;
  void set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeatindicator() const;
  void _internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 altitude = 3;
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  ::PROTOBUF_NAMESPACE_ID::int32 altitude() const;
  void set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_altitude() const;
  void _internal_set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float sog = 4;
  bool has_sog() const;
  private:
  bool _internal_has_sog() const;
  public:
  void clear_sog();
  float sog() const;
  void set_sog(float value);
  private:
  float _internal_sog() const;
  void _internal_set_sog(float value);
  public:

  // required int32 positionaccuracy = 5;
  bool has_positionaccuracy() const;
  private:
  bool _internal_has_positionaccuracy() const;
  public:
  void clear_positionaccuracy();
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy() const;
  void set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionaccuracy() const;
  void _internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float cog = 8;
  bool has_cog() const;
  private:
  bool _internal_has_cog() const;
  public:
  void clear_cog();
  float cog() const;
  void set_cog(float value);
  private:
  float _internal_cog() const;
  void _internal_set_cog(float value);
  public:

  // required int32 timestamp = 9;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 altitudesensor = 10;
  bool has_altitudesensor() const;
  private:
  bool _internal_has_altitudesensor() const;
  public:
  void clear_altitudesensor();
  ::PROTOBUF_NAMESPACE_ID::int32 altitudesensor() const;
  void set_altitudesensor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_altitudesensor() const;
  void _internal_set_altitudesensor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 spare = 11;
  bool has_spare() const;
  private:
  bool _internal_has_spare() const;
  public:
  void clear_spare();
  ::PROTOBUF_NAMESPACE_ID::int32 spare() const;
  void set_spare(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spare() const;
  void _internal_set_spare(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 assignmodeflag = 12;
  bool has_assignmodeflag() const;
  private:
  bool _internal_has_assignmodeflag() const;
  public:
  void clear_assignmodeflag();
  ::PROTOBUF_NAMESPACE_ID::int32 assignmodeflag() const;
  void set_assignmodeflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_assignmodeflag() const;
  void _internal_set_assignmodeflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 raimflag = 13;
  bool has_raimflag() const;
  private:
  bool _internal_has_raimflag() const;
  public:
  void clear_raimflag();
  ::PROTOBUF_NAMESPACE_ID::int32 raimflag() const;
  void set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_raimflag() const;
  void _internal_set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 commstateselectorflag = 14;
  bool has_commstateselectorflag() const;
  private:
  bool _internal_has_commstateselectorflag() const;
  public:
  void clear_commstateselectorflag();
  ::PROTOBUF_NAMESPACE_ID::int32 commstateselectorflag() const;
  void set_commstateselectorflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_commstateselectorflag() const;
  void _internal_set_commstateselectorflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 communicationstate = 15;
  bool has_communicationstate() const;
  private:
  bool _internal_has_communicationstate() const;
  public:
  void clear_communicationstate();
  ::PROTOBUF_NAMESPACE_ID::int32 communicationstate() const;
  void set_communicationstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_communicationstate() const;
  void _internal_set_communicationstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.StandardSAR)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mmsi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 altitude_;
  float sog_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy_;
  float cog_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 altitudesensor_;
  ::PROTOBUF_NAMESPACE_ID::int32 spare_;
  ::PROTOBUF_NAMESPACE_ID::int32 assignmodeflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 raimflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 commstateselectorflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 communicationstate_;
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class PositionB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PositionB) */ {
 public:
  inline PositionB() : PositionB(nullptr) {}
  virtual ~PositionB();
  explicit constexpr PositionB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionB(const PositionB& from);
  PositionB(PositionB&& from) noexcept
    : PositionB() {
    *this = ::std::move(from);
  }

  inline PositionB& operator=(const PositionB& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionB& operator=(PositionB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionB& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionB* internal_default_instance() {
    return reinterpret_cast<const PositionB*>(
               &_PositionB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PositionB& a, PositionB& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionB* New() const final {
    return CreateMaybeMessage<PositionB>(nullptr);
  }

  PositionB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionB& from);
  void MergeFrom(const PositionB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PositionB";
  }
  protected:
  explicit PositionB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_notify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmsiFieldNumber = 2,
    kLongitudeFieldNumber = 6,
    kLatitudeFieldNumber = 7,
    kRepeatindicatorFieldNumber = 1,
    kSpare1FieldNumber = 3,
    kSogFieldNumber = 4,
    kPositionaccuracyFieldNumber = 5,
    kCogFieldNumber = 8,
    kTrueheadingFieldNumber = 9,
    kTimestampFieldNumber = 10,
    kSpare2FieldNumber = 11,
    kBunitflagFieldNumber = 12,
    kBdisplayflagFieldNumber = 13,
    kBdscflagFieldNumber = 14,
    kBbandflagFieldNumber = 15,
    kBmessage22FlagFieldNumber = 16,
    kModeflagFieldNumber = 17,
    kRaimflagFieldNumber = 18,
    kCommstateselectorflagFieldNumber = 19,
    kSyncstateFieldNumber = 20,
    kSlotincrementFieldNumber = 21,
    kNumberofslotsFieldNumber = 22,
    kKeepflagFieldNumber = 23,
  };
  // required bytes mmsi = 2;
  bool has_mmsi() const;
  private:
  bool _internal_has_mmsi() const;
  public:
  void clear_mmsi();
  const std::string& mmsi() const;
  void set_mmsi(const std::string& value);
  void set_mmsi(std::string&& value);
  void set_mmsi(const char* value);
  void set_mmsi(const void* value, size_t size);
  std::string* mutable_mmsi();
  std::string* release_mmsi();
  void set_allocated_mmsi(std::string* mmsi);
  private:
  const std::string& _internal_mmsi() const;
  void _internal_set_mmsi(const std::string& value);
  std::string* _internal_mutable_mmsi();
  public:

  // required bytes longitude = 6;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  const std::string& longitude() const;
  void set_longitude(const std::string& value);
  void set_longitude(std::string&& value);
  void set_longitude(const char* value);
  void set_longitude(const void* value, size_t size);
  std::string* mutable_longitude();
  std::string* release_longitude();
  void set_allocated_longitude(std::string* longitude);
  private:
  const std::string& _internal_longitude() const;
  void _internal_set_longitude(const std::string& value);
  std::string* _internal_mutable_longitude();
  public:

  // required bytes latitude = 7;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  const std::string& latitude() const;
  void set_latitude(const std::string& value);
  void set_latitude(std::string&& value);
  void set_latitude(const char* value);
  void set_latitude(const void* value, size_t size);
  std::string* mutable_latitude();
  std::string* release_latitude();
  void set_allocated_latitude(std::string* latitude);
  private:
  const std::string& _internal_latitude() const;
  void _internal_set_latitude(const std::string& value);
  std::string* _internal_mutable_latitude();
  public:

  // required int32 repeatindicator = 1;
  bool has_repeatindicator() const;
  private:
  bool _internal_has_repeatindicator() const;
  public:
  void clear_repeatindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator() const;
  void set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeatindicator() const;
  void _internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 spare1 = 3;
  bool has_spare1() const;
  private:
  bool _internal_has_spare1() const;
  public:
  void clear_spare1();
  ::PROTOBUF_NAMESPACE_ID::int32 spare1() const;
  void set_spare1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spare1() const;
  void _internal_set_spare1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float sog = 4;
  bool has_sog() const;
  private:
  bool _internal_has_sog() const;
  public:
  void clear_sog();
  float sog() const;
  void set_sog(float value);
  private:
  float _internal_sog() const;
  void _internal_set_sog(float value);
  public:

  // required int32 positionaccuracy = 5;
  bool has_positionaccuracy() const;
  private:
  bool _internal_has_positionaccuracy() const;
  public:
  void clear_positionaccuracy();
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy() const;
  void set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionaccuracy() const;
  void _internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float cog = 8;
  bool has_cog() const;
  private:
  bool _internal_has_cog() const;
  public:
  void clear_cog();
  float cog() const;
  void set_cog(float value);
  private:
  float _internal_cog() const;
  void _internal_set_cog(float value);
  public:

  // required int32 trueheading = 9;
  bool has_trueheading() const;
  private:
  bool _internal_has_trueheading() const;
  public:
  void clear_trueheading();
  ::PROTOBUF_NAMESPACE_ID::int32 trueheading() const;
  void set_trueheading(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trueheading() const;
  void _internal_set_trueheading(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 timestamp = 10;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 spare2 = 11;
  bool has_spare2() const;
  private:
  bool _internal_has_spare2() const;
  public:
  void clear_spare2();
  ::PROTOBUF_NAMESPACE_ID::int32 spare2() const;
  void set_spare2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spare2() const;
  void _internal_set_spare2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 bunitflag = 12;
  bool has_bunitflag() const;
  private:
  bool _internal_has_bunitflag() const;
  public:
  void clear_bunitflag();
  ::PROTOBUF_NAMESPACE_ID::int32 bunitflag() const;
  void set_bunitflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bunitflag() const;
  void _internal_set_bunitflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 bdisplayflag = 13;
  bool has_bdisplayflag() const;
  private:
  bool _internal_has_bdisplayflag() const;
  public:
  void clear_bdisplayflag();
  ::PROTOBUF_NAMESPACE_ID::int32 bdisplayflag() const;
  void set_bdisplayflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bdisplayflag() const;
  void _internal_set_bdisplayflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 bdscflag = 14;
  bool has_bdscflag() const;
  private:
  bool _internal_has_bdscflag() const;
  public:
  void clear_bdscflag();
  ::PROTOBUF_NAMESPACE_ID::int32 bdscflag() const;
  void set_bdscflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bdscflag() const;
  void _internal_set_bdscflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 bbandflag = 15;
  bool has_bbandflag() const;
  private:
  bool _internal_has_bbandflag() const;
  public:
  void clear_bbandflag();
  ::PROTOBUF_NAMESPACE_ID::int32 bbandflag() const;
  void set_bbandflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bbandflag() const;
  void _internal_set_bbandflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 bmessage22flag = 16;
  bool has_bmessage22flag() const;
  private:
  bool _internal_has_bmessage22flag() const;
  public:
  void clear_bmessage22flag();
  ::PROTOBUF_NAMESPACE_ID::int32 bmessage22flag() const;
  void set_bmessage22flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bmessage22flag() const;
  void _internal_set_bmessage22flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 modeflag = 17;
  bool has_modeflag() const;
  private:
  bool _internal_has_modeflag() const;
  public:
  void clear_modeflag();
  ::PROTOBUF_NAMESPACE_ID::int32 modeflag() const;
  void set_modeflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modeflag() const;
  void _internal_set_modeflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 raimflag = 18;
  bool has_raimflag() const;
  private:
  bool _internal_has_raimflag() const;
  public:
  void clear_raimflag();
  ::PROTOBUF_NAMESPACE_ID::int32 raimflag() const;
  void set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_raimflag() const;
  void _internal_set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 commstateselectorflag = 19;
  bool has_commstateselectorflag() const;
  private:
  bool _internal_has_commstateselectorflag() const;
  public:
  void clear_commstateselectorflag();
  ::PROTOBUF_NAMESPACE_ID::int32 commstateselectorflag() const;
  void set_commstateselectorflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_commstateselectorflag() const;
  void _internal_set_commstateselectorflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 syncstate = 20;
  bool has_syncstate() const;
  private:
  bool _internal_has_syncstate() const;
  public:
  void clear_syncstate();
  ::PROTOBUF_NAMESPACE_ID::int32 syncstate() const;
  void set_syncstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_syncstate() const;
  void _internal_set_syncstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 slotincrement = 21;
  bool has_slotincrement() const;
  private:
  bool _internal_has_slotincrement() const;
  public:
  void clear_slotincrement();
  ::PROTOBUF_NAMESPACE_ID::int32 slotincrement() const;
  void set_slotincrement(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slotincrement() const;
  void _internal_set_slotincrement(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 numberofslots = 22;
  bool has_numberofslots() const;
  private:
  bool _internal_has_numberofslots() const;
  public:
  void clear_numberofslots();
  ::PROTOBUF_NAMESPACE_ID::int32 numberofslots() const;
  void set_numberofslots(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numberofslots() const;
  void _internal_set_numberofslots(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 keepflag = 23;
  bool has_keepflag() const;
  private:
  bool _internal_has_keepflag() const;
  public:
  void clear_keepflag();
  ::PROTOBUF_NAMESPACE_ID::int32 keepflag() const;
  void set_keepflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keepflag() const;
  void _internal_set_keepflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PositionB)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mmsi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 spare1_;
  float sog_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy_;
  float cog_;
  ::PROTOBUF_NAMESPACE_ID::int32 trueheading_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 spare2_;
  ::PROTOBUF_NAMESPACE_ID::int32 bunitflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 bdisplayflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 bdscflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 bbandflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 bmessage22flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 modeflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 raimflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 commstateselectorflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 syncstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 slotincrement_;
  ::PROTOBUF_NAMESPACE_ID::int32 numberofslots_;
  ::PROTOBUF_NAMESPACE_ID::int32 keepflag_;
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class AidsToNavigation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AidsToNavigation) */ {
 public:
  inline AidsToNavigation() : AidsToNavigation(nullptr) {}
  virtual ~AidsToNavigation();
  explicit constexpr AidsToNavigation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AidsToNavigation(const AidsToNavigation& from);
  AidsToNavigation(AidsToNavigation&& from) noexcept
    : AidsToNavigation() {
    *this = ::std::move(from);
  }

  inline AidsToNavigation& operator=(const AidsToNavigation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AidsToNavigation& operator=(AidsToNavigation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AidsToNavigation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AidsToNavigation* internal_default_instance() {
    return reinterpret_cast<const AidsToNavigation*>(
               &_AidsToNavigation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AidsToNavigation& a, AidsToNavigation& b) {
    a.Swap(&b);
  }
  inline void Swap(AidsToNavigation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AidsToNavigation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AidsToNavigation* New() const final {
    return CreateMaybeMessage<AidsToNavigation>(nullptr);
  }

  AidsToNavigation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AidsToNavigation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AidsToNavigation& from);
  void MergeFrom(const AidsToNavigation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AidsToNavigation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AidsToNavigation";
  }
  protected:
  explicit AidsToNavigation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_notify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmsiFieldNumber = 2,
    kNameFieldNumber = 4,
    kLongitudeFieldNumber = 6,
    kLatitudeFieldNumber = 7,
    kDimensionsFieldNumber = 8,
    kExtendnameFieldNumber = 17,
    kRepeatindicatorFieldNumber = 1,
    kNavigationtypeFieldNumber = 3,
    kPositionaccuracyFieldNumber = 5,
    kEpfdFieldNumber = 9,
    kUtctimestampFieldNumber = 10,
    kOnoffpositionindicatorFieldNumber = 11,
    kAtonflagFieldNumber = 12,
    kRaimflagFieldNumber = 13,
    kVirtualflagFieldNumber = 14,
    kModeindicatorFieldNumber = 15,
    kSpareFieldNumber = 16,
    kStufbitsFieldNumber = 18,
  };
  // required bytes mmsi = 2;
  bool has_mmsi() const;
  private:
  bool _internal_has_mmsi() const;
  public:
  void clear_mmsi();
  const std::string& mmsi() const;
  void set_mmsi(const std::string& value);
  void set_mmsi(std::string&& value);
  void set_mmsi(const char* value);
  void set_mmsi(const void* value, size_t size);
  std::string* mutable_mmsi();
  std::string* release_mmsi();
  void set_allocated_mmsi(std::string* mmsi);
  private:
  const std::string& _internal_mmsi() const;
  void _internal_set_mmsi(const std::string& value);
  std::string* _internal_mutable_mmsi();
  public:

  // required bytes name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required bytes longitude = 6;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  const std::string& longitude() const;
  void set_longitude(const std::string& value);
  void set_longitude(std::string&& value);
  void set_longitude(const char* value);
  void set_longitude(const void* value, size_t size);
  std::string* mutable_longitude();
  std::string* release_longitude();
  void set_allocated_longitude(std::string* longitude);
  private:
  const std::string& _internal_longitude() const;
  void _internal_set_longitude(const std::string& value);
  std::string* _internal_mutable_longitude();
  public:

  // required bytes latitude = 7;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  const std::string& latitude() const;
  void set_latitude(const std::string& value);
  void set_latitude(std::string&& value);
  void set_latitude(const char* value);
  void set_latitude(const void* value, size_t size);
  std::string* mutable_latitude();
  std::string* release_latitude();
  void set_allocated_latitude(std::string* latitude);
  private:
  const std::string& _internal_latitude() const;
  void _internal_set_latitude(const std::string& value);
  std::string* _internal_mutable_latitude();
  public:

  // required bytes dimensions = 8;
  bool has_dimensions() const;
  private:
  bool _internal_has_dimensions() const;
  public:
  void clear_dimensions();
  const std::string& dimensions() const;
  void set_dimensions(const std::string& value);
  void set_dimensions(std::string&& value);
  void set_dimensions(const char* value);
  void set_dimensions(const void* value, size_t size);
  std::string* mutable_dimensions();
  std::string* release_dimensions();
  void set_allocated_dimensions(std::string* dimensions);
  private:
  const std::string& _internal_dimensions() const;
  void _internal_set_dimensions(const std::string& value);
  std::string* _internal_mutable_dimensions();
  public:

  // required bytes extendname = 17;
  bool has_extendname() const;
  private:
  bool _internal_has_extendname() const;
  public:
  void clear_extendname();
  const std::string& extendname() const;
  void set_extendname(const std::string& value);
  void set_extendname(std::string&& value);
  void set_extendname(const char* value);
  void set_extendname(const void* value, size_t size);
  std::string* mutable_extendname();
  std::string* release_extendname();
  void set_allocated_extendname(std::string* extendname);
  private:
  const std::string& _internal_extendname() const;
  void _internal_set_extendname(const std::string& value);
  std::string* _internal_mutable_extendname();
  public:

  // required int32 repeatindicator = 1;
  bool has_repeatindicator() const;
  private:
  bool _internal_has_repeatindicator() const;
  public:
  void clear_repeatindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator() const;
  void set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeatindicator() const;
  void _internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 navigationtype = 3;
  bool has_navigationtype() const;
  private:
  bool _internal_has_navigationtype() const;
  public:
  void clear_navigationtype();
  ::PROTOBUF_NAMESPACE_ID::int32 navigationtype() const;
  void set_navigationtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_navigationtype() const;
  void _internal_set_navigationtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 positionaccuracy = 5;
  bool has_positionaccuracy() const;
  private:
  bool _internal_has_positionaccuracy() const;
  public:
  void clear_positionaccuracy();
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy() const;
  void set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionaccuracy() const;
  void _internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 epfd = 9;
  bool has_epfd() const;
  private:
  bool _internal_has_epfd() const;
  public:
  void clear_epfd();
  ::PROTOBUF_NAMESPACE_ID::int32 epfd() const;
  void set_epfd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epfd() const;
  void _internal_set_epfd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 utctimestamp = 10;
  bool has_utctimestamp() const;
  private:
  bool _internal_has_utctimestamp() const;
  public:
  void clear_utctimestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 utctimestamp() const;
  void set_utctimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_utctimestamp() const;
  void _internal_set_utctimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 onoffpositionindicator = 11;
  bool has_onoffpositionindicator() const;
  private:
  bool _internal_has_onoffpositionindicator() const;
  public:
  void clear_onoffpositionindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 onoffpositionindicator() const;
  void set_onoffpositionindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onoffpositionindicator() const;
  void _internal_set_onoffpositionindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 atonflag = 12;
  bool has_atonflag() const;
  private:
  bool _internal_has_atonflag() const;
  public:
  void clear_atonflag();
  ::PROTOBUF_NAMESPACE_ID::int32 atonflag() const;
  void set_atonflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_atonflag() const;
  void _internal_set_atonflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 raimflag = 13;
  bool has_raimflag() const;
  private:
  bool _internal_has_raimflag() const;
  public:
  void clear_raimflag();
  ::PROTOBUF_NAMESPACE_ID::int32 raimflag() const;
  void set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_raimflag() const;
  void _internal_set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 virtualflag = 14;
  bool has_virtualflag() const;
  private:
  bool _internal_has_virtualflag() const;
  public:
  void clear_virtualflag();
  ::PROTOBUF_NAMESPACE_ID::int32 virtualflag() const;
  void set_virtualflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_virtualflag() const;
  void _internal_set_virtualflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 modeindicator = 15;
  bool has_modeindicator() const;
  private:
  bool _internal_has_modeindicator() const;
  public:
  void clear_modeindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 modeindicator() const;
  void set_modeindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modeindicator() const;
  void _internal_set_modeindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 spare = 16;
  bool has_spare() const;
  private:
  bool _internal_has_spare() const;
  public:
  void clear_spare();
  ::PROTOBUF_NAMESPACE_ID::int32 spare() const;
  void set_spare(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spare() const;
  void _internal_set_spare(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 stufbits = 18;
  bool has_stufbits() const;
  private:
  bool _internal_has_stufbits() const;
  public:
  void clear_stufbits();
  ::PROTOBUF_NAMESPACE_ID::int32 stufbits() const;
  void set_stufbits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stufbits() const;
  void _internal_set_stufbits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AidsToNavigation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mmsi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dimensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extendname_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 navigationtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy_;
  ::PROTOBUF_NAMESPACE_ID::int32 epfd_;
  ::PROTOBUF_NAMESPACE_ID::int32 utctimestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 onoffpositionindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 atonflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 raimflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 virtualflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 modeindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 spare_;
  ::PROTOBUF_NAMESPACE_ID::int32 stufbits_;
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class ClockSyc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ClockSyc) */ {
 public:
  inline ClockSyc() : ClockSyc(nullptr) {}
  virtual ~ClockSyc();
  explicit constexpr ClockSyc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClockSyc(const ClockSyc& from);
  ClockSyc(ClockSyc&& from) noexcept
    : ClockSyc() {
    *this = ::std::move(from);
  }

  inline ClockSyc& operator=(const ClockSyc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockSyc& operator=(ClockSyc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClockSyc& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClockSyc* internal_default_instance() {
    return reinterpret_cast<const ClockSyc*>(
               &_ClockSyc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClockSyc& a, ClockSyc& b) {
    a.Swap(&b);
  }
  inline void Swap(ClockSyc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClockSyc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClockSyc* New() const final {
    return CreateMaybeMessage<ClockSyc>(nullptr);
  }

  ClockSyc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClockSyc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClockSyc& from);
  void MergeFrom(const ClockSyc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClockSyc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ClockSyc";
  }
  protected:
  explicit ClockSyc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_notify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClockFieldNumber = 1,
  };
  // required bytes clock = 1;
  bool has_clock() const;
  private:
  bool _internal_has_clock() const;
  public:
  void clear_clock();
  const std::string& clock() const;
  void set_clock(const std::string& value);
  void set_clock(std::string&& value);
  void set_clock(const char* value);
  void set_clock(const void* value, size_t size);
  std::string* mutable_clock();
  std::string* release_clock();
  void set_allocated_clock(std::string* clock);
  private:
  const std::string& _internal_clock() const;
  void _internal_set_clock(const std::string& value);
  std::string* _internal_mutable_clock();
  public:

  // @@protoc_insertion_point(class_scope:msg.ClockSyc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clock_;
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class NotificationMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.NotificationMessage) */ {
 public:
  inline NotificationMessage() : NotificationMessage(nullptr) {}
  virtual ~NotificationMessage();
  explicit constexpr NotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationMessage(const NotificationMessage& from);
  NotificationMessage(NotificationMessage&& from) noexcept
    : NotificationMessage() {
    *this = ::std::move(from);
  }

  inline NotificationMessage& operator=(const NotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationMessage& operator=(NotificationMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationMessage* internal_default_instance() {
    return reinterpret_cast<const NotificationMessage*>(
               &_NotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NotificationMessage& a, NotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationMessage* New() const final {
    return CreateMaybeMessage<NotificationMessage>(nullptr);
  }

  NotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotificationMessage& from);
  void MergeFrom(const NotificationMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.NotificationMessage";
  }
  protected:
  explicit NotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_notify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef NotificationMessage_CommandType CommandType;
  static constexpr CommandType COMMAND_TYPE_AIS_POSITION_A =
    NotificationMessage_CommandType_COMMAND_TYPE_AIS_POSITION_A;
  static constexpr CommandType COMMAND_TYPE_AIS_POSITION_B =
    NotificationMessage_CommandType_COMMAND_TYPE_AIS_POSITION_B;
  static constexpr CommandType COMMAND_TYPE_AIS_SHIP_STATIC =
    NotificationMessage_CommandType_COMMAND_TYPE_AIS_SHIP_STATIC;
  static constexpr CommandType COMMAND_TYPE_AIS_STANDARD_SAR =
    NotificationMessage_CommandType_COMMAND_TYPE_AIS_STANDARD_SAR;
  static constexpr CommandType COMMAND_TYPE_AIS_AIDS_TO_NAVIGATION =
    NotificationMessage_CommandType_COMMAND_TYPE_AIS_AIDS_TO_NAVIGATION;
  static constexpr CommandType COMMAND_TYPE_CLOCK_SYC =
    NotificationMessage_CommandType_COMMAND_TYPE_CLOCK_SYC;
  static inline bool CommandType_IsValid(int value) {
    return NotificationMessage_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    NotificationMessage_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    NotificationMessage_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    NotificationMessage_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return NotificationMessage_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return NotificationMessage_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandType* value) {
    return NotificationMessage_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kClocksycFieldNumber = 2,
    kPositionaFieldNumber = 3,
    kShipstaticFieldNumber = 4,
    kStandardsarFieldNumber = 5,
    kPositionbFieldNumber = 6,
    kAidstonavigationFieldNumber = 7,
    kTypeFieldNumber = 1,
  };
  // optional .msg.ClockSyc clocksyc = 2;
  bool has_clocksyc() const;
  private:
  bool _internal_has_clocksyc() const;
  public:
  void clear_clocksyc();
  const ::msg::ClockSyc& clocksyc() const;
  ::msg::ClockSyc* release_clocksyc();
  ::msg::ClockSyc* mutable_clocksyc();
  void set_allocated_clocksyc(::msg::ClockSyc* clocksyc);
  private:
  const ::msg::ClockSyc& _internal_clocksyc() const;
  ::msg::ClockSyc* _internal_mutable_clocksyc();
  public:
  void unsafe_arena_set_allocated_clocksyc(
      ::msg::ClockSyc* clocksyc);
  ::msg::ClockSyc* unsafe_arena_release_clocksyc();

  // optional .msg.PositionA positiona = 3;
  bool has_positiona() const;
  private:
  bool _internal_has_positiona() const;
  public:
  void clear_positiona();
  const ::msg::PositionA& positiona() const;
  ::msg::PositionA* release_positiona();
  ::msg::PositionA* mutable_positiona();
  void set_allocated_positiona(::msg::PositionA* positiona);
  private:
  const ::msg::PositionA& _internal_positiona() const;
  ::msg::PositionA* _internal_mutable_positiona();
  public:
  void unsafe_arena_set_allocated_positiona(
      ::msg::PositionA* positiona);
  ::msg::PositionA* unsafe_arena_release_positiona();

  // optional .msg.ShipStatic shipstatic = 4;
  bool has_shipstatic() const;
  private:
  bool _internal_has_shipstatic() const;
  public:
  void clear_shipstatic();
  const ::msg::ShipStatic& shipstatic() const;
  ::msg::ShipStatic* release_shipstatic();
  ::msg::ShipStatic* mutable_shipstatic();
  void set_allocated_shipstatic(::msg::ShipStatic* shipstatic);
  private:
  const ::msg::ShipStatic& _internal_shipstatic() const;
  ::msg::ShipStatic* _internal_mutable_shipstatic();
  public:
  void unsafe_arena_set_allocated_shipstatic(
      ::msg::ShipStatic* shipstatic);
  ::msg::ShipStatic* unsafe_arena_release_shipstatic();

  // optional .msg.StandardSAR standardsar = 5;
  bool has_standardsar() const;
  private:
  bool _internal_has_standardsar() const;
  public:
  void clear_standardsar();
  const ::msg::StandardSAR& standardsar() const;
  ::msg::StandardSAR* release_standardsar();
  ::msg::StandardSAR* mutable_standardsar();
  void set_allocated_standardsar(::msg::StandardSAR* standardsar);
  private:
  const ::msg::StandardSAR& _internal_standardsar() const;
  ::msg::StandardSAR* _internal_mutable_standardsar();
  public:
  void unsafe_arena_set_allocated_standardsar(
      ::msg::StandardSAR* standardsar);
  ::msg::StandardSAR* unsafe_arena_release_standardsar();

  // optional .msg.PositionB positionb = 6;
  bool has_positionb() const;
  private:
  bool _internal_has_positionb() const;
  public:
  void clear_positionb();
  const ::msg::PositionB& positionb() const;
  ::msg::PositionB* release_positionb();
  ::msg::PositionB* mutable_positionb();
  void set_allocated_positionb(::msg::PositionB* positionb);
  private:
  const ::msg::PositionB& _internal_positionb() const;
  ::msg::PositionB* _internal_mutable_positionb();
  public:
  void unsafe_arena_set_allocated_positionb(
      ::msg::PositionB* positionb);
  ::msg::PositionB* unsafe_arena_release_positionb();

  // optional .msg.AidsToNavigation aidstonavigation = 7;
  bool has_aidstonavigation() const;
  private:
  bool _internal_has_aidstonavigation() const;
  public:
  void clear_aidstonavigation();
  const ::msg::AidsToNavigation& aidstonavigation() const;
  ::msg::AidsToNavigation* release_aidstonavigation();
  ::msg::AidsToNavigation* mutable_aidstonavigation();
  void set_allocated_aidstonavigation(::msg::AidsToNavigation* aidstonavigation);
  private:
  const ::msg::AidsToNavigation& _internal_aidstonavigation() const;
  ::msg::AidsToNavigation* _internal_mutable_aidstonavigation();
  public:
  void unsafe_arena_set_allocated_aidstonavigation(
      ::msg::AidsToNavigation* aidstonavigation);
  ::msg::AidsToNavigation* unsafe_arena_release_aidstonavigation();

  // required .msg.NotificationMessage.CommandType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::msg::NotificationMessage_CommandType type() const;
  void set_type(::msg::NotificationMessage_CommandType value);
  private:
  ::msg::NotificationMessage_CommandType _internal_type() const;
  void _internal_set_type(::msg::NotificationMessage_CommandType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.NotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msg::ClockSyc* clocksyc_;
  ::msg::PositionA* positiona_;
  ::msg::ShipStatic* shipstatic_;
  ::msg::StandardSAR* standardsar_;
  ::msg::PositionB* positionb_;
  ::msg::AidsToNavigation* aidstonavigation_;
  int type_;
  friend struct ::TableStruct_notify_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionA

// required int32 repeatindicator = 1;
inline bool PositionA::_internal_has_repeatindicator() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PositionA::has_repeatindicator() const {
  return _internal_has_repeatindicator();
}
inline void PositionA::clear_repeatindicator() {
  repeatindicator_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::_internal_repeatindicator() const {
  return repeatindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::repeatindicator() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.repeatindicator)
  return _internal_repeatindicator();
}
inline void PositionA::_internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  repeatindicator_ = value;
}
inline void PositionA::set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repeatindicator(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.repeatindicator)
}

// required bytes mmsi = 2;
inline bool PositionA::_internal_has_mmsi() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PositionA::has_mmsi() const {
  return _internal_has_mmsi();
}
inline void PositionA::clear_mmsi() {
  mmsi_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PositionA::mmsi() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.mmsi)
  return _internal_mmsi();
}
inline void PositionA::set_mmsi(const std::string& value) {
  _internal_set_mmsi(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.mmsi)
}
inline std::string* PositionA::mutable_mmsi() {
  // @@protoc_insertion_point(field_mutable:msg.PositionA.mmsi)
  return _internal_mutable_mmsi();
}
inline const std::string& PositionA::_internal_mmsi() const {
  return mmsi_.Get();
}
inline void PositionA::_internal_set_mmsi(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionA::set_mmsi(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.PositionA.mmsi)
}
inline void PositionA::set_mmsi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.PositionA.mmsi)
}
inline void PositionA::set_mmsi(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.PositionA.mmsi)
}
inline std::string* PositionA::_internal_mutable_mmsi() {
  _has_bits_[0] |= 0x00000001u;
  return mmsi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionA::release_mmsi() {
  // @@protoc_insertion_point(field_release:msg.PositionA.mmsi)
  if (!_internal_has_mmsi()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mmsi_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionA::set_allocated_mmsi(std::string* mmsi) {
  if (mmsi != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mmsi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mmsi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.PositionA.mmsi)
}

// required int32 navigationalstatus = 3;
inline bool PositionA::_internal_has_navigationalstatus() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PositionA::has_navigationalstatus() const {
  return _internal_has_navigationalstatus();
}
inline void PositionA::clear_navigationalstatus() {
  navigationalstatus_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::_internal_navigationalstatus() const {
  return navigationalstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::navigationalstatus() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.navigationalstatus)
  return _internal_navigationalstatus();
}
inline void PositionA::_internal_set_navigationalstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  navigationalstatus_ = value;
}
inline void PositionA::set_navigationalstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_navigationalstatus(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.navigationalstatus)
}

// required float rot = 4;
inline bool PositionA::_internal_has_rot() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PositionA::has_rot() const {
  return _internal_has_rot();
}
inline void PositionA::clear_rot() {
  rot_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PositionA::_internal_rot() const {
  return rot_;
}
inline float PositionA::rot() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.rot)
  return _internal_rot();
}
inline void PositionA::_internal_set_rot(float value) {
  _has_bits_[0] |= 0x00000020u;
  rot_ = value;
}
inline void PositionA::set_rot(float value) {
  _internal_set_rot(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.rot)
}

// required float sog = 5;
inline bool PositionA::_internal_has_sog() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PositionA::has_sog() const {
  return _internal_has_sog();
}
inline void PositionA::clear_sog() {
  sog_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PositionA::_internal_sog() const {
  return sog_;
}
inline float PositionA::sog() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.sog)
  return _internal_sog();
}
inline void PositionA::_internal_set_sog(float value) {
  _has_bits_[0] |= 0x00000040u;
  sog_ = value;
}
inline void PositionA::set_sog(float value) {
  _internal_set_sog(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.sog)
}

// required int32 positionaccuracy = 6;
inline bool PositionA::_internal_has_positionaccuracy() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PositionA::has_positionaccuracy() const {
  return _internal_has_positionaccuracy();
}
inline void PositionA::clear_positionaccuracy() {
  positionaccuracy_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::_internal_positionaccuracy() const {
  return positionaccuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::positionaccuracy() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.positionaccuracy)
  return _internal_positionaccuracy();
}
inline void PositionA::_internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  positionaccuracy_ = value;
}
inline void PositionA::set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionaccuracy(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.positionaccuracy)
}

// required bytes longitude = 7;
inline bool PositionA::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PositionA::has_longitude() const {
  return _internal_has_longitude();
}
inline void PositionA::clear_longitude() {
  longitude_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PositionA::longitude() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.longitude)
  return _internal_longitude();
}
inline void PositionA::set_longitude(const std::string& value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.longitude)
}
inline std::string* PositionA::mutable_longitude() {
  // @@protoc_insertion_point(field_mutable:msg.PositionA.longitude)
  return _internal_mutable_longitude();
}
inline const std::string& PositionA::_internal_longitude() const {
  return longitude_.Get();
}
inline void PositionA::_internal_set_longitude(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionA::set_longitude(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.PositionA.longitude)
}
inline void PositionA::set_longitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.PositionA.longitude)
}
inline void PositionA::set_longitude(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.PositionA.longitude)
}
inline std::string* PositionA::_internal_mutable_longitude() {
  _has_bits_[0] |= 0x00000002u;
  return longitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionA::release_longitude() {
  // @@protoc_insertion_point(field_release:msg.PositionA.longitude)
  if (!_internal_has_longitude()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return longitude_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionA::set_allocated_longitude(std::string* longitude) {
  if (longitude != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  longitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.PositionA.longitude)
}

// required bytes latitude = 8;
inline bool PositionA::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PositionA::has_latitude() const {
  return _internal_has_latitude();
}
inline void PositionA::clear_latitude() {
  latitude_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PositionA::latitude() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.latitude)
  return _internal_latitude();
}
inline void PositionA::set_latitude(const std::string& value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.latitude)
}
inline std::string* PositionA::mutable_latitude() {
  // @@protoc_insertion_point(field_mutable:msg.PositionA.latitude)
  return _internal_mutable_latitude();
}
inline const std::string& PositionA::_internal_latitude() const {
  return latitude_.Get();
}
inline void PositionA::_internal_set_latitude(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionA::set_latitude(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.PositionA.latitude)
}
inline void PositionA::set_latitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.PositionA.latitude)
}
inline void PositionA::set_latitude(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.PositionA.latitude)
}
inline std::string* PositionA::_internal_mutable_latitude() {
  _has_bits_[0] |= 0x00000004u;
  return latitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionA::release_latitude() {
  // @@protoc_insertion_point(field_release:msg.PositionA.latitude)
  if (!_internal_has_latitude()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return latitude_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionA::set_allocated_latitude(std::string* latitude) {
  if (latitude != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  latitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.PositionA.latitude)
}

// required float cog = 9;
inline bool PositionA::_internal_has_cog() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PositionA::has_cog() const {
  return _internal_has_cog();
}
inline void PositionA::clear_cog() {
  cog_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float PositionA::_internal_cog() const {
  return cog_;
}
inline float PositionA::cog() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.cog)
  return _internal_cog();
}
inline void PositionA::_internal_set_cog(float value) {
  _has_bits_[0] |= 0x00000100u;
  cog_ = value;
}
inline void PositionA::set_cog(float value) {
  _internal_set_cog(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.cog)
}

// required int32 trueheading = 10;
inline bool PositionA::_internal_has_trueheading() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PositionA::has_trueheading() const {
  return _internal_has_trueheading();
}
inline void PositionA::clear_trueheading() {
  trueheading_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::_internal_trueheading() const {
  return trueheading_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::trueheading() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.trueheading)
  return _internal_trueheading();
}
inline void PositionA::_internal_set_trueheading(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  trueheading_ = value;
}
inline void PositionA::set_trueheading(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trueheading(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.trueheading)
}

// required int32 timestamp = 11;
inline bool PositionA::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PositionA::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void PositionA::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.timestamp)
  return _internal_timestamp();
}
inline void PositionA::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  timestamp_ = value;
}
inline void PositionA::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.timestamp)
}

// required int32 specialindicator = 12;
inline bool PositionA::_internal_has_specialindicator() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PositionA::has_specialindicator() const {
  return _internal_has_specialindicator();
}
inline void PositionA::clear_specialindicator() {
  specialindicator_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::_internal_specialindicator() const {
  return specialindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::specialindicator() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.specialindicator)
  return _internal_specialindicator();
}
inline void PositionA::_internal_set_specialindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  specialindicator_ = value;
}
inline void PositionA::set_specialindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_specialindicator(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.specialindicator)
}

// required int32 spare = 13;
inline bool PositionA::_internal_has_spare() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PositionA::has_spare() const {
  return _internal_has_spare();
}
inline void PositionA::clear_spare() {
  spare_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::_internal_spare() const {
  return spare_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionA::spare() const {
  // @@protoc_insertion_point(field_get:msg.PositionA.spare)
  return _internal_spare();
}
inline void PositionA::_internal_set_spare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  spare_ = value;
}
inline void PositionA::set_spare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spare(value);
  // @@protoc_insertion_point(field_set:msg.PositionA.spare)
}

// -------------------------------------------------------------------

// ShipStatic

// required int32 repeatindicator = 1;
inline bool ShipStatic::_internal_has_repeatindicator() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShipStatic::has_repeatindicator() const {
  return _internal_has_repeatindicator();
}
inline void ShipStatic::clear_repeatindicator() {
  repeatindicator_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_repeatindicator() const {
  return repeatindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::repeatindicator() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.repeatindicator)
  return _internal_repeatindicator();
}
inline void ShipStatic::_internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatindicator_ = value;
}
inline void ShipStatic::set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repeatindicator(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.repeatindicator)
}

// required bytes mmsi = 2;
inline bool ShipStatic::_internal_has_mmsi() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShipStatic::has_mmsi() const {
  return _internal_has_mmsi();
}
inline void ShipStatic::clear_mmsi() {
  mmsi_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShipStatic::mmsi() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.mmsi)
  return _internal_mmsi();
}
inline void ShipStatic::set_mmsi(const std::string& value) {
  _internal_set_mmsi(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.mmsi)
}
inline std::string* ShipStatic::mutable_mmsi() {
  // @@protoc_insertion_point(field_mutable:msg.ShipStatic.mmsi)
  return _internal_mutable_mmsi();
}
inline const std::string& ShipStatic::_internal_mmsi() const {
  return mmsi_.Get();
}
inline void ShipStatic::_internal_set_mmsi(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShipStatic::set_mmsi(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ShipStatic.mmsi)
}
inline void ShipStatic::set_mmsi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ShipStatic.mmsi)
}
inline void ShipStatic::set_mmsi(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ShipStatic.mmsi)
}
inline std::string* ShipStatic::_internal_mutable_mmsi() {
  _has_bits_[0] |= 0x00000001u;
  return mmsi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShipStatic::release_mmsi() {
  // @@protoc_insertion_point(field_release:msg.ShipStatic.mmsi)
  if (!_internal_has_mmsi()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mmsi_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShipStatic::set_allocated_mmsi(std::string* mmsi) {
  if (mmsi != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mmsi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mmsi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ShipStatic.mmsi)
}

// required int32 aisversion = 3;
inline bool ShipStatic::_internal_has_aisversion() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ShipStatic::has_aisversion() const {
  return _internal_has_aisversion();
}
inline void ShipStatic::clear_aisversion() {
  aisversion_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_aisversion() const {
  return aisversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::aisversion() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.aisversion)
  return _internal_aisversion();
}
inline void ShipStatic::_internal_set_aisversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  aisversion_ = value;
}
inline void ShipStatic::set_aisversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aisversion(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.aisversion)
}

// required int32 imo = 4;
inline bool ShipStatic::_internal_has_imo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ShipStatic::has_imo() const {
  return _internal_has_imo();
}
inline void ShipStatic::clear_imo() {
  imo_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_imo() const {
  return imo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::imo() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.imo)
  return _internal_imo();
}
inline void ShipStatic::_internal_set_imo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  imo_ = value;
}
inline void ShipStatic::set_imo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_imo(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.imo)
}

// required bytes callsign = 5;
inline bool ShipStatic::_internal_has_callsign() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShipStatic::has_callsign() const {
  return _internal_has_callsign();
}
inline void ShipStatic::clear_callsign() {
  callsign_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShipStatic::callsign() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.callsign)
  return _internal_callsign();
}
inline void ShipStatic::set_callsign(const std::string& value) {
  _internal_set_callsign(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.callsign)
}
inline std::string* ShipStatic::mutable_callsign() {
  // @@protoc_insertion_point(field_mutable:msg.ShipStatic.callsign)
  return _internal_mutable_callsign();
}
inline const std::string& ShipStatic::_internal_callsign() const {
  return callsign_.Get();
}
inline void ShipStatic::_internal_set_callsign(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShipStatic::set_callsign(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  callsign_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ShipStatic.callsign)
}
inline void ShipStatic::set_callsign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ShipStatic.callsign)
}
inline void ShipStatic::set_callsign(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ShipStatic.callsign)
}
inline std::string* ShipStatic::_internal_mutable_callsign() {
  _has_bits_[0] |= 0x00000002u;
  return callsign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShipStatic::release_callsign() {
  // @@protoc_insertion_point(field_release:msg.ShipStatic.callsign)
  if (!_internal_has_callsign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return callsign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShipStatic::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  callsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callsign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ShipStatic.callsign)
}

// required bytes name = 6;
inline bool ShipStatic::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShipStatic::has_name() const {
  return _internal_has_name();
}
inline void ShipStatic::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ShipStatic::name() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.name)
  return _internal_name();
}
inline void ShipStatic::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.name)
}
inline std::string* ShipStatic::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.ShipStatic.name)
  return _internal_mutable_name();
}
inline const std::string& ShipStatic::_internal_name() const {
  return name_.Get();
}
inline void ShipStatic::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShipStatic::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ShipStatic.name)
}
inline void ShipStatic::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ShipStatic.name)
}
inline void ShipStatic::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ShipStatic.name)
}
inline std::string* ShipStatic::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShipStatic::release_name() {
  // @@protoc_insertion_point(field_release:msg.ShipStatic.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShipStatic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ShipStatic.name)
}

// required int32 typeofshipcargo = 7;
inline bool ShipStatic::_internal_has_typeofshipcargo() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ShipStatic::has_typeofshipcargo() const {
  return _internal_has_typeofshipcargo();
}
inline void ShipStatic::clear_typeofshipcargo() {
  typeofshipcargo_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_typeofshipcargo() const {
  return typeofshipcargo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::typeofshipcargo() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.typeofshipcargo)
  return _internal_typeofshipcargo();
}
inline void ShipStatic::_internal_set_typeofshipcargo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  typeofshipcargo_ = value;
}
inline void ShipStatic::set_typeofshipcargo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_typeofshipcargo(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.typeofshipcargo)
}

// required bytes dimensions = 8;
inline bool ShipStatic::_internal_has_dimensions() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShipStatic::has_dimensions() const {
  return _internal_has_dimensions();
}
inline void ShipStatic::clear_dimensions() {
  dimensions_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ShipStatic::dimensions() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.dimensions)
  return _internal_dimensions();
}
inline void ShipStatic::set_dimensions(const std::string& value) {
  _internal_set_dimensions(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.dimensions)
}
inline std::string* ShipStatic::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable:msg.ShipStatic.dimensions)
  return _internal_mutable_dimensions();
}
inline const std::string& ShipStatic::_internal_dimensions() const {
  return dimensions_.Get();
}
inline void ShipStatic::_internal_set_dimensions(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dimensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShipStatic::set_dimensions(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dimensions_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ShipStatic.dimensions)
}
inline void ShipStatic::set_dimensions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dimensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ShipStatic.dimensions)
}
inline void ShipStatic::set_dimensions(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dimensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ShipStatic.dimensions)
}
inline std::string* ShipStatic::_internal_mutable_dimensions() {
  _has_bits_[0] |= 0x00000008u;
  return dimensions_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShipStatic::release_dimensions() {
  // @@protoc_insertion_point(field_release:msg.ShipStatic.dimensions)
  if (!_internal_has_dimensions()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dimensions_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShipStatic::set_allocated_dimensions(std::string* dimensions) {
  if (dimensions != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dimensions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dimensions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ShipStatic.dimensions)
}

// required int32 epfd = 9;
inline bool ShipStatic::_internal_has_epfd() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ShipStatic::has_epfd() const {
  return _internal_has_epfd();
}
inline void ShipStatic::clear_epfd() {
  epfd_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_epfd() const {
  return epfd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::epfd() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.epfd)
  return _internal_epfd();
}
inline void ShipStatic::_internal_set_epfd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  epfd_ = value;
}
inline void ShipStatic::set_epfd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epfd(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.epfd)
}

// required int32 month = 10;
inline bool ShipStatic::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ShipStatic::has_month() const {
  return _internal_has_month();
}
inline void ShipStatic::clear_month() {
  month_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::month() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.month)
  return _internal_month();
}
inline void ShipStatic::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  month_ = value;
}
inline void ShipStatic::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.month)
}

// required int32 day = 11;
inline bool ShipStatic::_internal_has_day() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ShipStatic::has_day() const {
  return _internal_has_day();
}
inline void ShipStatic::clear_day() {
  day_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::day() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.day)
  return _internal_day();
}
inline void ShipStatic::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  day_ = value;
}
inline void ShipStatic::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.day)
}

// required int32 hour = 12;
inline bool ShipStatic::_internal_has_hour() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ShipStatic::has_hour() const {
  return _internal_has_hour();
}
inline void ShipStatic::clear_hour() {
  hour_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_hour() const {
  return hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::hour() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.hour)
  return _internal_hour();
}
inline void ShipStatic::_internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  hour_ = value;
}
inline void ShipStatic::set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.hour)
}

// required int32 minute = 13;
inline bool ShipStatic::_internal_has_minute() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ShipStatic::has_minute() const {
  return _internal_has_minute();
}
inline void ShipStatic::clear_minute() {
  minute_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_minute() const {
  return minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::minute() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.minute)
  return _internal_minute();
}
inline void ShipStatic::_internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  minute_ = value;
}
inline void ShipStatic::set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.minute)
}

// required float draught = 14;
inline bool ShipStatic::_internal_has_draught() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ShipStatic::has_draught() const {
  return _internal_has_draught();
}
inline void ShipStatic::clear_draught() {
  draught_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float ShipStatic::_internal_draught() const {
  return draught_;
}
inline float ShipStatic::draught() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.draught)
  return _internal_draught();
}
inline void ShipStatic::_internal_set_draught(float value) {
  _has_bits_[0] |= 0x00004000u;
  draught_ = value;
}
inline void ShipStatic::set_draught(float value) {
  _internal_set_draught(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.draught)
}

// required bytes destination = 15;
inline bool ShipStatic::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShipStatic::has_destination() const {
  return _internal_has_destination();
}
inline void ShipStatic::clear_destination() {
  destination_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ShipStatic::destination() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.destination)
  return _internal_destination();
}
inline void ShipStatic::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.destination)
}
inline std::string* ShipStatic::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:msg.ShipStatic.destination)
  return _internal_mutable_destination();
}
inline const std::string& ShipStatic::_internal_destination() const {
  return destination_.Get();
}
inline void ShipStatic::_internal_set_destination(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShipStatic::set_destination(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  destination_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ShipStatic.destination)
}
inline void ShipStatic::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ShipStatic.destination)
}
inline void ShipStatic::set_destination(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ShipStatic.destination)
}
inline std::string* ShipStatic::_internal_mutable_destination() {
  _has_bits_[0] |= 0x00000010u;
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShipStatic::release_destination() {
  // @@protoc_insertion_point(field_release:msg.ShipStatic.destination)
  if (!_internal_has_destination()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return destination_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShipStatic::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ShipStatic.destination)
}

// required int32 dte = 16;
inline bool ShipStatic::_internal_has_dte() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ShipStatic::has_dte() const {
  return _internal_has_dte();
}
inline void ShipStatic::clear_dte() {
  dte_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_dte() const {
  return dte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::dte() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.dte)
  return _internal_dte();
}
inline void ShipStatic::_internal_set_dte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  dte_ = value;
}
inline void ShipStatic::set_dte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dte(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.dte)
}

// required int32 spare = 17;
inline bool ShipStatic::_internal_has_spare() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ShipStatic::has_spare() const {
  return _internal_has_spare();
}
inline void ShipStatic::clear_spare() {
  spare_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::_internal_spare() const {
  return spare_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipStatic::spare() const {
  // @@protoc_insertion_point(field_get:msg.ShipStatic.spare)
  return _internal_spare();
}
inline void ShipStatic::_internal_set_spare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  spare_ = value;
}
inline void ShipStatic::set_spare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spare(value);
  // @@protoc_insertion_point(field_set:msg.ShipStatic.spare)
}

// -------------------------------------------------------------------

// StandardSAR

// required int32 repeatindicator = 1;
inline bool StandardSAR::_internal_has_repeatindicator() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StandardSAR::has_repeatindicator() const {
  return _internal_has_repeatindicator();
}
inline void StandardSAR::clear_repeatindicator() {
  repeatindicator_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_repeatindicator() const {
  return repeatindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::repeatindicator() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.repeatindicator)
  return _internal_repeatindicator();
}
inline void StandardSAR::_internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  repeatindicator_ = value;
}
inline void StandardSAR::set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repeatindicator(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.repeatindicator)
}

// required bytes mmsi = 2;
inline bool StandardSAR::_internal_has_mmsi() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StandardSAR::has_mmsi() const {
  return _internal_has_mmsi();
}
inline void StandardSAR::clear_mmsi() {
  mmsi_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StandardSAR::mmsi() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.mmsi)
  return _internal_mmsi();
}
inline void StandardSAR::set_mmsi(const std::string& value) {
  _internal_set_mmsi(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.mmsi)
}
inline std::string* StandardSAR::mutable_mmsi() {
  // @@protoc_insertion_point(field_mutable:msg.StandardSAR.mmsi)
  return _internal_mutable_mmsi();
}
inline const std::string& StandardSAR::_internal_mmsi() const {
  return mmsi_.Get();
}
inline void StandardSAR::_internal_set_mmsi(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StandardSAR::set_mmsi(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.StandardSAR.mmsi)
}
inline void StandardSAR::set_mmsi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.StandardSAR.mmsi)
}
inline void StandardSAR::set_mmsi(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.StandardSAR.mmsi)
}
inline std::string* StandardSAR::_internal_mutable_mmsi() {
  _has_bits_[0] |= 0x00000001u;
  return mmsi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StandardSAR::release_mmsi() {
  // @@protoc_insertion_point(field_release:msg.StandardSAR.mmsi)
  if (!_internal_has_mmsi()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mmsi_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StandardSAR::set_allocated_mmsi(std::string* mmsi) {
  if (mmsi != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mmsi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mmsi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.StandardSAR.mmsi)
}

// required int32 altitude = 3;
inline bool StandardSAR::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StandardSAR::has_altitude() const {
  return _internal_has_altitude();
}
inline void StandardSAR::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_altitude() const {
  return altitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::altitude() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.altitude)
  return _internal_altitude();
}
inline void StandardSAR::_internal_set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  altitude_ = value;
}
inline void StandardSAR::set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.altitude)
}

// required float sog = 4;
inline bool StandardSAR::_internal_has_sog() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StandardSAR::has_sog() const {
  return _internal_has_sog();
}
inline void StandardSAR::clear_sog() {
  sog_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float StandardSAR::_internal_sog() const {
  return sog_;
}
inline float StandardSAR::sog() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.sog)
  return _internal_sog();
}
inline void StandardSAR::_internal_set_sog(float value) {
  _has_bits_[0] |= 0x00000020u;
  sog_ = value;
}
inline void StandardSAR::set_sog(float value) {
  _internal_set_sog(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.sog)
}

// required int32 positionaccuracy = 5;
inline bool StandardSAR::_internal_has_positionaccuracy() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StandardSAR::has_positionaccuracy() const {
  return _internal_has_positionaccuracy();
}
inline void StandardSAR::clear_positionaccuracy() {
  positionaccuracy_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_positionaccuracy() const {
  return positionaccuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::positionaccuracy() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.positionaccuracy)
  return _internal_positionaccuracy();
}
inline void StandardSAR::_internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  positionaccuracy_ = value;
}
inline void StandardSAR::set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionaccuracy(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.positionaccuracy)
}

// required bytes longitude = 6;
inline bool StandardSAR::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StandardSAR::has_longitude() const {
  return _internal_has_longitude();
}
inline void StandardSAR::clear_longitude() {
  longitude_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StandardSAR::longitude() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.longitude)
  return _internal_longitude();
}
inline void StandardSAR::set_longitude(const std::string& value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.longitude)
}
inline std::string* StandardSAR::mutable_longitude() {
  // @@protoc_insertion_point(field_mutable:msg.StandardSAR.longitude)
  return _internal_mutable_longitude();
}
inline const std::string& StandardSAR::_internal_longitude() const {
  return longitude_.Get();
}
inline void StandardSAR::_internal_set_longitude(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StandardSAR::set_longitude(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.StandardSAR.longitude)
}
inline void StandardSAR::set_longitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.StandardSAR.longitude)
}
inline void StandardSAR::set_longitude(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.StandardSAR.longitude)
}
inline std::string* StandardSAR::_internal_mutable_longitude() {
  _has_bits_[0] |= 0x00000002u;
  return longitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StandardSAR::release_longitude() {
  // @@protoc_insertion_point(field_release:msg.StandardSAR.longitude)
  if (!_internal_has_longitude()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return longitude_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StandardSAR::set_allocated_longitude(std::string* longitude) {
  if (longitude != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  longitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.StandardSAR.longitude)
}

// required bytes latitude = 7;
inline bool StandardSAR::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StandardSAR::has_latitude() const {
  return _internal_has_latitude();
}
inline void StandardSAR::clear_latitude() {
  latitude_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StandardSAR::latitude() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.latitude)
  return _internal_latitude();
}
inline void StandardSAR::set_latitude(const std::string& value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.latitude)
}
inline std::string* StandardSAR::mutable_latitude() {
  // @@protoc_insertion_point(field_mutable:msg.StandardSAR.latitude)
  return _internal_mutable_latitude();
}
inline const std::string& StandardSAR::_internal_latitude() const {
  return latitude_.Get();
}
inline void StandardSAR::_internal_set_latitude(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StandardSAR::set_latitude(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.StandardSAR.latitude)
}
inline void StandardSAR::set_latitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.StandardSAR.latitude)
}
inline void StandardSAR::set_latitude(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.StandardSAR.latitude)
}
inline std::string* StandardSAR::_internal_mutable_latitude() {
  _has_bits_[0] |= 0x00000004u;
  return latitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StandardSAR::release_latitude() {
  // @@protoc_insertion_point(field_release:msg.StandardSAR.latitude)
  if (!_internal_has_latitude()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return latitude_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StandardSAR::set_allocated_latitude(std::string* latitude) {
  if (latitude != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  latitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.StandardSAR.latitude)
}

// required float cog = 8;
inline bool StandardSAR::_internal_has_cog() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StandardSAR::has_cog() const {
  return _internal_has_cog();
}
inline void StandardSAR::clear_cog() {
  cog_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float StandardSAR::_internal_cog() const {
  return cog_;
}
inline float StandardSAR::cog() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.cog)
  return _internal_cog();
}
inline void StandardSAR::_internal_set_cog(float value) {
  _has_bits_[0] |= 0x00000080u;
  cog_ = value;
}
inline void StandardSAR::set_cog(float value) {
  _internal_set_cog(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.cog)
}

// required int32 timestamp = 9;
inline bool StandardSAR::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StandardSAR::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void StandardSAR::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.timestamp)
  return _internal_timestamp();
}
inline void StandardSAR::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  timestamp_ = value;
}
inline void StandardSAR::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.timestamp)
}

// required int32 altitudesensor = 10;
inline bool StandardSAR::_internal_has_altitudesensor() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool StandardSAR::has_altitudesensor() const {
  return _internal_has_altitudesensor();
}
inline void StandardSAR::clear_altitudesensor() {
  altitudesensor_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_altitudesensor() const {
  return altitudesensor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::altitudesensor() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.altitudesensor)
  return _internal_altitudesensor();
}
inline void StandardSAR::_internal_set_altitudesensor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  altitudesensor_ = value;
}
inline void StandardSAR::set_altitudesensor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_altitudesensor(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.altitudesensor)
}

// required int32 spare = 11;
inline bool StandardSAR::_internal_has_spare() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool StandardSAR::has_spare() const {
  return _internal_has_spare();
}
inline void StandardSAR::clear_spare() {
  spare_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_spare() const {
  return spare_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::spare() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.spare)
  return _internal_spare();
}
inline void StandardSAR::_internal_set_spare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  spare_ = value;
}
inline void StandardSAR::set_spare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spare(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.spare)
}

// required int32 assignmodeflag = 12;
inline bool StandardSAR::_internal_has_assignmodeflag() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool StandardSAR::has_assignmodeflag() const {
  return _internal_has_assignmodeflag();
}
inline void StandardSAR::clear_assignmodeflag() {
  assignmodeflag_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_assignmodeflag() const {
  return assignmodeflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::assignmodeflag() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.assignmodeflag)
  return _internal_assignmodeflag();
}
inline void StandardSAR::_internal_set_assignmodeflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  assignmodeflag_ = value;
}
inline void StandardSAR::set_assignmodeflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_assignmodeflag(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.assignmodeflag)
}

// required int32 raimflag = 13;
inline bool StandardSAR::_internal_has_raimflag() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool StandardSAR::has_raimflag() const {
  return _internal_has_raimflag();
}
inline void StandardSAR::clear_raimflag() {
  raimflag_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_raimflag() const {
  return raimflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::raimflag() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.raimflag)
  return _internal_raimflag();
}
inline void StandardSAR::_internal_set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  raimflag_ = value;
}
inline void StandardSAR::set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_raimflag(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.raimflag)
}

// required int32 commstateselectorflag = 14;
inline bool StandardSAR::_internal_has_commstateselectorflag() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool StandardSAR::has_commstateselectorflag() const {
  return _internal_has_commstateselectorflag();
}
inline void StandardSAR::clear_commstateselectorflag() {
  commstateselectorflag_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_commstateselectorflag() const {
  return commstateselectorflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::commstateselectorflag() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.commstateselectorflag)
  return _internal_commstateselectorflag();
}
inline void StandardSAR::_internal_set_commstateselectorflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  commstateselectorflag_ = value;
}
inline void StandardSAR::set_commstateselectorflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_commstateselectorflag(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.commstateselectorflag)
}

// required int32 communicationstate = 15;
inline bool StandardSAR::_internal_has_communicationstate() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool StandardSAR::has_communicationstate() const {
  return _internal_has_communicationstate();
}
inline void StandardSAR::clear_communicationstate() {
  communicationstate_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::_internal_communicationstate() const {
  return communicationstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StandardSAR::communicationstate() const {
  // @@protoc_insertion_point(field_get:msg.StandardSAR.communicationstate)
  return _internal_communicationstate();
}
inline void StandardSAR::_internal_set_communicationstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  communicationstate_ = value;
}
inline void StandardSAR::set_communicationstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_communicationstate(value);
  // @@protoc_insertion_point(field_set:msg.StandardSAR.communicationstate)
}

// -------------------------------------------------------------------

// PositionB

// required int32 repeatindicator = 1;
inline bool PositionB::_internal_has_repeatindicator() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PositionB::has_repeatindicator() const {
  return _internal_has_repeatindicator();
}
inline void PositionB::clear_repeatindicator() {
  repeatindicator_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_repeatindicator() const {
  return repeatindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::repeatindicator() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.repeatindicator)
  return _internal_repeatindicator();
}
inline void PositionB::_internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  repeatindicator_ = value;
}
inline void PositionB::set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repeatindicator(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.repeatindicator)
}

// required bytes mmsi = 2;
inline bool PositionB::_internal_has_mmsi() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PositionB::has_mmsi() const {
  return _internal_has_mmsi();
}
inline void PositionB::clear_mmsi() {
  mmsi_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PositionB::mmsi() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.mmsi)
  return _internal_mmsi();
}
inline void PositionB::set_mmsi(const std::string& value) {
  _internal_set_mmsi(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.mmsi)
}
inline std::string* PositionB::mutable_mmsi() {
  // @@protoc_insertion_point(field_mutable:msg.PositionB.mmsi)
  return _internal_mutable_mmsi();
}
inline const std::string& PositionB::_internal_mmsi() const {
  return mmsi_.Get();
}
inline void PositionB::_internal_set_mmsi(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionB::set_mmsi(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.PositionB.mmsi)
}
inline void PositionB::set_mmsi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.PositionB.mmsi)
}
inline void PositionB::set_mmsi(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.PositionB.mmsi)
}
inline std::string* PositionB::_internal_mutable_mmsi() {
  _has_bits_[0] |= 0x00000001u;
  return mmsi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionB::release_mmsi() {
  // @@protoc_insertion_point(field_release:msg.PositionB.mmsi)
  if (!_internal_has_mmsi()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mmsi_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionB::set_allocated_mmsi(std::string* mmsi) {
  if (mmsi != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mmsi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mmsi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.PositionB.mmsi)
}

// required int32 spare1 = 3;
inline bool PositionB::_internal_has_spare1() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PositionB::has_spare1() const {
  return _internal_has_spare1();
}
inline void PositionB::clear_spare1() {
  spare1_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_spare1() const {
  return spare1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::spare1() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.spare1)
  return _internal_spare1();
}
inline void PositionB::_internal_set_spare1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  spare1_ = value;
}
inline void PositionB::set_spare1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spare1(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.spare1)
}

// required float sog = 4;
inline bool PositionB::_internal_has_sog() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PositionB::has_sog() const {
  return _internal_has_sog();
}
inline void PositionB::clear_sog() {
  sog_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PositionB::_internal_sog() const {
  return sog_;
}
inline float PositionB::sog() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.sog)
  return _internal_sog();
}
inline void PositionB::_internal_set_sog(float value) {
  _has_bits_[0] |= 0x00000020u;
  sog_ = value;
}
inline void PositionB::set_sog(float value) {
  _internal_set_sog(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.sog)
}

// required int32 positionaccuracy = 5;
inline bool PositionB::_internal_has_positionaccuracy() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PositionB::has_positionaccuracy() const {
  return _internal_has_positionaccuracy();
}
inline void PositionB::clear_positionaccuracy() {
  positionaccuracy_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_positionaccuracy() const {
  return positionaccuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::positionaccuracy() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.positionaccuracy)
  return _internal_positionaccuracy();
}
inline void PositionB::_internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  positionaccuracy_ = value;
}
inline void PositionB::set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionaccuracy(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.positionaccuracy)
}

// required bytes longitude = 6;
inline bool PositionB::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PositionB::has_longitude() const {
  return _internal_has_longitude();
}
inline void PositionB::clear_longitude() {
  longitude_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PositionB::longitude() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.longitude)
  return _internal_longitude();
}
inline void PositionB::set_longitude(const std::string& value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.longitude)
}
inline std::string* PositionB::mutable_longitude() {
  // @@protoc_insertion_point(field_mutable:msg.PositionB.longitude)
  return _internal_mutable_longitude();
}
inline const std::string& PositionB::_internal_longitude() const {
  return longitude_.Get();
}
inline void PositionB::_internal_set_longitude(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionB::set_longitude(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.PositionB.longitude)
}
inline void PositionB::set_longitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.PositionB.longitude)
}
inline void PositionB::set_longitude(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.PositionB.longitude)
}
inline std::string* PositionB::_internal_mutable_longitude() {
  _has_bits_[0] |= 0x00000002u;
  return longitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionB::release_longitude() {
  // @@protoc_insertion_point(field_release:msg.PositionB.longitude)
  if (!_internal_has_longitude()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return longitude_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionB::set_allocated_longitude(std::string* longitude) {
  if (longitude != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  longitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.PositionB.longitude)
}

// required bytes latitude = 7;
inline bool PositionB::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PositionB::has_latitude() const {
  return _internal_has_latitude();
}
inline void PositionB::clear_latitude() {
  latitude_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PositionB::latitude() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.latitude)
  return _internal_latitude();
}
inline void PositionB::set_latitude(const std::string& value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.latitude)
}
inline std::string* PositionB::mutable_latitude() {
  // @@protoc_insertion_point(field_mutable:msg.PositionB.latitude)
  return _internal_mutable_latitude();
}
inline const std::string& PositionB::_internal_latitude() const {
  return latitude_.Get();
}
inline void PositionB::_internal_set_latitude(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionB::set_latitude(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.PositionB.latitude)
}
inline void PositionB::set_latitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.PositionB.latitude)
}
inline void PositionB::set_latitude(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.PositionB.latitude)
}
inline std::string* PositionB::_internal_mutable_latitude() {
  _has_bits_[0] |= 0x00000004u;
  return latitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionB::release_latitude() {
  // @@protoc_insertion_point(field_release:msg.PositionB.latitude)
  if (!_internal_has_latitude()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return latitude_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionB::set_allocated_latitude(std::string* latitude) {
  if (latitude != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  latitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.PositionB.latitude)
}

// required float cog = 8;
inline bool PositionB::_internal_has_cog() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PositionB::has_cog() const {
  return _internal_has_cog();
}
inline void PositionB::clear_cog() {
  cog_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float PositionB::_internal_cog() const {
  return cog_;
}
inline float PositionB::cog() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.cog)
  return _internal_cog();
}
inline void PositionB::_internal_set_cog(float value) {
  _has_bits_[0] |= 0x00000080u;
  cog_ = value;
}
inline void PositionB::set_cog(float value) {
  _internal_set_cog(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.cog)
}

// required int32 trueheading = 9;
inline bool PositionB::_internal_has_trueheading() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PositionB::has_trueheading() const {
  return _internal_has_trueheading();
}
inline void PositionB::clear_trueheading() {
  trueheading_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_trueheading() const {
  return trueheading_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::trueheading() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.trueheading)
  return _internal_trueheading();
}
inline void PositionB::_internal_set_trueheading(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  trueheading_ = value;
}
inline void PositionB::set_trueheading(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trueheading(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.trueheading)
}

// required int32 timestamp = 10;
inline bool PositionB::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PositionB::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void PositionB::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.timestamp)
  return _internal_timestamp();
}
inline void PositionB::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  timestamp_ = value;
}
inline void PositionB::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.timestamp)
}

// required int32 spare2 = 11;
inline bool PositionB::_internal_has_spare2() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PositionB::has_spare2() const {
  return _internal_has_spare2();
}
inline void PositionB::clear_spare2() {
  spare2_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_spare2() const {
  return spare2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::spare2() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.spare2)
  return _internal_spare2();
}
inline void PositionB::_internal_set_spare2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  spare2_ = value;
}
inline void PositionB::set_spare2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spare2(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.spare2)
}

// required int32 bunitflag = 12;
inline bool PositionB::_internal_has_bunitflag() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PositionB::has_bunitflag() const {
  return _internal_has_bunitflag();
}
inline void PositionB::clear_bunitflag() {
  bunitflag_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_bunitflag() const {
  return bunitflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::bunitflag() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.bunitflag)
  return _internal_bunitflag();
}
inline void PositionB::_internal_set_bunitflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  bunitflag_ = value;
}
inline void PositionB::set_bunitflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bunitflag(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.bunitflag)
}

// required int32 bdisplayflag = 13;
inline bool PositionB::_internal_has_bdisplayflag() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PositionB::has_bdisplayflag() const {
  return _internal_has_bdisplayflag();
}
inline void PositionB::clear_bdisplayflag() {
  bdisplayflag_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_bdisplayflag() const {
  return bdisplayflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::bdisplayflag() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.bdisplayflag)
  return _internal_bdisplayflag();
}
inline void PositionB::_internal_set_bdisplayflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  bdisplayflag_ = value;
}
inline void PositionB::set_bdisplayflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bdisplayflag(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.bdisplayflag)
}

// required int32 bdscflag = 14;
inline bool PositionB::_internal_has_bdscflag() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PositionB::has_bdscflag() const {
  return _internal_has_bdscflag();
}
inline void PositionB::clear_bdscflag() {
  bdscflag_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_bdscflag() const {
  return bdscflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::bdscflag() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.bdscflag)
  return _internal_bdscflag();
}
inline void PositionB::_internal_set_bdscflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  bdscflag_ = value;
}
inline void PositionB::set_bdscflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bdscflag(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.bdscflag)
}

// required int32 bbandflag = 15;
inline bool PositionB::_internal_has_bbandflag() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PositionB::has_bbandflag() const {
  return _internal_has_bbandflag();
}
inline void PositionB::clear_bbandflag() {
  bbandflag_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_bbandflag() const {
  return bbandflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::bbandflag() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.bbandflag)
  return _internal_bbandflag();
}
inline void PositionB::_internal_set_bbandflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  bbandflag_ = value;
}
inline void PositionB::set_bbandflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bbandflag(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.bbandflag)
}

// required int32 bmessage22flag = 16;
inline bool PositionB::_internal_has_bmessage22flag() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PositionB::has_bmessage22flag() const {
  return _internal_has_bmessage22flag();
}
inline void PositionB::clear_bmessage22flag() {
  bmessage22flag_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_bmessage22flag() const {
  return bmessage22flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::bmessage22flag() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.bmessage22flag)
  return _internal_bmessage22flag();
}
inline void PositionB::_internal_set_bmessage22flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  bmessage22flag_ = value;
}
inline void PositionB::set_bmessage22flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bmessage22flag(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.bmessage22flag)
}

// required int32 modeflag = 17;
inline bool PositionB::_internal_has_modeflag() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PositionB::has_modeflag() const {
  return _internal_has_modeflag();
}
inline void PositionB::clear_modeflag() {
  modeflag_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_modeflag() const {
  return modeflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::modeflag() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.modeflag)
  return _internal_modeflag();
}
inline void PositionB::_internal_set_modeflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  modeflag_ = value;
}
inline void PositionB::set_modeflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modeflag(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.modeflag)
}

// required int32 raimflag = 18;
inline bool PositionB::_internal_has_raimflag() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PositionB::has_raimflag() const {
  return _internal_has_raimflag();
}
inline void PositionB::clear_raimflag() {
  raimflag_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_raimflag() const {
  return raimflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::raimflag() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.raimflag)
  return _internal_raimflag();
}
inline void PositionB::_internal_set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  raimflag_ = value;
}
inline void PositionB::set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_raimflag(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.raimflag)
}

// required int32 commstateselectorflag = 19;
inline bool PositionB::_internal_has_commstateselectorflag() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PositionB::has_commstateselectorflag() const {
  return _internal_has_commstateselectorflag();
}
inline void PositionB::clear_commstateselectorflag() {
  commstateselectorflag_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_commstateselectorflag() const {
  return commstateselectorflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::commstateselectorflag() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.commstateselectorflag)
  return _internal_commstateselectorflag();
}
inline void PositionB::_internal_set_commstateselectorflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  commstateselectorflag_ = value;
}
inline void PositionB::set_commstateselectorflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_commstateselectorflag(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.commstateselectorflag)
}

// required int32 syncstate = 20;
inline bool PositionB::_internal_has_syncstate() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool PositionB::has_syncstate() const {
  return _internal_has_syncstate();
}
inline void PositionB::clear_syncstate() {
  syncstate_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_syncstate() const {
  return syncstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::syncstate() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.syncstate)
  return _internal_syncstate();
}
inline void PositionB::_internal_set_syncstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  syncstate_ = value;
}
inline void PositionB::set_syncstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_syncstate(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.syncstate)
}

// required int32 slotincrement = 21;
inline bool PositionB::_internal_has_slotincrement() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool PositionB::has_slotincrement() const {
  return _internal_has_slotincrement();
}
inline void PositionB::clear_slotincrement() {
  slotincrement_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_slotincrement() const {
  return slotincrement_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::slotincrement() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.slotincrement)
  return _internal_slotincrement();
}
inline void PositionB::_internal_set_slotincrement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  slotincrement_ = value;
}
inline void PositionB::set_slotincrement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slotincrement(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.slotincrement)
}

// required int32 numberofslots = 22;
inline bool PositionB::_internal_has_numberofslots() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool PositionB::has_numberofslots() const {
  return _internal_has_numberofslots();
}
inline void PositionB::clear_numberofslots() {
  numberofslots_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_numberofslots() const {
  return numberofslots_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::numberofslots() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.numberofslots)
  return _internal_numberofslots();
}
inline void PositionB::_internal_set_numberofslots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  numberofslots_ = value;
}
inline void PositionB::set_numberofslots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numberofslots(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.numberofslots)
}

// required int32 keepflag = 23;
inline bool PositionB::_internal_has_keepflag() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool PositionB::has_keepflag() const {
  return _internal_has_keepflag();
}
inline void PositionB::clear_keepflag() {
  keepflag_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::_internal_keepflag() const {
  return keepflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionB::keepflag() const {
  // @@protoc_insertion_point(field_get:msg.PositionB.keepflag)
  return _internal_keepflag();
}
inline void PositionB::_internal_set_keepflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  keepflag_ = value;
}
inline void PositionB::set_keepflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keepflag(value);
  // @@protoc_insertion_point(field_set:msg.PositionB.keepflag)
}

// -------------------------------------------------------------------

// AidsToNavigation

// required int32 repeatindicator = 1;
inline bool AidsToNavigation::_internal_has_repeatindicator() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AidsToNavigation::has_repeatindicator() const {
  return _internal_has_repeatindicator();
}
inline void AidsToNavigation::clear_repeatindicator() {
  repeatindicator_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_repeatindicator() const {
  return repeatindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::repeatindicator() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.repeatindicator)
  return _internal_repeatindicator();
}
inline void AidsToNavigation::_internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  repeatindicator_ = value;
}
inline void AidsToNavigation::set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repeatindicator(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.repeatindicator)
}

// required bytes mmsi = 2;
inline bool AidsToNavigation::_internal_has_mmsi() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AidsToNavigation::has_mmsi() const {
  return _internal_has_mmsi();
}
inline void AidsToNavigation::clear_mmsi() {
  mmsi_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AidsToNavigation::mmsi() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.mmsi)
  return _internal_mmsi();
}
inline void AidsToNavigation::set_mmsi(const std::string& value) {
  _internal_set_mmsi(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.mmsi)
}
inline std::string* AidsToNavigation::mutable_mmsi() {
  // @@protoc_insertion_point(field_mutable:msg.AidsToNavigation.mmsi)
  return _internal_mutable_mmsi();
}
inline const std::string& AidsToNavigation::_internal_mmsi() const {
  return mmsi_.Get();
}
inline void AidsToNavigation::_internal_set_mmsi(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AidsToNavigation::set_mmsi(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AidsToNavigation.mmsi)
}
inline void AidsToNavigation::set_mmsi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AidsToNavigation.mmsi)
}
inline void AidsToNavigation::set_mmsi(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mmsi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AidsToNavigation.mmsi)
}
inline std::string* AidsToNavigation::_internal_mutable_mmsi() {
  _has_bits_[0] |= 0x00000001u;
  return mmsi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AidsToNavigation::release_mmsi() {
  // @@protoc_insertion_point(field_release:msg.AidsToNavigation.mmsi)
  if (!_internal_has_mmsi()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mmsi_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AidsToNavigation::set_allocated_mmsi(std::string* mmsi) {
  if (mmsi != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mmsi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mmsi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AidsToNavigation.mmsi)
}

// required int32 navigationtype = 3;
inline bool AidsToNavigation::_internal_has_navigationtype() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AidsToNavigation::has_navigationtype() const {
  return _internal_has_navigationtype();
}
inline void AidsToNavigation::clear_navigationtype() {
  navigationtype_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_navigationtype() const {
  return navigationtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::navigationtype() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.navigationtype)
  return _internal_navigationtype();
}
inline void AidsToNavigation::_internal_set_navigationtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  navigationtype_ = value;
}
inline void AidsToNavigation::set_navigationtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_navigationtype(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.navigationtype)
}

// required bytes name = 4;
inline bool AidsToNavigation::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AidsToNavigation::has_name() const {
  return _internal_has_name();
}
inline void AidsToNavigation::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AidsToNavigation::name() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.name)
  return _internal_name();
}
inline void AidsToNavigation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.name)
}
inline std::string* AidsToNavigation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.AidsToNavigation.name)
  return _internal_mutable_name();
}
inline const std::string& AidsToNavigation::_internal_name() const {
  return name_.Get();
}
inline void AidsToNavigation::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AidsToNavigation::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AidsToNavigation.name)
}
inline void AidsToNavigation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AidsToNavigation.name)
}
inline void AidsToNavigation::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AidsToNavigation.name)
}
inline std::string* AidsToNavigation::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AidsToNavigation::release_name() {
  // @@protoc_insertion_point(field_release:msg.AidsToNavigation.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AidsToNavigation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AidsToNavigation.name)
}

// required int32 positionaccuracy = 5;
inline bool AidsToNavigation::_internal_has_positionaccuracy() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AidsToNavigation::has_positionaccuracy() const {
  return _internal_has_positionaccuracy();
}
inline void AidsToNavigation::clear_positionaccuracy() {
  positionaccuracy_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_positionaccuracy() const {
  return positionaccuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::positionaccuracy() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.positionaccuracy)
  return _internal_positionaccuracy();
}
inline void AidsToNavigation::_internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  positionaccuracy_ = value;
}
inline void AidsToNavigation::set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionaccuracy(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.positionaccuracy)
}

// required bytes longitude = 6;
inline bool AidsToNavigation::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AidsToNavigation::has_longitude() const {
  return _internal_has_longitude();
}
inline void AidsToNavigation::clear_longitude() {
  longitude_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AidsToNavigation::longitude() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.longitude)
  return _internal_longitude();
}
inline void AidsToNavigation::set_longitude(const std::string& value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.longitude)
}
inline std::string* AidsToNavigation::mutable_longitude() {
  // @@protoc_insertion_point(field_mutable:msg.AidsToNavigation.longitude)
  return _internal_mutable_longitude();
}
inline const std::string& AidsToNavigation::_internal_longitude() const {
  return longitude_.Get();
}
inline void AidsToNavigation::_internal_set_longitude(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AidsToNavigation::set_longitude(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  longitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AidsToNavigation.longitude)
}
inline void AidsToNavigation::set_longitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AidsToNavigation.longitude)
}
inline void AidsToNavigation::set_longitude(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AidsToNavigation.longitude)
}
inline std::string* AidsToNavigation::_internal_mutable_longitude() {
  _has_bits_[0] |= 0x00000004u;
  return longitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AidsToNavigation::release_longitude() {
  // @@protoc_insertion_point(field_release:msg.AidsToNavigation.longitude)
  if (!_internal_has_longitude()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return longitude_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AidsToNavigation::set_allocated_longitude(std::string* longitude) {
  if (longitude != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  longitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AidsToNavigation.longitude)
}

// required bytes latitude = 7;
inline bool AidsToNavigation::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AidsToNavigation::has_latitude() const {
  return _internal_has_latitude();
}
inline void AidsToNavigation::clear_latitude() {
  latitude_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AidsToNavigation::latitude() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.latitude)
  return _internal_latitude();
}
inline void AidsToNavigation::set_latitude(const std::string& value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.latitude)
}
inline std::string* AidsToNavigation::mutable_latitude() {
  // @@protoc_insertion_point(field_mutable:msg.AidsToNavigation.latitude)
  return _internal_mutable_latitude();
}
inline const std::string& AidsToNavigation::_internal_latitude() const {
  return latitude_.Get();
}
inline void AidsToNavigation::_internal_set_latitude(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AidsToNavigation::set_latitude(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  latitude_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AidsToNavigation.latitude)
}
inline void AidsToNavigation::set_latitude(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AidsToNavigation.latitude)
}
inline void AidsToNavigation::set_latitude(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AidsToNavigation.latitude)
}
inline std::string* AidsToNavigation::_internal_mutable_latitude() {
  _has_bits_[0] |= 0x00000008u;
  return latitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AidsToNavigation::release_latitude() {
  // @@protoc_insertion_point(field_release:msg.AidsToNavigation.latitude)
  if (!_internal_has_latitude()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return latitude_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AidsToNavigation::set_allocated_latitude(std::string* latitude) {
  if (latitude != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  latitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latitude,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AidsToNavigation.latitude)
}

// required bytes dimensions = 8;
inline bool AidsToNavigation::_internal_has_dimensions() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AidsToNavigation::has_dimensions() const {
  return _internal_has_dimensions();
}
inline void AidsToNavigation::clear_dimensions() {
  dimensions_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AidsToNavigation::dimensions() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.dimensions)
  return _internal_dimensions();
}
inline void AidsToNavigation::set_dimensions(const std::string& value) {
  _internal_set_dimensions(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.dimensions)
}
inline std::string* AidsToNavigation::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable:msg.AidsToNavigation.dimensions)
  return _internal_mutable_dimensions();
}
inline const std::string& AidsToNavigation::_internal_dimensions() const {
  return dimensions_.Get();
}
inline void AidsToNavigation::_internal_set_dimensions(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  dimensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AidsToNavigation::set_dimensions(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  dimensions_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AidsToNavigation.dimensions)
}
inline void AidsToNavigation::set_dimensions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  dimensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AidsToNavigation.dimensions)
}
inline void AidsToNavigation::set_dimensions(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  dimensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AidsToNavigation.dimensions)
}
inline std::string* AidsToNavigation::_internal_mutable_dimensions() {
  _has_bits_[0] |= 0x00000010u;
  return dimensions_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AidsToNavigation::release_dimensions() {
  // @@protoc_insertion_point(field_release:msg.AidsToNavigation.dimensions)
  if (!_internal_has_dimensions()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return dimensions_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AidsToNavigation::set_allocated_dimensions(std::string* dimensions) {
  if (dimensions != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dimensions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dimensions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AidsToNavigation.dimensions)
}

// required int32 epfd = 9;
inline bool AidsToNavigation::_internal_has_epfd() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AidsToNavigation::has_epfd() const {
  return _internal_has_epfd();
}
inline void AidsToNavigation::clear_epfd() {
  epfd_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_epfd() const {
  return epfd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::epfd() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.epfd)
  return _internal_epfd();
}
inline void AidsToNavigation::_internal_set_epfd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  epfd_ = value;
}
inline void AidsToNavigation::set_epfd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epfd(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.epfd)
}

// required int32 utctimestamp = 10;
inline bool AidsToNavigation::_internal_has_utctimestamp() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AidsToNavigation::has_utctimestamp() const {
  return _internal_has_utctimestamp();
}
inline void AidsToNavigation::clear_utctimestamp() {
  utctimestamp_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_utctimestamp() const {
  return utctimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::utctimestamp() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.utctimestamp)
  return _internal_utctimestamp();
}
inline void AidsToNavigation::_internal_set_utctimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  utctimestamp_ = value;
}
inline void AidsToNavigation::set_utctimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_utctimestamp(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.utctimestamp)
}

// required int32 onoffpositionindicator = 11;
inline bool AidsToNavigation::_internal_has_onoffpositionindicator() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AidsToNavigation::has_onoffpositionindicator() const {
  return _internal_has_onoffpositionindicator();
}
inline void AidsToNavigation::clear_onoffpositionindicator() {
  onoffpositionindicator_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_onoffpositionindicator() const {
  return onoffpositionindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::onoffpositionindicator() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.onoffpositionindicator)
  return _internal_onoffpositionindicator();
}
inline void AidsToNavigation::_internal_set_onoffpositionindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  onoffpositionindicator_ = value;
}
inline void AidsToNavigation::set_onoffpositionindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onoffpositionindicator(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.onoffpositionindicator)
}

// required int32 atonflag = 12;
inline bool AidsToNavigation::_internal_has_atonflag() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AidsToNavigation::has_atonflag() const {
  return _internal_has_atonflag();
}
inline void AidsToNavigation::clear_atonflag() {
  atonflag_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_atonflag() const {
  return atonflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::atonflag() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.atonflag)
  return _internal_atonflag();
}
inline void AidsToNavigation::_internal_set_atonflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  atonflag_ = value;
}
inline void AidsToNavigation::set_atonflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_atonflag(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.atonflag)
}

// required int32 raimflag = 13;
inline bool AidsToNavigation::_internal_has_raimflag() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AidsToNavigation::has_raimflag() const {
  return _internal_has_raimflag();
}
inline void AidsToNavigation::clear_raimflag() {
  raimflag_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_raimflag() const {
  return raimflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::raimflag() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.raimflag)
  return _internal_raimflag();
}
inline void AidsToNavigation::_internal_set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  raimflag_ = value;
}
inline void AidsToNavigation::set_raimflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_raimflag(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.raimflag)
}

// required int32 virtualflag = 14;
inline bool AidsToNavigation::_internal_has_virtualflag() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AidsToNavigation::has_virtualflag() const {
  return _internal_has_virtualflag();
}
inline void AidsToNavigation::clear_virtualflag() {
  virtualflag_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_virtualflag() const {
  return virtualflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::virtualflag() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.virtualflag)
  return _internal_virtualflag();
}
inline void AidsToNavigation::_internal_set_virtualflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  virtualflag_ = value;
}
inline void AidsToNavigation::set_virtualflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_virtualflag(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.virtualflag)
}

// required int32 modeindicator = 15;
inline bool AidsToNavigation::_internal_has_modeindicator() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AidsToNavigation::has_modeindicator() const {
  return _internal_has_modeindicator();
}
inline void AidsToNavigation::clear_modeindicator() {
  modeindicator_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_modeindicator() const {
  return modeindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::modeindicator() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.modeindicator)
  return _internal_modeindicator();
}
inline void AidsToNavigation::_internal_set_modeindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  modeindicator_ = value;
}
inline void AidsToNavigation::set_modeindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modeindicator(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.modeindicator)
}

// required int32 spare = 16;
inline bool AidsToNavigation::_internal_has_spare() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool AidsToNavigation::has_spare() const {
  return _internal_has_spare();
}
inline void AidsToNavigation::clear_spare() {
  spare_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_spare() const {
  return spare_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::spare() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.spare)
  return _internal_spare();
}
inline void AidsToNavigation::_internal_set_spare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  spare_ = value;
}
inline void AidsToNavigation::set_spare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spare(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.spare)
}

// required bytes extendname = 17;
inline bool AidsToNavigation::_internal_has_extendname() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AidsToNavigation::has_extendname() const {
  return _internal_has_extendname();
}
inline void AidsToNavigation::clear_extendname() {
  extendname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AidsToNavigation::extendname() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.extendname)
  return _internal_extendname();
}
inline void AidsToNavigation::set_extendname(const std::string& value) {
  _internal_set_extendname(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.extendname)
}
inline std::string* AidsToNavigation::mutable_extendname() {
  // @@protoc_insertion_point(field_mutable:msg.AidsToNavigation.extendname)
  return _internal_mutable_extendname();
}
inline const std::string& AidsToNavigation::_internal_extendname() const {
  return extendname_.Get();
}
inline void AidsToNavigation::_internal_set_extendname(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  extendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AidsToNavigation::set_extendname(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  extendname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AidsToNavigation.extendname)
}
inline void AidsToNavigation::set_extendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  extendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AidsToNavigation.extendname)
}
inline void AidsToNavigation::set_extendname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  extendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AidsToNavigation.extendname)
}
inline std::string* AidsToNavigation::_internal_mutable_extendname() {
  _has_bits_[0] |= 0x00000020u;
  return extendname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AidsToNavigation::release_extendname() {
  // @@protoc_insertion_point(field_release:msg.AidsToNavigation.extendname)
  if (!_internal_has_extendname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return extendname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AidsToNavigation::set_allocated_extendname(std::string* extendname) {
  if (extendname != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  extendname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extendname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AidsToNavigation.extendname)
}

// required int32 stufbits = 18;
inline bool AidsToNavigation::_internal_has_stufbits() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool AidsToNavigation::has_stufbits() const {
  return _internal_has_stufbits();
}
inline void AidsToNavigation::clear_stufbits() {
  stufbits_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::_internal_stufbits() const {
  return stufbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidsToNavigation::stufbits() const {
  // @@protoc_insertion_point(field_get:msg.AidsToNavigation.stufbits)
  return _internal_stufbits();
}
inline void AidsToNavigation::_internal_set_stufbits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  stufbits_ = value;
}
inline void AidsToNavigation::set_stufbits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stufbits(value);
  // @@protoc_insertion_point(field_set:msg.AidsToNavigation.stufbits)
}

// -------------------------------------------------------------------

// ClockSyc

// required bytes clock = 1;
inline bool ClockSyc::_internal_has_clock() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClockSyc::has_clock() const {
  return _internal_has_clock();
}
inline void ClockSyc::clear_clock() {
  clock_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClockSyc::clock() const {
  // @@protoc_insertion_point(field_get:msg.ClockSyc.clock)
  return _internal_clock();
}
inline void ClockSyc::set_clock(const std::string& value) {
  _internal_set_clock(value);
  // @@protoc_insertion_point(field_set:msg.ClockSyc.clock)
}
inline std::string* ClockSyc::mutable_clock() {
  // @@protoc_insertion_point(field_mutable:msg.ClockSyc.clock)
  return _internal_mutable_clock();
}
inline const std::string& ClockSyc::_internal_clock() const {
  return clock_.Get();
}
inline void ClockSyc::_internal_set_clock(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClockSyc::set_clock(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clock_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ClockSyc.clock)
}
inline void ClockSyc::set_clock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ClockSyc.clock)
}
inline void ClockSyc::set_clock(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ClockSyc.clock)
}
inline std::string* ClockSyc::_internal_mutable_clock() {
  _has_bits_[0] |= 0x00000001u;
  return clock_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClockSyc::release_clock() {
  // @@protoc_insertion_point(field_release:msg.ClockSyc.clock)
  if (!_internal_has_clock()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clock_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClockSyc::set_allocated_clock(std::string* clock) {
  if (clock != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clock_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clock,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ClockSyc.clock)
}

// -------------------------------------------------------------------

// NotificationMessage

// required .msg.NotificationMessage.CommandType type = 1;
inline bool NotificationMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NotificationMessage::has_type() const {
  return _internal_has_type();
}
inline void NotificationMessage::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::msg::NotificationMessage_CommandType NotificationMessage::_internal_type() const {
  return static_cast< ::msg::NotificationMessage_CommandType >(type_);
}
inline ::msg::NotificationMessage_CommandType NotificationMessage::type() const {
  // @@protoc_insertion_point(field_get:msg.NotificationMessage.type)
  return _internal_type();
}
inline void NotificationMessage::_internal_set_type(::msg::NotificationMessage_CommandType value) {
  assert(::msg::NotificationMessage_CommandType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void NotificationMessage::set_type(::msg::NotificationMessage_CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.NotificationMessage.type)
}

// optional .msg.ClockSyc clocksyc = 2;
inline bool NotificationMessage::_internal_has_clocksyc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || clocksyc_ != nullptr);
  return value;
}
inline bool NotificationMessage::has_clocksyc() const {
  return _internal_has_clocksyc();
}
inline void NotificationMessage::clear_clocksyc() {
  if (clocksyc_ != nullptr) clocksyc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msg::ClockSyc& NotificationMessage::_internal_clocksyc() const {
  const ::msg::ClockSyc* p = clocksyc_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::ClockSyc&>(
      ::msg::_ClockSyc_default_instance_);
}
inline const ::msg::ClockSyc& NotificationMessage::clocksyc() const {
  // @@protoc_insertion_point(field_get:msg.NotificationMessage.clocksyc)
  return _internal_clocksyc();
}
inline void NotificationMessage::unsafe_arena_set_allocated_clocksyc(
    ::msg::ClockSyc* clocksyc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clocksyc_);
  }
  clocksyc_ = clocksyc;
  if (clocksyc) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.NotificationMessage.clocksyc)
}
inline ::msg::ClockSyc* NotificationMessage::release_clocksyc() {
  _has_bits_[0] &= ~0x00000001u;
  ::msg::ClockSyc* temp = clocksyc_;
  clocksyc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ClockSyc* NotificationMessage::unsafe_arena_release_clocksyc() {
  // @@protoc_insertion_point(field_release:msg.NotificationMessage.clocksyc)
  _has_bits_[0] &= ~0x00000001u;
  ::msg::ClockSyc* temp = clocksyc_;
  clocksyc_ = nullptr;
  return temp;
}
inline ::msg::ClockSyc* NotificationMessage::_internal_mutable_clocksyc() {
  _has_bits_[0] |= 0x00000001u;
  if (clocksyc_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ClockSyc>(GetArena());
    clocksyc_ = p;
  }
  return clocksyc_;
}
inline ::msg::ClockSyc* NotificationMessage::mutable_clocksyc() {
  // @@protoc_insertion_point(field_mutable:msg.NotificationMessage.clocksyc)
  return _internal_mutable_clocksyc();
}
inline void NotificationMessage::set_allocated_clocksyc(::msg::ClockSyc* clocksyc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clocksyc_;
  }
  if (clocksyc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clocksyc);
    if (message_arena != submessage_arena) {
      clocksyc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clocksyc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clocksyc_ = clocksyc;
  // @@protoc_insertion_point(field_set_allocated:msg.NotificationMessage.clocksyc)
}

// optional .msg.PositionA positiona = 3;
inline bool NotificationMessage::_internal_has_positiona() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || positiona_ != nullptr);
  return value;
}
inline bool NotificationMessage::has_positiona() const {
  return _internal_has_positiona();
}
inline void NotificationMessage::clear_positiona() {
  if (positiona_ != nullptr) positiona_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::msg::PositionA& NotificationMessage::_internal_positiona() const {
  const ::msg::PositionA* p = positiona_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionA&>(
      ::msg::_PositionA_default_instance_);
}
inline const ::msg::PositionA& NotificationMessage::positiona() const {
  // @@protoc_insertion_point(field_get:msg.NotificationMessage.positiona)
  return _internal_positiona();
}
inline void NotificationMessage::unsafe_arena_set_allocated_positiona(
    ::msg::PositionA* positiona) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiona_);
  }
  positiona_ = positiona;
  if (positiona) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.NotificationMessage.positiona)
}
inline ::msg::PositionA* NotificationMessage::release_positiona() {
  _has_bits_[0] &= ~0x00000002u;
  ::msg::PositionA* temp = positiona_;
  positiona_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::PositionA* NotificationMessage::unsafe_arena_release_positiona() {
  // @@protoc_insertion_point(field_release:msg.NotificationMessage.positiona)
  _has_bits_[0] &= ~0x00000002u;
  ::msg::PositionA* temp = positiona_;
  positiona_ = nullptr;
  return temp;
}
inline ::msg::PositionA* NotificationMessage::_internal_mutable_positiona() {
  _has_bits_[0] |= 0x00000002u;
  if (positiona_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionA>(GetArena());
    positiona_ = p;
  }
  return positiona_;
}
inline ::msg::PositionA* NotificationMessage::mutable_positiona() {
  // @@protoc_insertion_point(field_mutable:msg.NotificationMessage.positiona)
  return _internal_mutable_positiona();
}
inline void NotificationMessage::set_allocated_positiona(::msg::PositionA* positiona) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete positiona_;
  }
  if (positiona) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(positiona);
    if (message_arena != submessage_arena) {
      positiona = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positiona, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  positiona_ = positiona;
  // @@protoc_insertion_point(field_set_allocated:msg.NotificationMessage.positiona)
}

// optional .msg.ShipStatic shipstatic = 4;
inline bool NotificationMessage::_internal_has_shipstatic() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || shipstatic_ != nullptr);
  return value;
}
inline bool NotificationMessage::has_shipstatic() const {
  return _internal_has_shipstatic();
}
inline void NotificationMessage::clear_shipstatic() {
  if (shipstatic_ != nullptr) shipstatic_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::msg::ShipStatic& NotificationMessage::_internal_shipstatic() const {
  const ::msg::ShipStatic* p = shipstatic_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::ShipStatic&>(
      ::msg::_ShipStatic_default_instance_);
}
inline const ::msg::ShipStatic& NotificationMessage::shipstatic() const {
  // @@protoc_insertion_point(field_get:msg.NotificationMessage.shipstatic)
  return _internal_shipstatic();
}
inline void NotificationMessage::unsafe_arena_set_allocated_shipstatic(
    ::msg::ShipStatic* shipstatic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shipstatic_);
  }
  shipstatic_ = shipstatic;
  if (shipstatic) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.NotificationMessage.shipstatic)
}
inline ::msg::ShipStatic* NotificationMessage::release_shipstatic() {
  _has_bits_[0] &= ~0x00000004u;
  ::msg::ShipStatic* temp = shipstatic_;
  shipstatic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ShipStatic* NotificationMessage::unsafe_arena_release_shipstatic() {
  // @@protoc_insertion_point(field_release:msg.NotificationMessage.shipstatic)
  _has_bits_[0] &= ~0x00000004u;
  ::msg::ShipStatic* temp = shipstatic_;
  shipstatic_ = nullptr;
  return temp;
}
inline ::msg::ShipStatic* NotificationMessage::_internal_mutable_shipstatic() {
  _has_bits_[0] |= 0x00000004u;
  if (shipstatic_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ShipStatic>(GetArena());
    shipstatic_ = p;
  }
  return shipstatic_;
}
inline ::msg::ShipStatic* NotificationMessage::mutable_shipstatic() {
  // @@protoc_insertion_point(field_mutable:msg.NotificationMessage.shipstatic)
  return _internal_mutable_shipstatic();
}
inline void NotificationMessage::set_allocated_shipstatic(::msg::ShipStatic* shipstatic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shipstatic_;
  }
  if (shipstatic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shipstatic);
    if (message_arena != submessage_arena) {
      shipstatic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shipstatic, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  shipstatic_ = shipstatic;
  // @@protoc_insertion_point(field_set_allocated:msg.NotificationMessage.shipstatic)
}

// optional .msg.StandardSAR standardsar = 5;
inline bool NotificationMessage::_internal_has_standardsar() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || standardsar_ != nullptr);
  return value;
}
inline bool NotificationMessage::has_standardsar() const {
  return _internal_has_standardsar();
}
inline void NotificationMessage::clear_standardsar() {
  if (standardsar_ != nullptr) standardsar_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::msg::StandardSAR& NotificationMessage::_internal_standardsar() const {
  const ::msg::StandardSAR* p = standardsar_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::StandardSAR&>(
      ::msg::_StandardSAR_default_instance_);
}
inline const ::msg::StandardSAR& NotificationMessage::standardsar() const {
  // @@protoc_insertion_point(field_get:msg.NotificationMessage.standardsar)
  return _internal_standardsar();
}
inline void NotificationMessage::unsafe_arena_set_allocated_standardsar(
    ::msg::StandardSAR* standardsar) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standardsar_);
  }
  standardsar_ = standardsar;
  if (standardsar) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.NotificationMessage.standardsar)
}
inline ::msg::StandardSAR* NotificationMessage::release_standardsar() {
  _has_bits_[0] &= ~0x00000008u;
  ::msg::StandardSAR* temp = standardsar_;
  standardsar_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::StandardSAR* NotificationMessage::unsafe_arena_release_standardsar() {
  // @@protoc_insertion_point(field_release:msg.NotificationMessage.standardsar)
  _has_bits_[0] &= ~0x00000008u;
  ::msg::StandardSAR* temp = standardsar_;
  standardsar_ = nullptr;
  return temp;
}
inline ::msg::StandardSAR* NotificationMessage::_internal_mutable_standardsar() {
  _has_bits_[0] |= 0x00000008u;
  if (standardsar_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::StandardSAR>(GetArena());
    standardsar_ = p;
  }
  return standardsar_;
}
inline ::msg::StandardSAR* NotificationMessage::mutable_standardsar() {
  // @@protoc_insertion_point(field_mutable:msg.NotificationMessage.standardsar)
  return _internal_mutable_standardsar();
}
inline void NotificationMessage::set_allocated_standardsar(::msg::StandardSAR* standardsar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete standardsar_;
  }
  if (standardsar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(standardsar);
    if (message_arena != submessage_arena) {
      standardsar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standardsar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  standardsar_ = standardsar;
  // @@protoc_insertion_point(field_set_allocated:msg.NotificationMessage.standardsar)
}

// optional .msg.PositionB positionb = 6;
inline bool NotificationMessage::_internal_has_positionb() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || positionb_ != nullptr);
  return value;
}
inline bool NotificationMessage::has_positionb() const {
  return _internal_has_positionb();
}
inline void NotificationMessage::clear_positionb() {
  if (positionb_ != nullptr) positionb_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::msg::PositionB& NotificationMessage::_internal_positionb() const {
  const ::msg::PositionB* p = positionb_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionB&>(
      ::msg::_PositionB_default_instance_);
}
inline const ::msg::PositionB& NotificationMessage::positionb() const {
  // @@protoc_insertion_point(field_get:msg.NotificationMessage.positionb)
  return _internal_positionb();
}
inline void NotificationMessage::unsafe_arena_set_allocated_positionb(
    ::msg::PositionB* positionb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positionb_);
  }
  positionb_ = positionb;
  if (positionb) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.NotificationMessage.positionb)
}
inline ::msg::PositionB* NotificationMessage::release_positionb() {
  _has_bits_[0] &= ~0x00000010u;
  ::msg::PositionB* temp = positionb_;
  positionb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::PositionB* NotificationMessage::unsafe_arena_release_positionb() {
  // @@protoc_insertion_point(field_release:msg.NotificationMessage.positionb)
  _has_bits_[0] &= ~0x00000010u;
  ::msg::PositionB* temp = positionb_;
  positionb_ = nullptr;
  return temp;
}
inline ::msg::PositionB* NotificationMessage::_internal_mutable_positionb() {
  _has_bits_[0] |= 0x00000010u;
  if (positionb_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionB>(GetArena());
    positionb_ = p;
  }
  return positionb_;
}
inline ::msg::PositionB* NotificationMessage::mutable_positionb() {
  // @@protoc_insertion_point(field_mutable:msg.NotificationMessage.positionb)
  return _internal_mutable_positionb();
}
inline void NotificationMessage::set_allocated_positionb(::msg::PositionB* positionb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete positionb_;
  }
  if (positionb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(positionb);
    if (message_arena != submessage_arena) {
      positionb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positionb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  positionb_ = positionb;
  // @@protoc_insertion_point(field_set_allocated:msg.NotificationMessage.positionb)
}

// optional .msg.AidsToNavigation aidstonavigation = 7;
inline bool NotificationMessage::_internal_has_aidstonavigation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || aidstonavigation_ != nullptr);
  return value;
}
inline bool NotificationMessage::has_aidstonavigation() const {
  return _internal_has_aidstonavigation();
}
inline void NotificationMessage::clear_aidstonavigation() {
  if (aidstonavigation_ != nullptr) aidstonavigation_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::msg::AidsToNavigation& NotificationMessage::_internal_aidstonavigation() const {
  const ::msg::AidsToNavigation* p = aidstonavigation_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::AidsToNavigation&>(
      ::msg::_AidsToNavigation_default_instance_);
}
inline const ::msg::AidsToNavigation& NotificationMessage::aidstonavigation() const {
  // @@protoc_insertion_point(field_get:msg.NotificationMessage.aidstonavigation)
  return _internal_aidstonavigation();
}
inline void NotificationMessage::unsafe_arena_set_allocated_aidstonavigation(
    ::msg::AidsToNavigation* aidstonavigation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aidstonavigation_);
  }
  aidstonavigation_ = aidstonavigation;
  if (aidstonavigation) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.NotificationMessage.aidstonavigation)
}
inline ::msg::AidsToNavigation* NotificationMessage::release_aidstonavigation() {
  _has_bits_[0] &= ~0x00000020u;
  ::msg::AidsToNavigation* temp = aidstonavigation_;
  aidstonavigation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::AidsToNavigation* NotificationMessage::unsafe_arena_release_aidstonavigation() {
  // @@protoc_insertion_point(field_release:msg.NotificationMessage.aidstonavigation)
  _has_bits_[0] &= ~0x00000020u;
  ::msg::AidsToNavigation* temp = aidstonavigation_;
  aidstonavigation_ = nullptr;
  return temp;
}
inline ::msg::AidsToNavigation* NotificationMessage::_internal_mutable_aidstonavigation() {
  _has_bits_[0] |= 0x00000020u;
  if (aidstonavigation_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::AidsToNavigation>(GetArena());
    aidstonavigation_ = p;
  }
  return aidstonavigation_;
}
inline ::msg::AidsToNavigation* NotificationMessage::mutable_aidstonavigation() {
  // @@protoc_insertion_point(field_mutable:msg.NotificationMessage.aidstonavigation)
  return _internal_mutable_aidstonavigation();
}
inline void NotificationMessage::set_allocated_aidstonavigation(::msg::AidsToNavigation* aidstonavigation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete aidstonavigation_;
  }
  if (aidstonavigation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aidstonavigation);
    if (message_arena != submessage_arena) {
      aidstonavigation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aidstonavigation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  aidstonavigation_ = aidstonavigation;
  // @@protoc_insertion_point(field_set_allocated:msg.NotificationMessage.aidstonavigation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::NotificationMessage_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::NotificationMessage_CommandType>() {
  return ::msg::NotificationMessage_CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notify_2eproto
